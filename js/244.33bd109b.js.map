{"version":3,"file":"js/244.33bd109b.js","mappings":"kMAAO,MAAMA,EACT,WAAAC,GACIC,KAAKC,OAAS,EACdD,KAAKE,KAAO,CAChB,CACA,IAAAC,CAAKC,GACIA,SAGaC,IAAdD,EAAKF,OACLF,KAAKE,KAAOE,EAAKF,WAEDG,IAAhBD,EAAKH,SACLD,KAAKC,OAASG,EAAKH,QAE3B,ECbG,MAAMK,UAAqBC,EAAA,GAC9B,WAAAR,GACIS,QACAR,KAAKS,QAAU,EACfT,KAAKU,MAAQ,GACbV,KAAKW,MAAQ,IAAIb,CACrB,CACA,IAAAK,CAAKC,GACIA,IAGLI,MAAML,KAAKC,QACUC,IAAjBD,EAAKK,UACLT,KAAKS,QAAUL,EAAKK,UAEpB,QAASL,EAAKO,OACdX,KAAKW,MAAMV,OAASG,EAAKO,MAGzBX,KAAKW,MAAMR,KAAKC,EAAKO,OAE7B,ECrBG,MAAMC,EACT,WAAAb,GACIC,KAAKa,MAAQ,IAAIC,EAAAC,EACjBf,KAAKa,MAAMH,MAAQ,UACnBV,KAAKgB,WAAY,EACjBhB,KAAKiB,QAAU,EACfjB,KAAKkB,SAAU,EACflB,KAAKmB,QAAS,EACdnB,KAAKoB,KAAO,IAAId,CACpB,CACA,IAAAH,CAAKC,QACYC,IAATD,SAGeC,IAAfD,EAAKS,QACLb,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,aAE/BR,IAAnBD,EAAKY,YACLhB,KAAKgB,UAAYZ,EAAKY,WAE1BhB,KAAKsB,KAAOlB,EAAKkB,UACIjB,IAAjBD,EAAKa,UACLjB,KAAKiB,QAAUb,EAAKa,cAEFZ,IAAlBD,EAAKmB,WACLvB,KAAKuB,SAAW,CAAC,OACOlB,IAApBD,EAAKmB,SAASC,IACdxB,KAAKuB,SAASC,GAAI,QAAcpB,EAAKmB,SAASC,SAE1BnB,IAApBD,EAAKmB,SAASE,IACdzB,KAAKuB,SAASE,GAAI,QAAcrB,EAAKmB,SAASE,UAGpCpB,IAAdD,EAAKgB,MACLpB,KAAKoB,KAAKjB,KAAKC,EAAKgB,WAEHf,IAAjBD,EAAKc,UACLlB,KAAKkB,QAAUd,EAAKc,cAEJb,IAAhBD,EAAKe,SACLnB,KAAKmB,OAASf,EAAKe,QAE3B,E,wBC1CG,MAAMO,EACT,WAAA3B,CAAY4B,EAAWC,EAAWC,EAASN,GACvCvB,KAAK2B,UAAYA,EACjB3B,KAAK4B,UAAYA,EACjB5B,KAAK8B,cAAgB,KACjB,MAAMC,GAAgB,QAAmC,CACrDX,KAAMpB,KAAK4B,UAAUI,OAAOZ,KAC5BG,SAAUvB,KAAK6B,QAAQN,WAE3B,OAAOU,EAAA,EAAOZ,OAAOU,EAAcP,EAAGO,EAAcN,EAAE,EAE1DzB,KAAKkC,wBAA0B,CAACC,EAAUC,KACtC,GAAID,EAASE,UACT,OAEJ,MAAMT,EAAY5B,KAAK4B,UAAWU,EAAaV,EAAUI,OAAOZ,KAChE,GAAIe,EAASI,iBAAkB,CAC3B,MAAMC,GAAc,OAA6B,CAAEpB,KAAMkB,IACzDH,EAASZ,SAASkB,MAAMD,GACxBL,EAASO,SAASD,MAAMN,EAASQ,iBACjCR,EAASS,mBAAgBvC,EACzB8B,EAASI,kBAAmB,CAChC,CACA,GAAIvC,KAAK6B,QAAQV,OAAQ,CAMrB,QAL+Bd,IAA3B8B,EAASS,gBACTT,EAASS,cAAgBX,EAAA,EAAOZ,OAAO,EAAG,GAC1Cc,EAASS,cAAcC,QAAS,QAAYV,EAASW,cAAe9C,KAAKuB,UACzEY,EAASS,cAAcG,OAAQ,UAAcC,KAAKC,GAAK,GAEvDd,EAASS,cAAcC,QAAU7C,KAAKoB,OAASpB,KAAK6B,QAAQX,QAAS,CACrE,MAAMgC,EAAUF,KAAKG,IAAIb,EAAWc,MAAOd,EAAWe,QACtDlB,EAASS,cAAcC,OAASK,GAA8B,IAAd,UAAoB,GAAzB,EAC/C,MACwC7C,IAApC8B,EAASmB,yBACTnB,EAASmB,uBACLnB,EAASO,SAASlB,GAAK,EAAI,YAAc,qBAEjD,MAAM+B,EAAcpB,EAASS,cAAcC,OAAQW,EAAarB,EAASS,cAAcG,MAAOU,EAAiBtB,EAASmB,uBACxHnB,EAASO,SAASD,MAAMR,EAAA,EAAOyB,QAC/B,MAAMC,EAAa,CACfnC,EAAsB,cAAnBiC,EAAiCT,KAAKY,IAAMZ,KAAKa,IACpDpC,EAAsB,cAAnBgC,EAAiCT,KAAKa,IAAMb,KAAKY,KAExDzB,EAASZ,SAASC,EAAIxB,KAAKuB,SAASC,EAAI+B,EAAcI,EAAWnC,EAAEgC,GACnErB,EAASZ,SAASE,EAAIzB,KAAKuB,SAASE,EAAI8B,EAAcI,EAAWlC,EAAE+B,GACnErB,EAASS,cAAcC,QAAUT,EAAES,OACnCV,EAASS,cAAcG,QAChBZ,EAAS2B,OAAOC,WAAa,GAAKnC,EAAUkC,OAAOE,WAAc,IAChEpC,EAAUkC,OAAOG,YAC7B,KACK,CACD,MAAMC,EAAOjC,EAAA,EAAOyB,OACpBQ,EAAKrB,OAAST,EAAES,OAChBqB,EAAKnB,MAAQX,EAAEW,MACfZ,EAASO,SAASyB,MAAMD,EAC5B,GAEJlE,KAAKoE,gBAAkB7C,EAAWU,EAAA,EAAOZ,OAAOE,EAASC,EAAGD,EAASE,QAAKpB,EACtEwB,aAAmBjB,EACnBZ,KAAK6B,QAAUA,GAGf7B,KAAK6B,QAAU,IAAIjB,EACnBZ,KAAK6B,QAAQ1B,KAAK0B,IAEtB7B,KAAKqE,UAAW,EAChBrE,KAAKsB,KAAOtB,KAAK6B,QAAQP,KACzBtB,KAAKiB,QAAUjB,KAAK6B,QAAQZ,QAC5BjB,KAAKoB,MAAO,QAAcpB,KAAK6B,QAAQT,KAAKV,OAASkB,EAAUkC,OAAOE,WACtEhE,KAAKE,KAAOF,KAAKoB,KAAOpB,KAAK6B,QAAQT,KAAKX,QAAUmB,EAAUkC,OAAOG,aACrE,MAAMtD,EAAQX,KAAK6B,QAAQT,KAAKT,MAChCX,KAAKW,MAAQ,CACTV,OAAQU,EAAMV,OAAS2B,EAAUkC,OAAOE,WAAapC,EAAUkC,OAAOG,aACtE/D,KAAMS,EAAMT,MAEhBF,KAAKa,OAAQ,QAAgBb,KAAK6B,QAAQhB,QAAU,CAChDyD,EAAG,EACHC,EAAG,EACHC,EAAG,GAEPxE,KAAKuB,SAAWvB,KAAKoE,iBAAiBK,QAAUzE,KAAK8B,eACzD,CACA,OAAA4C,CAAQvC,GACJ,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAU7B,KAAK6B,QACjD,GAAIA,EAAQb,UAAW,CACnB,MAAM2D,EAAQ/C,EAAUgD,cAAcD,MACtC,GAAIA,EAAME,UAAYF,EAAMG,aAAc,CACtC,MAAMC,GAAY,QAAY/E,KAAKuB,SAAUoD,EAAMG,cAC/CC,GAAa/E,KAAKoB,OAClBpB,KAAKqE,UAAW,EAExB,MAEIrE,KAAKqE,UAAW,EAEhBrE,KAAKqE,UAAYM,EAAMpD,WACvBvB,KAAKuB,SAASC,EAAImD,EAAMpD,SAASC,EACjCxB,KAAKuB,SAASE,EAAIkD,EAAMpD,SAASE,EAEzC,CACA,MAAMuD,EAAM7C,EAASW,eAAe,GAAEmC,EAAE,GAAEC,EAAE,SAAEC,IAAa,QAAanF,KAAKuB,SAAUyD,GAAM5C,EAAIH,EAAA,EAAOZ,OAAO4D,EAAIC,GAEnH,GADA9C,EAAES,OAAU7C,KAAKE,KAAO8C,KAAKoC,IAAID,EAAU,GAAMvD,EAAUkC,OAAOG,aAC9DkB,EAAWnF,KAAKoB,KAAOe,EAASkD,YAAa,CAC7C,MAAMC,EAAoC,KAAvBnD,EAASkD,YAAsBzD,EAAUkC,OAAOE,WAC9DhE,KAAKoB,KAAOe,EAASkD,aAAeF,EAAWnF,KAAKoB,KAAOe,EAASkD,kBACzChF,IAA3B8B,EAASS,eAA+BT,EAASS,cAAcC,OAAS,EACrEhB,EAAQX,QACRiB,EAASjB,WAGTiB,EAASI,kBAAmB,EAC5BvC,KAAKkC,wBAAwBC,EAAUC,KAIvCP,EAAQX,UACRiB,EAASf,KAAKV,OAAS4E,GAE3BtF,KAAKkC,wBAAwBC,EAAUC,KAEvCpC,KAAKW,MAAMV,QAAU,GAAKD,KAAKoB,KAAOpB,KAAKW,MAAMV,UACjDD,KAAKoB,MAAQkE,IAEbtF,KAAKW,MAAMT,MAAQ,GAAKF,KAAKE,KAAOF,KAAKW,MAAMT,QAC/CF,KAAKE,MAAQoF,EAAatF,KAAK6B,QAAQT,KAAKX,QAAUmB,EAAUkC,OAAOG,aAE/E,MAEIjE,KAAKkC,wBAAwBC,EAAUC,EAE/C,CACA,IAAAmD,CAAKC,GACDA,EAAQC,UAAUzF,KAAKuB,SAASC,EAAGxB,KAAKuB,SAASE,GACjD+D,EAAQE,YACRF,EAAQG,IAAI,EAAG,EAAG3F,KAAKoB,KAAM,EAAa,EAAV4B,KAAKC,IAAQ,GAC7CuC,EAAQI,YACRJ,EAAQK,WAAY,QAAgB7F,KAAKa,MAAOb,KAAKiB,SACrDuE,EAAQM,MACZ,CACA,MAAAC,GACI,MAAM3B,EAAkBpE,KAAKoE,gBAC7BpE,KAAKuB,SACD6C,IAAmB,QAAcA,EAAiBpE,KAAK4B,UAAUI,OAAOZ,KAAMa,EAAA,EAAOyB,QAC/EU,EACApE,KAAK8B,eACnB,ECjJG,MAAMkE,EACT,WAAAjG,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAKiG,MAAQ,GACbjG,KAAK2B,UAAY,GACjB3B,KAAKkG,uBAAyB,GAC9BtE,EAAUuE,YAAeC,QAA4B/F,IAAd+F,IAA2B,QAASA,GACrEpG,KAAKiG,MAAMG,GAAa,GACxBpG,KAAKiG,MAAMI,MAAMC,GAAMA,EAAEhF,OAAS8E,IACxCxE,EAAU2E,YAAc,CAAC1E,EAASN,IAAavB,KAAKuG,YAAY1E,EAASN,EAC7E,CACA,WAAAgF,CAAY1E,EAASN,GACjB,MAAMiF,EAAW,IAAI9E,EAAiB1B,KAAMA,KAAK4B,UAAWC,EAASN,GAErE,OADAvB,KAAKiG,MAAMQ,KAAKD,GACTA,CACX,CACA,IAAAjB,CAAKC,GACD,IAAK,MAAMgB,KAAYxG,KAAKiG,MACxBO,EAASjB,KAAKC,EAEtB,CACA,eAAAkB,CAAgBC,GACZ,MAAMC,EAAkB5G,KAAK2B,UAAWkF,EAAgB7G,KAAKkG,uBAC7D,GAAa,aAATS,EAAqB,CACrB,MAAMG,GAAuB,QAAyBD,GAAgBE,EAAmBD,IAAwB,QAAyBF,GAAkBI,EAAYhH,KAAK4B,UAAUgD,cAAcD,MAAMsC,cAC3MjH,KAAKuG,YAAYQ,EAAkBC,EACvC,CACJ,CACA,UAAME,GACFlH,KAAK2B,UAAY3B,KAAK4B,UAAUuF,cAAcxF,UAC9C3B,KAAKkG,uBAAyBlG,KAAK4B,UAAUuF,cAAcvC,cAAcwC,MAAMzF,WAC/E,QAA0B3B,KAAK2B,WAAY6E,IACvCxG,KAAKuG,YAAYC,EAAS,GAElC,CACA,cAAAa,CAAelF,GACX,IAAK,MAAMqE,KAAYxG,KAAKiG,MAExB,GADAO,EAAS9B,QAAQvC,GACbA,EAASE,UACT,KAGZ,CACA,cAAAiF,CAAed,GACX,MAAMe,EAAQvH,KAAKiG,MAAMuB,QAAQhB,GAC7Be,GAAS,GACTvH,KAAKiG,MAAMwB,OAAOF,EAAO,EAEjC,CACA,MAAAxB,GACI,IAAK,MAAMS,KAAYxG,KAAKiG,MACxBO,EAAST,QAEjB,CACA,IAAA2B,GACI1H,KAAKiG,MAAQ,EACjB,ECvDJ,MAAM0B,EACF,WAAA5H,GACIC,KAAK4H,GAAK,WACd,CACA,SAAAC,CAAUjG,GACN,OAAO,IAAIoE,EAAUpE,EACzB,CACA,WAAAkG,CAAYjG,EAASkG,IACZ/H,KAAKgI,YAAYnG,IAAa7B,KAAKgI,YAAYD,MAGhDA,GAAQpG,YACRE,EAAQF,WAAY,QAA0BoG,EAAOpG,WAAY6E,IAC7D,MAAMyB,EAAM,IAAIrH,EAEhB,OADAqH,EAAI9H,KAAKqG,GACFyB,CAAG,KAGlBpG,EAAQ+C,cAAcwC,MAAMzF,WAAY,QAA0BoG,GAAQnD,eAAewC,OAAOzF,WAAY6E,IACxG,MAAMyB,EAAM,IAAIrH,EAEhB,OADAqH,EAAI9H,KAAKqG,GACFyB,CAAG,IAElB,CACA,WAAAD,CAAYnG,GACR,IAAKA,EACD,OAAO,EAEX,MAAMF,EAAYE,EAAQF,UAC1B,OAAI,QAAQA,KACCA,EAAUkB,SAEdlB,MAGAE,EAAQ+C,eAAesD,QAAQC,SAASxB,QAC7C,QAAU,WAAY9E,EAAQ+C,cAAcsD,OAAOC,QAAQxB,MAInE,EAEGyB,eAAeC,EAAoBC,EAAQC,GAAU,SAClDD,EAAOE,UAAU,IAAIb,EAAmBY,EAClD,CC9CO,MAAME,EACT,IAAAtI,CAAKC,GACIA,SAGeC,IAAhBD,EAAKsI,SACL1I,KAAK0I,QAAS,QAActI,EAAKsI,cAEnBrI,IAAdD,EAAKuI,OACL3I,KAAK2I,MAAO,QAAcvI,EAAKuI,YAEhBtI,IAAfD,EAAKwI,QACL5I,KAAK4I,OAAQ,QAAcxI,EAAKwI,aAEnBvI,IAAbD,EAAKyI,MACL7I,KAAK6I,KAAM,QAAczI,EAAKyI,MAEtC,ECjBG,MAAMC,UAAoBvI,EAAA,GAC7B,WAAAR,GACIS,QACAR,KAAKU,MAAQ,CACjB,ECJG,MAAMqI,UAAkBxI,EAAA,GAC3B,WAAAR,GACIS,QACAR,KAAKU,MAAQ,CAAEyC,IAAK,EAAG6F,IAAK,EAChC,ECFG,MAAMC,EACT,WAAAlJ,GACIC,KAAKkJ,MAAQ,EACblJ,KAAKmJ,OAAS,IAAIL,EAClB9I,KAAKoJ,KAAO,IAAIL,EAChB/I,KAAKqJ,YAAa,CACtB,CACA,IAAAlJ,CAAKC,GACIA,SAGcC,IAAfD,EAAKS,QACLb,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,aAEnCR,IAAfD,EAAK8I,QACLlJ,KAAKkJ,MAAQ9I,EAAK8I,OAEtBlJ,KAAKmJ,OAAOhJ,KAAKC,EAAK+I,QACtBnJ,KAAKoJ,KAAKjJ,KAAKC,EAAKgJ,MACpBpJ,KAAKsJ,WAAY,QAA0BlJ,EAAKkJ,WAAYA,IACjD,QAAW,CAAC,EAAGA,UAEFjJ,IAApBD,EAAKiJ,aACLrJ,KAAKqJ,WAAajJ,EAAKiJ,YAEvBjJ,EAAKmJ,cACLvJ,KAAKuJ,YAAcvJ,KAAKuJ,aAAe,CAAC,OACblJ,IAAvBD,EAAKmJ,YAAYC,IACjBxJ,KAAKuJ,YAAYC,EAAIpJ,EAAKmJ,YAAYC,QAEfnJ,IAAvBD,EAAKmJ,YAAYE,IACjBzJ,KAAKuJ,YAAYE,EAAIrJ,EAAKmJ,YAAYE,QAEfpJ,IAAvBD,EAAKmJ,YAAYG,IACjB1J,KAAKuJ,YAAYG,EAAItJ,EAAKmJ,YAAYG,IAGlD,ECtCG,MAAMC,EACT,WAAA5J,GACIC,KAAK4J,OAAS,IAAInB,EAClBzI,KAAK2G,KAAO,OACZ3G,KAAK6J,MAAQ,IAAIZ,CACrB,CACA,IAAA9I,CAAKC,GACIA,IAGDA,EAAKuG,OACL3G,KAAK2G,KAAOvG,EAAKuG,MAEjBvG,EAAKwJ,QACL5J,KAAK4J,OAAOzJ,KAAKC,EAAKwJ,QAE1B5J,KAAK6J,MAAM1J,KAAKC,EAAKyJ,OACzB,E,cClBJ,SAASC,EAAiBxB,EAAQ1G,EAAWmI,EAAQC,GACjD,MAAMC,EAAiBF,EAAOlI,QAAQX,QACtC,IAAK+I,EACD,OAEJ,MAAMC,EAAeD,EAAeJ,MAAOhI,GAAU,OAAqByG,EAAQ1G,EAAWmI,EAAOlI,SAAUsH,GAAS,QAASe,EAAaf,QAASgB,EAAcJ,EAAOK,eACvKF,EAAarJ,MACbgB,EAAQhB,MAAMV,KAAK+J,EAAarJ,OAE3BqJ,EAAaX,aAAeY,EACjCtI,EAAQhB,MAAMV,KAAK,CACfO,MAAO,CACH2J,IAAK,CACDb,EAAGW,EAAYX,GAAI,QAAcU,EAAaX,YAAYC,GAAK,GAC/DC,EAAGU,EAAYV,GAAI,QAAcS,EAAaX,YAAYE,GAAK,GAC/DC,EAAGS,EAAYT,GAAI,QAAcQ,EAAaX,YAAYG,GAAK,OAM3E7H,EAAQhB,MAAMV,KAAK,CACfO,MAAO,CACH2J,IAAKN,EAAOK,kBAIxBvI,EAAQyI,KAAKnK,KAAK,CACdoK,OAAQ,CACJ/I,EAAGuI,EAAOxI,SAASC,EACnBC,EAAGsI,EAAOxI,SAASE,EACnBkF,KAAM,cAGV,QAAS9E,EAAQT,KAAKV,OACtBmB,EAAQT,KAAKV,OAASyI,GAGtBtH,EAAQT,KAAKV,MAAMyC,KAAOgG,EAC1BtH,EAAQT,KAAKV,MAAMsI,KAAOG,GAE9BtH,EAAQ1B,KAAK6J,GACb,MAAMQ,EAASN,EAAab,YAAa,SAAeU,EAAO3I,KAAKV,MAAOqJ,EAAO3I,KAAKV,OAAS,EAAGa,EAAW,CAC1GC,EAAGuI,EAAOxI,SAASC,GAAI,QAAcgJ,GACrC/I,EAAGsI,EAAOxI,SAASE,GAAI,QAAc+I,IAEzC,OAAO5I,EAAU0H,UAAUmB,YAAYlJ,EAAUM,EAASkI,EAAOW,OAAQvI,KACjEA,EAASf,KAAKV,MAAQ,MAG1ByB,EAASO,SAASG,QAAS,SAAc,QAAckH,EAAOrH,SAASG,OAAQV,EAASO,SAASG,SACjGV,EAASwI,YAAcZ,EAAOY,YAAc,GAAK,EACjDxI,EAASyI,aAAc,EACvBC,YAAW,KACP1I,EAASyI,aAAc,CAAK,GAC7B,MACI,IAEf,CACO,SAASf,EAAMvB,EAAQ1G,EAAWO,GACrC,MAAM8H,EAAiB9H,EAASN,QAAQX,QACxC,IAAK+I,EACD,OAEJ,MAAMC,EAAeD,EAAeJ,MACpC,GAAIK,EAAahB,OAAS,SAA8B7I,IAAxB8B,EAASwI,YAA4BxI,EAASwI,aAAeT,EAAahB,OACtG,OAEJ,MAAME,GAAO,QAASc,EAAad,MAAO0B,GAAwB,QAAyBZ,EAAaZ,WACxG,IAAK,IAAIyB,EAAI,EAAGA,EAAI3B,EAAM2B,IACtBjB,EAAiBxB,EAAQ1G,EAAWO,EAAU2I,EAEtD,CCtEO,MAAME,EACT,WAAAjL,CAAYuI,EAAQ1G,GAChB5B,KAAKsI,OAASA,EACdtI,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAMP,EAAY5B,KAAK4B,UAAWqJ,EAAmB9I,EAASN,QAASoI,EAAiBgB,EAAiB/J,QACzG,IAAK+I,EACD,OAEJ9H,EAASwI,WAAa,EACtB,MAAMO,EAAuBjB,EAAeL,OACvCzH,EAASgJ,gBACVhJ,EAASgJ,cAAgB,CAAC,GAE9B,MAAM,OAAEzC,EAAM,KAAEC,EAAI,MAAEC,EAAK,IAAEC,GAAQqC,GAAsB,cAAEC,GAAkBhJ,EAAUG,EAAaV,EAAUI,OAAOZ,KACnHsH,IACAyC,EAAczC,QAAU,QAAcA,GAAUpG,EAAWe,OAAU,KAErEsF,IACAwC,EAAcxC,MAAQ,QAAcA,GAAQrG,EAAWc,MAAS,KAEhEwF,IACAuC,EAAcvC,OAAS,QAAcA,GAAStG,EAAWc,MAAS,KAElEyF,IACAsC,EAActC,KAAO,QAAcA,GAAOvG,EAAWe,OAAU,IAEvE,CACA,SAAA+H,CAAUjJ,GACN,OAAQA,EAASE,SACrB,CACA,WAAAyF,CAAYjG,KAAYwJ,GACfxJ,EAAQX,UACTW,EAAQX,QAAU,IAAIyI,GAE1B,IAAK,MAAM5B,KAAUsD,EACjBxJ,EAAQX,QAAQf,KAAK4H,GAAQ7G,QAErC,CACA,iBAAAoK,CAAkBnJ,EAAUoJ,GACxB,GAAIA,EACA,OAEJ,MAAMtB,EAAiB9H,EAASN,QAAQX,QACpC+I,GAA0C,UAAxBA,EAAetD,MACjCkD,EAAM7J,KAAKsI,OAAQtI,KAAK4B,UAAWO,EAE3C,CACA,MAAAqJ,CAAOrJ,GACH,IAAKnC,KAAKoL,UAAUjJ,GAChB,OAEJ,MAAMZ,EAAWY,EAASW,cAAe8G,EAASzH,EAASgJ,cACtDvB,SAGkBvJ,IAAlBuJ,EAAOlB,QAAwBnH,EAASE,GAAKmI,EAAOlB,aACpCrI,IAAhBuJ,EAAOjB,MAAsBpH,EAASC,GAAKoI,EAAOjB,WACjCtI,IAAjBuJ,EAAOhB,OAAuBrH,EAASC,GAAKoI,EAAOhB,YACpCvI,IAAfuJ,EAAOf,KAAqBtH,EAASE,GAAKmI,EAAOf,MAClD1G,EAASjB,SAEjB,ECjEGkH,eAAeqD,EAAmBnD,EAAQC,GAAU,SACjDD,EAAOoD,mBAAmB,WAAY9J,GAAc,IAAIoJ,EAAe1C,EAAQ1G,IAAY2G,EACrG,CCFO,MAAMoD,EACT,cAAAC,CAAerK,EAAUH,EAAM0E,GAC3B,MAAM+F,EAAgB,CAACrK,EAAGC,KACtB,MAAMqK,GAAI,UAAc,EAAKC,EAAQ/I,KAAKgJ,KAAMvK,EAAID,EAAKwB,KAAKiJ,IAAI,EAAIjJ,KAAKC,GAAK6I,IAAK1J,GAAI,UACzF,OAAIA,EAAI,IACG2J,EAEF3J,EAAI,GACFY,KAAKC,GAAK8I,EAEZ3J,EAAI,IACFY,KAAKC,GAAK8I,GAGTA,CACZ,EACD9L,EAAS,CAACuB,EAAGC,EAAGsK,IAAWvK,EAAIC,EAAKuB,KAAKkJ,MAAMzK,EAAIuB,KAAKY,IAAImI,KAAW,GAAKvK,EAAIwB,KAAKa,IAAIkI,KAAW,IAAKI,EAAG7H,GAAK,CAAClD,EAAKgC,MAAQ,EAAGhC,EAAKiC,OAAS,GAAI+I,EAAcP,EAAcM,EAAG7H,GAAI+H,EAAYpM,EAAOkM,EAAG7H,EAAG8H,GAAcE,EAAexG,EAAOuG,EAAYrJ,KAAKkJ,MAAK,WAAeG,EAC5R,MAAO,CACH7K,EAAGD,EAASC,EAAI8K,EAAetJ,KAAKY,IAAIwI,GACxC3K,EAAGF,EAASE,EAAI6K,EAAetJ,KAAKa,IAAIuI,GAEhD,E,cCrBG,MAAMG,EACT,WAAAxM,GACIC,KAAKwM,MAAO,CAChB,CACA,IAAArM,CAAKC,GACIA,SAGcC,IAAfD,EAAK8I,QACLlJ,KAAKkJ,MAAQ9I,EAAK8I,YAEH7I,IAAfD,EAAKqM,QACLzM,KAAKyM,OAAQ,QAAcrM,EAAKqM,aAEdpM,IAAlBD,EAAKsM,WACL1M,KAAK0M,UAAW,QAActM,EAAKsM,gBAErBrM,IAAdD,EAAKoM,OACLxM,KAAKwM,KAAOpM,EAAKoM,MAEzB,ECpBG,MAAMG,EACT,WAAA5M,GACIC,KAAK4M,SAAW,EAChB5M,KAAKyM,MAAQ,EACjB,CACA,IAAAtM,CAAKC,QACYC,IAATD,SAGkBC,IAAlBD,EAAKwM,WACL5M,KAAK4M,UAAW,QAAcxM,EAAKwM,gBAEpBvM,IAAfD,EAAKqM,QACLzM,KAAKyM,OAAQ,QAAcrM,EAAKqM,QAExC,EChBG,MAAMI,EACT,WAAA9M,GACIC,KAAK2G,KAAO,UACZ3G,KAAKqD,OAAS,EACdrD,KAAKoD,MAAQ,CACjB,CACA,IAAAjD,CAAKC,QACYC,IAATD,SAGcC,IAAdD,EAAKuG,OACL3G,KAAK2G,KAAOvG,EAAKuG,WAEDtG,IAAhBD,EAAKiD,SACLrD,KAAKqD,OAASjD,EAAKiD,aAEJhD,IAAfD,EAAKgD,QACLpD,KAAKoD,MAAQhD,EAAKgD,OAE1B,ECfG,MAAM0J,EACT,WAAA/M,GACIC,KAAK+M,UAAW,EAChB/M,KAAK8F,MAAO,EACZ9F,KAAKgN,KAAO,IAAIT,EAChBvM,KAAKoJ,KAAO,IAAIuD,EAChB3M,KAAKiN,MAAQ,SACbjN,KAAKkN,WAAa,CACtB,CACA,IAAA/M,CAAKC,GACIA,SAGiBC,IAAlBD,EAAK2M,WACL/M,KAAK+M,SAAW3M,EAAK2M,eAEP1M,IAAdD,EAAKgB,OACApB,KAAKoB,OACNpB,KAAKoB,KAAO,IAAIyL,GAEpB7M,KAAKoB,KAAKjB,KAAKC,EAAKgB,YAEDf,IAAnBD,EAAK+M,YACLnN,KAAKmN,UAAY/M,EAAK+M,WAE1BnN,KAAKoN,MAAQhN,EAAKgN,WACA/M,IAAdD,EAAK0F,OACL9F,KAAK8F,KAAO1F,EAAK0F,MAErB9F,KAAKgN,KAAK7M,KAAKC,EAAK4M,MACpBhN,KAAKsB,KAAOlB,EAAKkB,KACjBtB,KAAKsJ,WAAY,QAA0BlJ,EAAKkJ,WAAYA,IACjD,QAAW,CAAC,EAAGA,KAE1BtJ,KAAKoJ,KAAKjJ,KAAKC,EAAKgJ,WACD/I,IAAfD,EAAK6M,QACLjN,KAAKiN,MAAQ7M,EAAK6M,YAEA5M,IAAlBD,EAAKmB,WACLvB,KAAKuB,SAAW,CAAC,OACOlB,IAApBD,EAAKmB,SAASC,IACdxB,KAAKuB,SAASC,GAAI,QAAcpB,EAAKmB,SAASC,SAE1BnB,IAApBD,EAAKmB,SAASE,IACdzB,KAAKuB,SAASE,GAAI,QAAcrB,EAAKmB,SAASE,UAG9BpB,IAApBD,EAAKiN,kBACmBhN,IAApBL,KAAKqN,aACLrN,KAAKqN,WAAa,IAAIC,EAAA,GAE1BtN,KAAKqN,WAAWlN,KAAKC,EAAKiN,kBAENhN,IAApBD,EAAK8M,aACLlN,KAAKkN,WAAa9M,EAAK8M,YAE/B,ECzDG,MAAMK,EACT,WAAAxN,CAAYuI,EAAQkF,EAAU5L,EAAWC,EAASN,GAC9CvB,KAAKwN,SAAWA,EAChBxN,KAAK4B,UAAYA,EACjB5B,KAAK8B,cAAgB,KACV,QAAmC,CACtCV,KAAMpB,KAAK4B,UAAUI,OAAOZ,KAC5BG,SAAUvB,KAAK6B,QAAQN,WAG/BvB,KAAKyN,SAAW,KACZzN,KAAKwN,SAASE,cAAc1N,MAC5BA,KAAK2N,QAAQC,cAAc,mBAAoB,CAC3ChM,UAAW5B,KAAK4B,UAChBxB,KAAM,CACFyN,QAAS7N,OAEf,EAENA,KAAK8N,MAAQ,KACT,GAAI9N,KAAK+N,QACL,OAEJ,MAAMnB,GAAW,QAAc5M,KAAK6B,QAAQuH,KAAKwD,UACjD5M,KAAKgO,eAAepB,EAAS,EAEjC5M,KAAKgO,eAAkBpB,IACnB,MAAMrL,EAAWvB,KAAK8C,cAAe1B,EAAOpB,KAAKiO,UAAWC,GAAyB,QAAyBlO,KAAKmO,mBACnH,IAAK,IAAIpD,EAAI,EAAGA,EAAI6B,EAAU7B,IAAK,CAC/B,MAAME,GAAmB,QAAW,CAAC,EAAGiD,GACxC,GAAIlO,KAAKqN,WAAY,CACjB,MAAMe,EAAepO,KAAK6B,QAAQwL,YAAYgB,UAC1CD,IACApO,KAAKqN,WAAW7D,EAAIxJ,KAAKsO,mBAAmBF,EAAa5E,EAAGxJ,KAAKqN,WAAW7D,EAAG,KAC/ExJ,KAAKqN,WAAW5D,EAAIzJ,KAAKsO,mBAAmBF,EAAa3E,EAAGzJ,KAAKqN,WAAW5D,EAAG,KAC/EzJ,KAAKqN,WAAW3D,EAAI1J,KAAKsO,mBAAmBF,EAAa1E,EAAG1J,KAAKqN,WAAW3D,EAAG,MAE9EuB,EAAiBpK,MAMlBoK,EAAiBpK,MAAMH,MAAQV,KAAKqN,WALpCpC,EAAiBpK,MAAQ,CACrBH,MAAOV,KAAKqN,WAMxB,CACA,IAAK9L,EACD,OAEJ,MAAMgN,EAAYvO,KAAKwO,QAAQ5C,eAAerK,EAAUH,EAAMpB,KAAK8F,OAASvE,EAC5EvB,KAAK4B,UAAU0H,UAAUmB,YAAY8D,EAAWtD,EACpD,GAEJjL,KAAKyO,cAAgB,KACjB,GAAIzO,KAAK+N,QACL,OAEJ,MAAMrB,OAA2CrM,IAAhCL,KAAK6B,QAAQmL,MAAMN,UAAyB,QAAc1M,KAAK6B,QAAQmL,KAAKN,eAAYrM,EACrGL,KAAK4B,UAAUkC,OAAOG,eACrBjE,KAAK0O,WAAa,GAAK1O,KAAK2O,iBAChBtO,IAAbqM,GACAA,EAAW,IACX1M,KAAK4O,UAAuB,IAAXlC,EACrB,EAEJ1M,KAAKsO,mBAAqB,CAACD,EAAWQ,EAAWC,KAC7C,MAAMlN,EAAY5B,KAAK4B,UACvB,IAAKyM,EAAUU,OACX,OAAOF,EAEX,MAAMtF,GAAc,QAAc8E,EAAU7D,QAASiC,GAAQ,QAAczM,KAAK6B,QAAQuH,KAAKqD,OAAQuC,EAAc,IAAOvC,EAAS7K,EAAUkC,OAAOG,aAAcgL,GAAa,QAAcZ,EAAUa,OAAS,GAChN,OAAQL,EAAaI,EAAarN,EAAUuN,SAAYH,EAA2B,IAAdzF,GAAqBuF,CAAQ,EAEtG9O,KAAK2N,QAAUrF,EACftI,KAAKoP,iBAAmB,EACxBpP,KAAKqP,kBAAoB,EACzBrP,KAAKsP,mBAAqB,EAC1BtP,KAAKuP,iBAAmBhO,EACpBM,aAAmBiL,EACnB9M,KAAK6B,QAAUA,GAGf7B,KAAK6B,QAAU,IAAIiL,EACnB9M,KAAK6B,QAAQ1B,KAAK0B,IAEtB7B,KAAKwP,YAA6D,KAA9C,QAAcxP,KAAK6B,QAAQmL,KAAKP,OAAS,GAAazM,KAAK4B,UAAUkC,OAAOG,aAChGjE,KAAKuB,SAAWvB,KAAKuP,kBAAoBvP,KAAK8B,gBAC9C9B,KAAKsB,KAAOtB,KAAK6B,QAAQP,KACzBtB,KAAKwO,OAASxO,KAAK2N,QAAQ8B,qBAAqBC,SAAS1P,KAAK6B,QAAQoL,OACtEjN,KAAK8F,KAAO9F,KAAK6B,QAAQiE,KACzB9F,KAAK2P,aAAe3P,KAAK6B,QAAQmL,KAAKR,KACtCxM,KAAK4P,sBAAuB,EAC5B,IAAI3E,GAAmB,QAAW,CAAC,EAAGjL,KAAK6B,QAAQyH,WACnD2B,IAAqB,CAAC,EACtBA,EAAiBX,OAAS,CAAC,EAC3BW,EAAiBX,KAAK6C,YAAcnN,KAAK6B,QAAQsL,UAC7CnN,KAAK6B,QAAQwL,aACbrN,KAAKqN,YAAa,QAAgBrN,KAAK6B,QAAQwL,aAEnDrN,KAAK+N,SAAW/N,KAAK6B,QAAQkL,SAC7B/M,KAAKmO,kBAAoBlD,EACzBjL,KAAKoB,KACDpB,KAAK6B,QAAQT,MACT,MACI,MAAMA,EAAO,IAAIyL,EAMjB,OALAzL,EAAKjB,KAAK,CACNkD,OAAQ,EACRsD,KAAM,UACNvD,MAAO,IAEJhC,CACV,EARD,GASRpB,KAAK0O,WAAa1O,KAAK6B,QAAQmL,KAAK9D,QAAU,EAC9ClJ,KAAK2O,UAAY3O,KAAK0O,YAAc,EACpC1O,KAAK2N,QAAQC,cAAc,iBAAkB,CACzChM,YACAxB,KAAM,CACFyN,QAAS7N,QAGjBA,KAAK6P,MACT,CACA,aAAAC,GACI9P,KAAK+N,SAAU,EACf/N,KAAK+P,OACT,CACA,YAAAC,GACIhQ,KAAK+N,SAAU,EACf/N,KAAK6P,MACT,CACA,WAAA/M,GACI,GAAI9C,KAAK6B,QAAQuL,MAAO,CACpB,MAAMxL,EAAY5B,KAAK4B,UAAWqO,EAAUC,SAASC,eAAenQ,KAAK6B,QAAQuL,OACjF,GAAI6C,EAAS,CACT,MAAMG,EAASH,EAAQI,wBACvB,MAAO,CACH7O,GAAI4O,EAAO5O,EAAI4O,EAAOhN,MAAQ,GAAKxB,EAAUkC,OAAOE,WACpDvC,GAAI2O,EAAO3O,EAAI2O,EAAO/M,OAAS,GAAKzB,EAAUkC,OAAOE,WAE7D,CACJ,CACA,OAAOhE,KAAKuB,QAChB,CACA,OAAA0M,GACI,MAAMrM,EAAY5B,KAAK4B,UACvB,GAAI5B,KAAK6B,QAAQuL,MAAO,CACpB,MAAM6C,EAAUC,SAASC,eAAenQ,KAAK6B,QAAQuL,OACrD,GAAI6C,EAAS,CACT,MAAMG,EAASH,EAAQI,wBACvB,MAAO,CACHjN,MAAOgN,EAAOhN,MAAQxB,EAAUkC,OAAOE,WACvCX,OAAQ+M,EAAO/M,OAASzB,EAAUkC,OAAOE,WAEjD,CACJ,CACA,OAAO,QAAQhE,KAAKoB,KAAMQ,EAAUI,OAAOZ,KAC/C,CACA,KAAA2O,GACQ/P,KAAK+N,gBAGF/N,KAAKsQ,UAChB,CACA,IAAAT,GACI,IAAI7P,KAAK+N,SAGH/N,KAAK4B,UAAUkC,OAAOG,eACvBjE,KAAK0O,WAAa,GAAK1O,KAAK2O,YAAc3O,KAAK6B,QAAQmL,KAAK9D,SAC5DlJ,KAAK2P,aAAe3P,KAAKsP,qBAAuBtP,KAAKwP,aAAe,IAFzE,CAKA,QAAwBnP,IAApBL,KAAKsQ,WAA0B,CAC/B,MAAM7D,GAAQ,QAAczM,KAAK6B,QAAQuH,KAAKqD,OAC9CzM,KAAKsQ,WAAc,IAAO7D,EAASzM,KAAK4B,UAAUkC,OAAOG,YAC7D,EACIjE,KAAK0O,WAAa,GAAK1O,KAAK2O,YAC5B3O,KAAKyO,eANT,CAQJ,CACA,MAAA1I,GACI,MAAM3B,EAAkBpE,KAAKuP,iBAC7BvP,KAAKuB,SACD6C,IAAmB,QAAcA,EAAiBpE,KAAK4B,UAAUI,OAAOZ,KAAMa,EAAA,EAAOyB,QAC/EU,EACApE,KAAK8B,eACnB,CACA,MAAA0J,CAAO+E,GACCvQ,KAAK+N,UAGL/N,KAAK2P,cACL3P,KAAK2P,aAAc,EACnB3P,KAAKsP,mBAAqBtP,KAAKwP,aAAe,EAC9CxP,KAAKqP,kBAAoBrP,KAAKsQ,YAAc,GAE3CtQ,KAAK4P,uBACN5P,KAAK4P,sBAAuB,EAC5B5P,KAAKgO,eAAehO,KAAK6B,QAAQqL,kBAEd7M,IAAnBL,KAAK4O,YACL5O,KAAKoP,kBAAoBmB,EAAM7P,MAC3BV,KAAKoP,kBAAoBpP,KAAK4O,YAC9B5O,KAAK+P,aACoB1P,IAArBL,KAAKwP,oBACExP,KAAKwP,YAEXxP,KAAK2O,WACN3O,KAAK0O,aAEL1O,KAAK0O,WAAa,GAAK1O,KAAK2O,WAC5B3O,KAAKuB,SAAWvB,KAAK8B,gBACrB9B,KAAKwP,YAC8C,KAA9C,QAAcxP,KAAK6B,QAAQmL,KAAKP,OAAS,GAAazM,KAAK4B,UAAUkC,OAAOG,cAGjFjE,KAAKyN,WAETzN,KAAKoP,kBAAoBpP,KAAK4O,iBACvB5O,KAAK4O,iBAGKvO,IAArBL,KAAKwP,cACLxP,KAAKsP,oBAAsBiB,EAAM7P,MAC7BV,KAAKsP,oBAAsBtP,KAAKwP,cAChCxP,KAAK2N,QAAQC,cAAc,cAAe,CACtChM,UAAW5B,KAAK4B,YAEpB5B,KAAK6P,OACL7P,KAAKsP,oBAAsBtP,KAAKsP,0BACzBtP,KAAKwP,mBAGInP,IAApBL,KAAKsQ,aACLtQ,KAAKqP,mBAAqBkB,EAAM7P,MAC5BV,KAAKqP,mBAAqBrP,KAAKsQ,aAC/BtQ,KAAK8N,QACL9N,KAAKqP,mBAAqBrP,KAAKsQ,aAG3C,EChPG,MAAME,EACT,WAAAzQ,CAAYuI,EAAQ1G,GAChB5B,KAAK4B,UAAYA,EACjB5B,KAAK2N,QAAUrF,EACftI,KAAKiG,MAAQ,GACbjG,KAAKwN,SAAW,GAChBxN,KAAKyQ,sBAAwB,CACzBC,OAAQ,CACJxH,MAAO,EACP6F,QAAQ,GAEZrO,MAAO,IAEXkB,EAAU+O,WAAcvK,QAA4B/F,IAAd+F,IAA2B,QAASA,GACpEpG,KAAKiG,MAAMG,GAAa,GACxBpG,KAAKiG,MAAMI,MAAMC,GAAMA,EAAEhF,OAAS8E,IACxCxE,EAAUgP,WAAa,CAAC/O,EAASN,IAAavB,KAAK4Q,WAAW/O,EAASN,GACvEK,EAAU8L,cAAiBtH,IACvB,MAAMyH,EAAUjM,EAAU+O,WAAWvK,GACjCyH,GACA7N,KAAK0N,cAAcG,EACvB,EAEJjM,EAAUiP,YAAezK,IACrB,MAAMyH,EAAUjM,EAAU+O,WAAWvK,GACjCyH,GACAA,EAAQmC,cACZ,EAEJpO,EAAUkP,aAAgB1K,IACtB,MAAMyH,EAAUjM,EAAU+O,WAAWvK,GACjCyH,GACAA,EAAQiC,eACZ,CAER,CACA,UAAAc,CAAW/O,EAASN,GAChB,MAAMwP,EAAiB,IAAIjE,EAC3BiE,EAAe5Q,KAAK0B,GACpB,MAAMgM,EAAU,IAAIN,EAAgBvN,KAAK2N,QAAS3N,KAAMA,KAAK4B,UAAWmP,EAAgBxP,GAExF,OADAvB,KAAKiG,MAAMQ,KAAKoH,GACTA,CACX,CACA,eAAAnH,CAAgBC,GACZ,MAAMoK,EAAiB/Q,KAAKwN,SAAUwD,EAAehR,KAAKyQ,sBAC1D,GAAa,YAAT9J,EACA,OAEJ,IAAIsK,EACJ,GAAID,IAAgB,QAAQA,EAAatQ,OACrC,GAAIsQ,EAAatQ,MAAMmC,OAAS,GAAKmO,EAAaN,OAAO3B,OAAQ,CAC7DkC,EAAsB,GACtB,MAAMC,EAAc,GACpB,IAAK,IAAInG,EAAI,EAAGA,EAAIiG,EAAaN,OAAOxH,MAAO6B,IAAK,CAChD,MAAMoG,GAAM,QAAiBH,EAAatQ,OACtCwQ,EAAYE,SAASD,IAAQD,EAAYrO,OAASmO,EAAatQ,MAAMmC,OACrEkI,KAGJmG,EAAYzK,KAAK0K,GACjBF,EAAoBxK,MAAK,QAAcuK,EAAatQ,MAAOyQ,IAC/D,CACJ,MAEIF,EAAsBD,EAAatQ,WAIvCuQ,EAAsBD,GAActQ,MAExC,MAAM2Q,EAAkBJ,GAAuBF,EAAgBO,EAAYtR,KAAK4B,UAAUgD,cAAcD,MAAMsC,eAC9G,QAA0BoK,GAAkBxD,IACxC7N,KAAK4Q,WAAW/C,EAASyD,EAAU,GAE3C,CACA,UAAMpK,GAGF,GAFAlH,KAAKwN,SAAWxN,KAAK4B,UAAUuF,cAAcqG,SAC7CxN,KAAKyQ,sBAAwBzQ,KAAK4B,UAAUuF,cAAcvC,cAAcwC,MAAMoG,SACzExN,KAAKwN,SAGV,IAAI,QAAQxN,KAAKwN,UACb,IAAK,MAAMuD,KAAkB/Q,KAAKwN,SAC9BxN,KAAK4Q,WAAWG,QAIpB/Q,KAAK4Q,WAAW5Q,KAAKwN,SAE7B,CACA,KAAAuC,GACI,IAAK,MAAMlC,KAAW7N,KAAKiG,MACvB4H,EAAQkC,OAEhB,CACA,IAAAF,GACI,IAAK,MAAMhC,KAAW7N,KAAKiG,MACvB4H,EAAQgC,MAEhB,CACA,aAAAnC,CAAcG,GACV,MAAMtG,EAAQvH,KAAKiG,MAAMuB,QAAQqG,GAC7BtG,GAAS,GACTvH,KAAKiG,MAAMwB,OAAOF,EAAO,EAEjC,CACA,MAAAxB,GACI,IAAK,MAAM8H,KAAW7N,KAAKiG,MACvB4H,EAAQ9H,QAEhB,CACA,IAAA2B,GACI1H,KAAKiG,MAAQ,EACjB,CACA,MAAAuF,CAAO+E,GACH,IAAK,MAAM1C,KAAW7N,KAAKiG,MACvB4H,EAAQrC,OAAO+E,EAEvB,ECzHJ,MAAMgB,EAAS,IAAIC,IACZ,MAAMC,EACT,WAAA1R,CAAYuI,GACRtI,KAAK2N,QAAUrF,CACnB,CACA,QAAAoJ,CAASpQ,EAAMqQ,GACN3R,KAAK0P,SAASpO,IACfiQ,EAAOK,IAAItQ,EAAMqQ,EAEzB,CACA,QAAAjC,CAASpO,GACL,OAAOiQ,EAAOM,IAAIvQ,EACtB,CACA,kBAAAwQ,GACI,OAAOP,EAAOQ,MAClB,ECdJ,SAASC,EAAuBzQ,EAAUiJ,GACtC,OAAOjJ,EAAWiJ,IAAU,UAAc,GAC9C,CACO,MAAMyH,EACT,cAAArG,CAAerK,EAAUH,EAAM0E,GAC3B,GAAIA,EACA,MAAO,CACHtE,EAAGwQ,EAAuBzQ,EAASC,EAAGJ,EAAKgC,OAC3C3B,EAAGuQ,EAAuBzQ,EAASE,EAAGL,EAAKiC,SAG9C,CACD,MAAM6O,EAAQ9Q,EAAKgC,MAAQ,EAAG+O,EAAQ/Q,EAAKiC,OAAS,EAAG+O,EAAOpP,KAAKqP,MAAoB,GAAd,WAAkBjQ,EAA0B,IAArB,UAAc,IAC9G,OAAQgQ,GACJ,KAAK,EACD,MAAO,CACH5Q,EAAGD,EAASC,EAAIY,EAAI8P,EACpBzQ,EAAGF,EAASE,EAAI0Q,GAExB,KAAK,EACD,MAAO,CACH3Q,EAAGD,EAASC,EAAI0Q,EAChBzQ,EAAGF,EAASE,EAAIW,EAAI+P,GAE5B,KAAK,EACD,MAAO,CACH3Q,EAAGD,EAASC,EAAIY,EAAI8P,EACpBzQ,EAAGF,EAASE,EAAI0Q,GAExB,KAAK,EACL,QACI,MAAO,CACH3Q,EAAGD,EAASC,EAAI0Q,EAChBzQ,EAAGF,EAASE,EAAIW,EAAI+P,GAGpC,CACJ,EChCJ,MAAMG,EACF,WAAAvS,CAAYuI,GACRtI,KAAK2N,QAAUrF,EACftI,KAAK4H,GAAK,UACd,CACA,SAAAC,CAAUjG,GACN,OAAO,IAAI4O,EAASxQ,KAAK2N,QAAS/L,EACtC,CACA,WAAAkG,CAAYjG,EAASkG,GACjB,IAAK/H,KAAKgI,YAAYnG,KAAa7B,KAAKgI,YAAYD,GAChD,OAEAA,GAAQyF,WACR3L,EAAQ2L,UAAW,QAA0BzF,EAAOyF,UAAWK,IAC3D,MAAM5F,EAAM,IAAI6E,EAEhB,OADA7E,EAAI9H,KAAK0N,GACF5F,CAAG,KAGlB,MAAMwI,EAAwB1I,GAAQnD,eAAewC,OAAOoG,SAC5D,GAAIiD,EACA,IAAI,QAAQA,GACR5O,EAAQ+C,cAAcwC,MAAMoG,SAAW,CACnCkD,OAAQ,CACJxH,MAAO,EACP6F,QAAQ,GAEZrO,MAAO+P,EAAsB8B,KAAK9I,IAC9B,MAAMxB,EAAM,IAAI6E,EAEhB,OADA7E,EAAI9H,KAAKsJ,GACFxB,CAAG,SAIjB,CACD,MAAMuK,EAAc/B,EACpB,QAA0BpQ,IAAtBmS,EAAY9R,MACZ,IAAI,QAAQ8R,EAAY9R,OACpBmB,EAAQ+C,cAAcwC,MAAMoG,SAAW,CACnCkD,OAAQ,CACJxH,MAAOsJ,EAAY9B,OAAOxH,OAAS,EACnC6F,OAAQyD,EAAY9B,OAAO3B,SAAU,GAEzCrO,MAAO8R,EAAY9R,MAAM6R,KAAK9I,IAC1B,MAAMxB,EAAM,IAAI6E,EAEhB,OADA7E,EAAI9H,KAAKsJ,GACFxB,CAAG,SAIjB,CACD,MAAMA,EAAM,IAAI6E,EAChB7E,EAAI9H,KAAKqS,EAAY9R,OACrBmB,EAAQ+C,cAAcwC,MAAMoG,SAAW,CACnCkD,OAAQ,CACJxH,MAAOsJ,EAAY9B,OAAOxH,OAAS,EACnC6F,OAAQyD,EAAY9B,OAAO3B,SAAU,GAEzCrO,MAAOuH,EAEf,KAEC,CACD,MAAM8I,EAAkBlP,EAAQ+C,cAAcwC,MAAMoG,SAAW,CAC3DkD,OAAQ,CACJxH,MAAO,EACP6F,QAAQ,GAEZrO,MAAO,IAAIoM,GAEfiE,EAAerQ,MAAMP,KAAKsQ,EAC9B,CACJ,CAER,CACA,WAAAzI,CAAYnG,GACR,IAAKA,EACD,OAAO,EAEX,MAAM2L,EAAW3L,EAAQ2L,SACzB,OAAS,QAAQA,MAAeA,EAAS3K,aACxBxC,IAAbmN,KACG3L,EAAQ+C,eAAesD,QAAQC,SAASxB,OACvC,QAAU,UAAW9E,EAAQ+C,cAAcsD,OAAOC,QAAQxB,KACtE,EAEGyB,eAAeqK,EAAmBnK,EAAQC,GAAU,GAClDD,EAAOmH,sBACRnH,EAAOmH,oBAAsB,IAAIgC,EAAanJ,IAE7CA,EAAOoK,kBACRpK,EAAOoK,gBAAkB,CAACpR,EAAM2L,KAC5B3E,EAAOmH,qBAAqBiC,SAASpQ,EAAM2L,EAAM,GAGzD,MAAM0F,EAAS,IAAIL,EAAehK,SAC5BA,EAAOE,UAAUmK,EAAQpK,GAC/BD,EAAOoK,gBAAgB,SAAU,IAAI/G,GACrCrD,EAAOoK,gBAAgB,SAAU,IAAIT,EACzC,CCzGO,MAAMW,EACT,WAAA7S,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAK6S,KAAO,UAChB,ECHG,MAAMC,EACT,WAAA/S,GACIC,KAAKyM,MAAQ,EACbzM,KAAK+S,aAAc,EACnB/S,KAAK4M,SAAW,CACpB,CACA,IAAAzM,CAAKC,GACIA,SAGcC,IAAfD,EAAKqM,QACLzM,KAAKyM,MAAQrM,EAAKqM,YAEApM,IAAlBD,EAAKwM,WACL5M,KAAK4M,SAAWxM,EAAKwM,eAEFvM,IAAnBD,EAAKkJ,YACLtJ,KAAKsJ,WAAY,QAAW,CAAC,EAAGlJ,EAAKkJ,iBAEhBjJ,IAArBD,EAAK2S,cACL/S,KAAK+S,YAAc3S,EAAK2S,aAEhC,ECrBG,MAAMC,UAAmBJ,EAC5B,WAAA7S,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAKiT,OAAS,CAClB,CACA,KAAAC,GACA,CACA,IAAAhM,GACA,CACA,cAAMiM,CAAS5C,GACX,MAAM3O,EAAY5B,KAAK4B,WAAW,cAAEgD,GAAkBhD,EACtD,IAAKA,EAAUkC,OAAOG,aAClB,OAEJ,MAAMpC,EAAUD,EAAUuF,cAAeiM,EAAevR,EAAQ+C,cAAcwC,MAAMiM,MACpF,IAAKD,EACD,OAEJ,MAAME,EAAiC,IAArBF,EAAa3G,MAAgBzM,KAAK4B,UAAUkC,OAAOG,aAIrE,GAHIjE,KAAKiT,OAASK,IACdtT,KAAKiT,QAAU1C,EAAM7P,OAErBV,KAAKiT,OAASK,EACd,OAEJ,MAAMC,IAAYH,EAAaL,cAC1BnO,EAAcD,MAAMpD,WAAavB,KAAKwT,eAClC5O,EAAcD,MAAMpD,UAAUC,IAAMxB,KAAKwT,eAAehS,GACrDoD,EAAcD,MAAMpD,UAAUE,IAAMzB,KAAKwT,eAAe/R,IAC9DgS,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAC3CkS,EACAzT,KAAKwT,cAAgB,IAAKC,UAGnBzT,KAAKwT,cAEZD,GACA3R,EAAU0H,UAAU7C,KAAK2M,EAAaxG,SAAUhL,EAAUgD,cAAcD,MAAOyO,EAAa9J,WAEhGtJ,KAAKiT,QAAUK,CACnB,CACA,SAAAlI,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAexC,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiB/C,EAAQ+C,eAAesD,OACxK,OAASvD,EAAME,UAAYF,EAAM+O,UAAY/O,EAAMpD,WAAY,QAAU,QAAS2G,EAAOC,QAAQxB,OAC5FhC,EAAM+O,UAAY/O,EAAMpD,WAAY,QAAU,QAAS2G,EAAOyL,QAAQhN,KAC/E,CACA,eAAAiN,CAAgB/R,KAAYwJ,GACnBxJ,EAAQwR,QACTxR,EAAQwR,MAAQ,IAAIP,GAExB,IAAK,MAAM/K,KAAUsD,EACjBxJ,EAAQwR,MAAMlT,KAAK4H,GAAQsL,MAEnC,CACA,KAAAQ,GACA,ECxDGzL,eAAe0L,EAA6BxL,EAAQC,GAAU,SAC3DD,EAAOyL,cAAc,iBAAkBnS,GAAc,IAAIoR,EAAWpR,IAAY2G,EAC1F,CCFO,SAASyL,EAAa7R,GACzB,MAAM8R,EAAU9R,EAASN,QAAQqS,KACjC,GAAKD,GAASlF,OAiBd,GAPA5M,EAAS+R,KAAO,CACZnF,OAAQkF,EAAQlF,OAChBoF,WAA6B,eAAjBF,EAAQtN,MAA0C,SAAjBsN,EAAQtN,KACrDyN,SAA2B,aAAjBH,EAAQtN,MAAwC,SAAjBsN,EAAQtN,KACjD5D,OAAO,UAAcC,KAAKC,GAAK,EAC/BiM,OAAO,QAAc+E,EAAQ/E,OAAS,KAEtC+E,EAAQI,UACRlS,EAASkS,WAAY,QAAgBJ,EAAQI,gBAE5C,GAAIJ,EAAQK,OAAOvF,QAAUkF,EAAQM,UAAUxF,OAAQ,CACxD,MAAMyF,GAAY,WAAe,GAAM,SAAW,YAClDrS,EAAS+R,KAAKO,MAAQ,CAClB5B,KAAM2B,EACN9T,OAAO,QAA4B,WAAd8T,EAAyBP,EAAQK,OAAO5T,MAAQuT,EAAQM,UAAU7T,OAE/F,MACSuT,EAAQK,OAAOvF,OACpB5M,EAAS+R,KAAKO,MAAQ,CAClB5B,KAAM,SACNnS,OAAO,QAAcuT,EAAQK,OAAO5T,QAGnCuT,EAAQM,UAAUxF,SACvB5M,EAAS+R,KAAKO,MAAQ,CAClB5B,KAAM,YACNnS,OAAO,QAAcuT,EAAQM,UAAU7T,cAnC3CyB,EAAS+R,KAAO,CACZnF,QAAQ,EACRoF,YAAY,EACZC,UAAU,EACVrR,MAAO,EACPmM,MAAO,EAiCnB,CACO,SAASwF,EAAWvS,EAAUoO,GACjC,MAAM2D,EAAO/R,EAASN,QAAQqS,KAAM9T,EAAO+B,EAAS+R,KACpD,IAAK9T,IAAS8T,GAAMnF,OAChB,OAEJ,MAAMG,EAAQ9O,EAAK8O,MAAQqB,EAAMpH,OAAQH,EAAM,EAAIhG,KAAKC,GACxD7C,EAAK2C,OAASmM,EACV9O,EAAK2C,MAAQiG,IACb5I,EAAK2C,OAASiG,EAEtB,CCpDO,MAAM2L,EACT,WAAA5U,GACIC,KAAK+O,QAAS,EACd/O,KAAKU,MAAQ,CACjB,CACA,IAAAP,CAAKC,GACIA,SAGeC,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEJ1O,IAAfD,EAAKM,QACLV,KAAKU,OAAQ,QAAcN,EAAKM,QAExC,ECdG,MAAMkU,EACT,WAAA7U,GACIC,KAAKsU,OAAS,IAAIK,EAClB3U,KAAK+O,QAAS,EACd/O,KAAKuU,UAAY,IAAII,EACrB3U,KAAK2G,KAAO,WACZ3G,KAAKkP,MAAQ,EACjB,CACA,IAAA/O,CAAKC,GACIA,SAGkBC,IAAnBD,EAAKiU,YACLrU,KAAKqU,UAAYvT,EAAAC,EAAaM,OAAOrB,KAAKqU,UAAWjU,EAAKiU,YAE9DrU,KAAKsU,OAAOnU,KAAKC,EAAKkU,aACFjU,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,QAEvB/O,KAAKuU,UAAUpU,KAAKC,EAAKmU,gBACPlU,IAAdD,EAAKuG,OACL3G,KAAK2G,KAAOvG,EAAKuG,WAEFtG,IAAfD,EAAK8O,QACLlP,KAAKkP,OAAQ,QAAc9O,EAAK8O,QAExC,EC1BG,MAAM2F,EACT,kBAAAC,CAAmB3S,GACf,MAAM+R,EAAO/R,EAAS+R,MAAMnF,QAAU5M,EAAS+R,KAAMa,EAAiBb,GAAQA,EAAKC,WAAYa,EAAed,GAAQA,EAAKE,SAC3H,MAAO,CACHjI,EAAG4I,EAAiB/R,KAAKY,IAAIsQ,EAAKnR,YAAS1C,EAC3C4U,EAAGD,EAAehS,KAAKa,IAAIqQ,EAAKnR,YAAS1C,EAEjD,CACA,IAAA6G,CAAK/E,GACD6R,EAAa7R,EACjB,CACA,SAAAiJ,CAAUjJ,GACN,MAAM+R,EAAO/R,EAASN,QAAQqS,KAC9B,OAAQ/R,EAASE,YAAcF,EAAS+S,YAAchB,GAAMnF,MAChE,CACA,WAAAjH,CAAYjG,KAAYwJ,GACfxJ,EAAQqS,OACTrS,EAAQqS,KAAO,IAAIU,GAEvB,IAAK,MAAM7M,KAAUsD,EACjBxJ,EAAQqS,KAAK/T,KAAK4H,GAAQmM,KAElC,CACA,MAAA1I,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,IAGpBuS,EAAWvS,EAAUoO,EACzB,EC7BGnI,eAAe+M,EAAgB7M,EAAQC,GAAU,SAC9CD,EAAOoD,mBAAmB,QAAQ,IAAM,IAAImJ,GAAetM,EACrE,C,cCFO,MAAM6M,EACT,WAAOlO,CAAKrF,GACR,MAAMyH,EAAY,IAAI8L,EAAaC,EAAWxT,EAAQwT,SACtD,IAAKA,EACD,MAAM,IAAIC,MAAM,wBAEpB,MAAMC,EAAKrF,SAASsF,cAAcH,GAClC,IAAKE,EACD,MAAM,IAAID,MAAM,iCAuDpB,OArDA,KACK1D,IAAIyD,EAASI,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAKF,EAAI,CACrDG,WAAY,CACR3G,QAAQ,GAEZzF,UAAW,CACPzI,MAAO,CACHH,MAAOmB,EAAQhB,OAAS,WAE5B8U,MAAO,CACH9U,MAAO,SACPsE,SAAUtD,EAAQ+T,aAAe,IACjC7G,OAAQlN,EAAQgU,mBAAoB,GAExCvL,KAAM,CACFyE,QAAQ,EACRG,MAAOrN,EAAQqN,OAAS,IAE5B4G,OAAQ,CACJpV,MAAOmB,EAAQkU,cAAgB,KAEnC3U,KAAM,CACFV,MAAO,CAAEyC,IAAK,EAAG6F,IAAKnH,EAAQmU,gBAAkB,KAGxDC,WAAYpU,EAAQoU,YAAY1D,KAAK0D,IAAe,CAChDC,SAAUD,EAAWE,WACrBtU,QAAS,CACLyH,UAAW,CACPzI,MAAO,CACHH,MAAOuV,EAAWpU,SAAShB,OAE/B8U,MAAO,CACHxQ,SAAU8Q,EAAWpU,SAAS+T,YAC9B7G,OAAQkH,EAAWpU,SAASgU,kBAEhCC,OAAQ,CACJpV,MAAOmB,EAAQkU,cAEnBzL,KAAM,CACFyE,QAAQ,EACRG,MAAO+G,EAAWpU,SAASqN,OAE/B9N,KAAM,CACFV,MAAOuV,EAAWpU,SAASmU,wBAM1CI,MAAMxU,IACP0H,EAAU+M,WAAazU,CAAS,IAE7B0H,CACX,CACA,OAAApI,GACI,MAAMU,EAAY5B,KAAKqW,WACvBzU,GAAaA,EAAUV,SAC3B,CACA,cAAAoV,GACI,MAAM1U,EAAY5B,KAAKqW,WACvBzU,GAAaA,EAAUmO,OAC3B,CACA,eAAAwG,GACI,MAAM3U,EAAY5B,KAAKqW,WACvBzU,GAAaA,EAAUiO,MAC3B,EC7EJ,MAAM2G,EAAmBlO,IACrB,MAAMmO,EAAc,CAACC,EAAO7U,IACjByG,EAAOnI,KAAKuW,EAAO7U,GAE9B4U,EAAYtW,KAAO,CAACuW,EAAOC,EAAgBC,KACvCtO,EACKuO,SAASH,EAAOC,GAChBP,MAAMxU,IACHA,GACAgV,EAAShV,EACb,IAECkV,OAAM,KACPF,OAASvW,EAAU,GACrB,EAENoW,EAAYM,kBAAqBH,IAC7BtO,EAAOyO,kBAAkBH,EAAS,EAEtC,MAAMI,EAAS1O,EAAO2O,MACtB,MAAO,CAAER,cAAaO,SAAQ,EClB5BE,EAAW5O,IACb,MAAM,YAAEmO,EAAW,OAAEO,GAAWR,EAAgBlO,GAIhD,OAHA6O,OAAOV,YAAcA,EACrBU,OAAOH,OAASA,EAChBG,OAAO/B,UAAYA,EACZ,CAAEqB,cAAaO,SAAQ5B,UAAS,ICNpC,SAASgC,GAAcjV,GAC1B,MAAMiC,EAAkBjC,EAASiC,iBAAiB,GAAEa,EAAE,GAAEC,IAAO,QAAad,EAAiBjC,EAASZ,UAAW8V,EAAUrU,KAAKsU,IAAIrS,GAAKsS,EAAUvU,KAAKsU,IAAIpS,IAAK,YAAEsS,GAAgBrV,EAAS2B,OAAQ2T,EAAYD,EAAYrD,WAAYuD,EAAYF,EAAYpD,SAChQ,GAAKqD,GAAcC,EAGnB,IAAMD,GAAaJ,GAAWI,GAAeC,GAAaH,GAAWG,KAAgBvV,EAASwV,UAC1FxV,EAASwV,YAAeF,GAAaJ,EAAUI,KAAiBC,GAAaH,EAAUG,EACnFD,IACAtV,EAASO,SAASlB,EAAIW,EAASO,SAASjB,EAAI,EAAIU,EAASO,SAASlB,GAElEkW,IACAvV,EAASO,SAASjB,EAAIU,EAASO,SAASlB,EAAI,EAAIW,EAASO,SAASjB,QAGrE,KAAMgW,GAAaJ,EAAUI,MAAgBC,GAAaH,EAAUG,IAAcvV,EAASwV,UAC5FxV,EAASwV,WAAY,OAEpB,GAAIxV,EAASwV,UAAW,CACzB,MAAM3S,EAAM7C,EAASZ,SAAUqW,EAAMzV,EAASO,SAC1C+U,IAAezS,EAAIxD,EAAI4C,EAAgB5C,GAAKoW,EAAIpW,EAAI,GAAOwD,EAAIxD,EAAI4C,EAAgB5C,GAAKoW,EAAIpW,EAAI,KAChGoW,EAAIpW,KAAM,WAEVkW,IAAe1S,EAAIvD,EAAI2C,EAAgB3C,GAAKmW,EAAInW,EAAI,GAAOuD,EAAIvD,EAAI2C,EAAgB3C,GAAKmW,EAAInW,EAAI,KAChGmW,EAAInW,KAAM,UAElB,CACJ,CACO,SAAS6I,GAAKnI,EAAU0V,EAAa9T,EAAW+T,EAAUC,EAAWxH,GACxEyH,GAAU7V,EAAUoO,GACpB,MAAM0H,EAAiB9V,EAAS+V,QAASC,EAAgBF,GAAgBlJ,QAAUkJ,EAAeG,SAAW,EAAI,EAC7GL,GAAahU,IACb5B,EAASO,SAASlB,GAAMuW,EAAYxH,EAAMpH,QAAW,GAAKpF,IAE1DkU,GAAgBlJ,QAAUhL,IAC1B5B,EAASO,SAASjB,GAAM0W,GAAiBF,EAAeI,aAAe9H,EAAMpH,SAAY,GAAKpF,IAElG,MAAMuU,EAAQnW,EAASoW,UACvBpW,EAASO,SAAS8V,OAAOF,GACzB,MAAM5V,EAAWP,EAASO,SAAS+V,KAAK1U,GACpCkU,GAAgBlJ,QAChB+I,EAAW,KACRG,EAAeG,SAAW1V,EAASjB,GAAK,GAAKiB,EAASjB,GAAKqW,GACzDG,EAAeG,SAAW1V,EAASjB,GAAK,GAAKiB,EAASjB,IAAMqW,KACjEpV,EAASjB,EAAI0W,EAAgBL,EACzB/T,IACA5B,EAASO,SAASjB,EAAIiB,EAASjB,EAAIsC,IAG3C,MAAM2U,EAAgBvW,EAASN,QAAQ8W,OAAQC,GAAmB,EAAIzW,EAAS0W,eAAiBH,EAAcI,aAC9GpW,EAAS8V,OAAOI,GAChB,MAAM,SAAErX,GAAaY,EACrBZ,EAAS4C,MAAMzB,GACXmV,EAAYkB,UACZxX,EAASC,GAAKwB,KAAKa,IAAItC,EAASC,EAAIwB,KAAKY,IAAIrC,EAASE,IACtDF,EAASE,GAAKuB,KAAKY,IAAIrC,EAASE,EAAIuB,KAAKa,IAAItC,EAASC,IAE9D,CACO,SAASwX,GAAK7W,EAAU4B,GAC3B,MAAMnC,EAAYO,EAASP,UAC3B,IAAKO,EAAS6W,KACV,OAEJ,MAAMrV,EAAa,CACfnC,EAA+B,cAA5BW,EAAS6W,KAAK7L,UAA4BnK,KAAKY,IAAMZ,KAAKa,IAC7DpC,EAA+B,cAA5BU,EAAS6W,KAAK7L,UAA4BnK,KAAKa,IAAMb,KAAKY,KAEjEzB,EAASZ,SAASC,EAAIW,EAAS6W,KAAKzO,OAAO/I,EAAIW,EAAS6W,KAAK/Y,OAAS0D,EAAWnC,EAAEW,EAAS6W,KAAKjW,OACjGZ,EAASZ,SAASE,EAAIU,EAAS6W,KAAKzO,OAAO9I,EAAIU,EAAS6W,KAAK/Y,OAAS0D,EAAWlC,EAAEU,EAAS6W,KAAKjW,OACjGZ,EAAS6W,KAAK/Y,QAAUkC,EAAS6W,KAAKX,aACtC,MAAMY,EAAgBjW,KAAKgG,IAAIpH,EAAUI,OAAOZ,KAAKgC,MAAOxB,EAAUI,OAAOZ,KAAKiC,QAC9ElB,EAAS6W,KAAK/Y,OAASgZ,EAAgB,GACvC9W,EAAS6W,KAAK/Y,OAASgZ,EAAgB,EACvC9W,EAAS6W,KAAKX,eAAiB,GAE1BlW,EAAS6W,KAAK/Y,OAAS,IAC5BkC,EAAS6W,KAAK/Y,OAAS,EACvBkC,EAAS6W,KAAKX,eAAiB,GAEnClW,EAAS6W,KAAKjW,OAAUgB,EAAY,KAAQ,EAAI5B,EAAS6W,KAAK/Y,OAASgZ,EAC3E,CACO,SAASjB,GAAU7V,EAAUoO,GAChC,MAAMtF,EAAmB9I,EAASN,QAASqX,EAAcjO,EAAiBX,KAAK6O,KAAMC,EAAcF,EAAYnK,OAC/G,IAAKqK,EACD,OAEJ,GAAIjX,EAASkX,cAAgBlX,EAASmX,UAElC,YADAnX,EAASkX,cAAgB9I,EAAM7P,OAGnC,MAAMyY,EAAOhX,EAASoX,eAAeC,SAASrX,EAAUoO,GACpD4I,GACAhX,EAASO,SAASyB,MAAMgV,GAExBD,EAAYO,QACZtX,EAASO,SAASlB,GAAI,QAAMW,EAASO,SAASlB,GAAI,EAAG,GACrDW,EAASO,SAASjB,GAAI,QAAMU,EAASO,SAASjB,GAAI,EAAG,IAEzDU,EAASkX,cAAgBlX,EAASmX,SACtC,CACO,SAASI,GAAwBvX,GACpC,OAAOA,EAASwX,KAAKC,QAAUzX,EAASwX,KAAKxQ,OAAS,CAC1D,CCpGA,MAAM0Q,GAAa,EACZ,MAAMC,GACT,WAAA/Z,GACIC,KAAK+Z,UAAa5X,IACd,MAAMP,EAAYO,EAASP,UAAWC,EAAUM,EAASN,QAASmY,EAAcnY,EAAQyI,KAAK0O,KAC7F,IAAKgB,EAAYjL,OACb,OAEJ,MAAMkL,EAAUD,EAAYzY,UAAY,CAAEC,EAAG,GAAIC,EAAG,IAAMyY,EAAa,CACnE1Y,EAAIyY,EAAQzY,EAAI,IAAOI,EAAUI,OAAOZ,KAAKgC,MAC7C3B,EAAIwY,EAAQxY,EAAI,IAAOG,EAAUI,OAAOZ,KAAKiC,QAC9C2B,EAAM7C,EAASW,cAAeqC,GAAW,QAAYH,EAAKkV,GAAaC,GAAmB,QAAcH,EAAY3B,cACvHlW,EAAS2B,OAAOqW,iBAAmBA,EAAmBvY,EAAUkC,OAAOE,WACvE7B,EAAS6W,KAAO,CACZzO,OAAQ2P,EACR/M,UAAWhL,EAASO,SAASlB,GAAK,EAAI,YAAc,oBACpDuB,MAAOZ,EAASO,SAASK,MACzB9C,OAAQkF,EACRkT,aAAclW,EAAS2B,OAAOqW,iBACjC,CAET,CACA,IAAAjT,CAAK/E,GACD,MAAMN,EAAUM,EAASN,QAASoW,EAAiBpW,EAAQyI,KAAK4N,QAChE/V,EAAS+V,QAAU,CACfnJ,OAAQkJ,EAAelJ,OACvBsJ,cAAc,QAAcJ,EAAeI,cAC3CD,QAASH,EAAeG,SAE5BpY,KAAK+Z,UAAU5X,EACnB,CACA,SAAAiJ,CAAUjJ,GACN,OAAQA,EAASE,WAAaF,EAASN,QAAQyI,KAAKyE,MACxD,CACA,IAAAzE,CAAKnI,EAAUoO,GACX,MAAM6J,EAAkBjY,EAASN,QAASgW,EAAcuC,EAAgB9P,KACxE,IAAKuN,EAAY9I,OACb,OAEJ,MAAMnN,EAAYO,EAASP,UAAWyY,EAAUzY,EAAUkC,OAAOE,WAAYsW,EAAaZ,GAAwBvX,GAAWoY,GAAapY,EAAS2B,OAAOC,aAAc,QAAc8T,EAAY3I,OAASmL,GACvMzY,EAAUkC,OAAOG,aAAc8T,EAAa5V,EAAS2B,OAAOiU,aAAc,QAAc5V,EAASN,QAAQyI,KAAKkQ,OAASH,EAAUI,GAAU,QAAYL,EAAgBhZ,KAAKV,OAAS2Z,EAAS/U,EAAauS,EAAYzW,KAAOe,EAASkD,YAAcoV,EAAU,EAAG1W,EAAawW,EAAYjV,EAAagV,GAAc/J,EAAMpH,QAAU,GAAM0Q,GAAY/B,EAAW3V,EAAS2B,OAAOgU,UAAYlW,EAAUkC,OAAOgU,SAChZD,EAAYmB,KAAKjK,OACjBiK,GAAK7W,EAAU4B,GAGfuG,GAAKnI,EAAU0V,EAAa9T,EAAW+T,EAAUC,EAAWxH,GAEhE6G,GAAcjV,EAClB,ECjDGiG,eAAesS,GAAcpS,EAAQC,GAAU,SAC5CD,EAAOqS,SAAS,QAAQ,IAAM,IAAIb,IAAavR,EACzD,CCFO,MAAMqS,GACT,IAAArV,CAAKC,EAASrD,EAAUlC,GACfkC,EAAS0Y,cACV1Y,EAAS0Y,YAAc,CAAE1X,IAAK,EAAG6F,IAAe,EAAVhG,KAAKC,KAE/C,MAAM4X,EAAc1Y,EAAS0Y,YAC7BrV,EAAQG,IAAI,EAAG,EAAG1F,EAAQ4a,EAAY1X,IAAK0X,EAAY7R,KAAK,EAChE,CACA,aAAA8R,GACI,OAAO,EACX,CACA,YAAAC,CAAanZ,EAAWO,GACpB,MAAM6Y,EAAY7Y,EAAS6Y,UAAWjY,EAAQiY,GAAWjY,OAAS,CAC9DiG,IAAK,IACL7F,IAAK,GAEThB,EAAS0Y,aAAe,QAAS9X,GAK3B,CAAEI,IAAMJ,EAAMI,IAAMH,KAAKC,GAAM,IAAK+F,IAAMjG,EAAMiG,IAAMhG,KAAKC,GAAM,KAJjE,CACEE,IAAK,EACL6F,IAAMjG,EAAQC,KAAKC,GAAM,IAGrC,ECtBGmF,eAAe6S,GAAgB3S,EAAQC,GAAU,SAC9CD,EAAOoJ,SAAS,SAAU,IAAIkJ,GAAgBrS,EACxD,CCFA,SAAS2S,GAAiB3K,EAAO4K,EAAYC,EAAgBpS,EAAKqS,GAC9D,IAAKF,IACAC,EAAerM,SACdoM,EAAWG,UAAY,GAAK,IAAMH,EAAWI,OAAS,IAAMJ,EAAWG,UAAY,GACrF,OAQJ,GANKH,EAAWK,OACZL,EAAWK,KAAO,IAEjBL,EAAWM,WAAa,GAAK,GAAKN,EAAWK,MAAQL,EAAWM,WAAa,KAC9EN,EAAWK,MAAQjL,EAAM7P,QAExBya,EAAWM,WAAa,GAAK,GAAKN,EAAWK,MAAQL,EAAWM,WAAa,GAC9E,OAEJ,MAAMjR,GAAS,QAAc4Q,EAAe5Q,QAAS9H,GAAYyY,EAAWzY,UAAY,GAAK6N,EAAMpH,OAAkB,IAATqB,EAAc8N,EAAQ6C,EAAW7C,OAAS,EACjJ+C,GAAkC,eAAtBF,EAAWO,QAcxBP,EAAWza,OAASgC,EAChByY,EAAWza,MAAQ,IACdya,EAAWI,QACZJ,EAAWI,MAAQ,GAEvBJ,EAAWI,QACXJ,EAAWO,OAAS,aACpBP,EAAWza,OAASya,EAAWza,SApBnCya,EAAWza,OAASgC,EAChByY,EAAWza,MAAQsI,IACdmS,EAAWI,QACZJ,EAAWI,MAAQ,GAEvBJ,EAAWI,QACPF,IACAF,EAAWO,OAAS,aACpBP,EAAWza,OAASya,EAAWza,MAAQsI,KAe/CmS,EAAWzY,UAAsB,IAAV4V,IACvB6C,EAAWzY,UAAY4V,GAEvB6C,EAAWza,MAAQsI,IACnBmS,EAAWza,OAASsI,EAE5B,CACO,SAAS2S,GAAYxZ,EAAUoO,GAClC,MAAQ/G,EAAGoS,EAAYnS,EAAGoS,EAAYnS,EAAGoS,GAAe3Z,EAASN,QAAQhB,MAAMwN,WAAW,MAAExN,GAAUsB,EACtG,IAAKtB,EACD,OAEJ,MAAM,EAAE2I,EAAC,EAAEC,EAAC,EAAEC,GAAM7I,EAChB2I,GACA0R,GAAiB3K,EAAO/G,EAAGoS,EAAY,KAAK,GAE5CnS,GACAyR,GAAiB3K,EAAO9G,EAAGoS,EAAY,KAAK,GAE5CnS,GACAwR,GAAiB3K,EAAO7G,EAAGoS,EAAY,KAAK,EAEpD,CC7DO,MAAMC,GACT,WAAAhc,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAM6Z,GAAW,QAAgB7Z,EAASN,QAAQhB,MAAOsB,EAASyF,GAAIzF,EAASN,QAAQoa,kBACnFD,IACA7Z,EAAStB,OAAQ,QAAuBmb,EAAU7Z,EAASN,QAAQhB,MAAMwN,UAAWrO,KAAK4B,UAAUkC,OAAOG,cAElH,CACA,SAAAmH,CAAUjJ,GACN,MAAQqH,EAAGoS,EAAYnS,EAAGoS,EAAYnS,EAAGoS,GAAe3Z,EAASN,QAAQhB,MAAMwN,WAAW,MAAExN,GAAUsB,EACtG,OAASA,EAASE,YACbF,EAAS+S,gBACW7U,IAAnBQ,GAAO2I,EAAE9I,OAAuBkb,EAAW7M,aACrB1O,IAAnBQ,GAAO4I,EAAE/I,OAAuBmb,EAAW9M,aACxB1O,IAAnBQ,GAAO6I,EAAEhJ,OAAuBob,EAAW/M,OACxD,CACA,MAAAvD,CAAOrJ,EAAUoO,GACboL,GAAYxZ,EAAUoO,EAC1B,ECrBGnI,eAAe8T,GAAiB5T,EAAQC,GAAU,SAC/CD,EAAOoD,mBAAmB,SAAU9J,GAAc,IAAIma,GAAana,IAAY2G,EACzF,CCFA,SAAS4T,GAAaha,EAAUzB,EAAO0b,EAAUtN,GAC7C,OAAQ3M,EAASN,QAAQZ,QAAQoN,UAAUnN,SACvC,IAAK,MACGR,GAASoO,GACT3M,EAASjB,UAEb,MACJ,IAAK,MACGR,GAAS0b,GACTja,EAASjB,UAEb,MAEZ,CACO,SAASmb,GAAcla,EAAUoO,GACpC,MAAMnQ,EAAO+B,EAASlB,QACtB,GAAIkB,EAASE,YAAcjC,GAAM2O,SAAY3O,EAAKkb,UAAY,GAAK,IAAMlb,EAAKmb,OAAS,IAAMnb,EAAKkb,UAAY,GAC1G,OAEJ,MAAMc,EAAWhc,EAAK+C,IAAK2L,EAAW1O,EAAK4I,IAAKsP,EAAQlY,EAAKkY,OAAS,EAOtE,GANKlY,EAAKob,OACNpb,EAAKob,KAAO,IAEXpb,EAAKqb,WAAa,GAAK,GAAKrb,EAAKob,MAAQpb,EAAKqb,WAAa,KAC5Drb,EAAKob,MAAQjL,EAAM7P,UAElBN,EAAKqb,WAAa,GAAK,GAAKrb,EAAKob,MAAQpb,EAAKqb,WAAa,IAAhE,CAGA,OAAQrb,EAAKsb,QACT,IAAK,aACGtb,EAAKM,OAASoO,GACd1O,EAAKsb,OAAS,aACTtb,EAAKmb,QACNnb,EAAKmb,MAAQ,GAEjBnb,EAAKmb,SAGLnb,EAAKM,QAAUN,EAAKsC,UAAY,GAAK6N,EAAMpH,OAE/C,MACJ,IAAK,aACG/I,EAAKM,OAAS0b,GACdhc,EAAKsb,OAAS,aACTtb,EAAKmb,QACNnb,EAAKmb,MAAQ,GAEjBnb,EAAKmb,SAGLnb,EAAKM,QAAUN,EAAKsC,UAAY,GAAK6N,EAAMpH,OAE/C,MAEJ/I,EAAKsC,UAA2B,IAAftC,EAAKkY,QACtBlY,EAAKsC,UAAY4V,GAErB6D,GAAaha,EAAU/B,EAAKM,MAAO0b,EAAUtN,GACxC3M,EAASE,YACVjC,EAAKM,OAAQ,QAAMN,EAAKM,MAAO0b,EAAUtN,GAhC7C,CAkCJ,CC7DO,MAAMwN,GACT,WAAAvc,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAMoa,EAAiBpa,EAASN,QAAQZ,QACxCkB,EAASlB,SAAU,QAAkCsb,EAAgB,GACrE,MAAMC,EAAmBD,EAAelO,UACpCmO,EAAiBzN,SACjB5M,EAASlB,QAAQyB,UACZ,QAAc8Z,EAAiBtN,OAAS,IAAOlP,KAAK4B,UAAUkC,OAAOG,aACrEuY,EAAiBC,OAClBta,EAASlB,QAAQyB,WAAY,WAGzC,CACA,SAAA0I,CAAUjJ,GACN,OAASA,EAASE,YACbF,EAAS+S,YACR/S,EAASlB,SACXkB,EAASlB,QAAQ8N,UACf5M,EAASlB,QAAQqa,UAAY,IAAM,IAC/BnZ,EAASlB,QAAQqa,UAAY,GAAK,IAC/BnZ,EAASlB,QAAQsa,OAAS,IAAMpZ,EAASlB,QAAQqa,UAAY,GAC9E,CACA,KAAAzH,CAAM1R,GACEA,EAASlB,UACTkB,EAASlB,QAAQua,KAAO,EACxBrZ,EAASlB,QAAQsa,MAAQ,EAEjC,CACA,MAAA/P,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,IAGpBka,GAAcla,EAAUoO,EAC5B,ECrCGnI,eAAesU,GAAmBpU,EAAQC,GAAU,SACjDD,EAAOoD,mBAAmB,WAAY9J,GAAc,IAAI0a,GAAe1a,IAAY2G,EAC7F,CCFO,SAASoU,GAAiBvc,GAC7B,GAAsB,WAAjBA,EAAKwc,SACW,sBAAjBxc,EAAKwc,SACY,qBAAjBxc,EAAKwc,SACY,UAAjBxc,EAAKwc,SACe,SAAnBxc,EAAK+M,WAA2C,UAAnB/M,EAAK+M,UACnC,OAEA/M,EAAKwJ,OAAOhB,MAAQ,GAAwB,SAAnBxI,EAAK+M,UAC9B/M,EAAK+B,SAASZ,SAASC,EAAIpB,EAAKgB,KAAOhB,EAAKoK,OAAOhJ,EAE9CpB,EAAKwJ,OAAOjB,KAAOvI,EAAKkC,WAAWc,OAA4B,UAAnBhD,EAAK+M,YACtD/M,EAAK+B,SAASZ,SAASC,EAAIpB,EAAKkC,WAAWc,MAAQhD,EAAKgB,KAAOhB,EAAKoK,OAAOhJ,GAE/E,MAAMkB,EAAWtC,EAAK+B,SAASO,SAASlB,EACxC,IAAIqb,GAAU,EACd,GAAwB,UAAnBzc,EAAK+M,WAAyB/M,EAAKwJ,OAAOhB,OAASxI,EAAKkC,WAAWc,OAASV,EAAW,GACpE,SAAnBtC,EAAK+M,WAAwB/M,EAAKwJ,OAAOjB,MAAQ,GAAKjG,EAAW,EAAI,CACtE,MAAMoa,GAAc,QAAS1c,EAAK+B,SAASN,QAAQkb,OAAO5I,YAC1D/T,EAAK+B,SAASO,SAASlB,IAAMsb,EAC7BD,GAAU,CACd,CACA,IAAKA,EACD,OAEJ,MAAMG,EAAS5c,EAAKoK,OAAOhJ,EAAIpB,EAAKgB,KAChChB,EAAKwJ,OAAOhB,OAASxI,EAAKkC,WAAWc,OAA4B,UAAnBhD,EAAK+M,UACnD/M,EAAK+B,SAASZ,SAASC,EAAIpB,EAAKkC,WAAWc,MAAQ4Z,EAE9C5c,EAAKwJ,OAAOjB,MAAQ,GAAwB,SAAnBvI,EAAK+M,YACnC/M,EAAK+B,SAASZ,SAASC,EAAIwb,GAEV,UAAjB5c,EAAKwc,SACLxc,EAAK+B,SAASjB,SAEtB,CACO,SAAS+b,GAAe7c,GAC3B,GAAsB,WAAjBA,EAAKwc,SACW,oBAAjBxc,EAAKwc,SACY,mBAAjBxc,EAAKwc,SACY,UAAjBxc,EAAKwc,SACe,WAAnBxc,EAAK+M,WAA6C,QAAnB/M,EAAK+M,UACrC,OAEA/M,EAAKwJ,OAAOlB,OAAS,GAAwB,QAAnBtI,EAAK+M,UAC/B/M,EAAK+B,SAASZ,SAASE,EAAIrB,EAAKgB,KAAOhB,EAAKoK,OAAO/I,EAE9CrB,EAAKwJ,OAAOf,IAAMzI,EAAKkC,WAAWe,QAA6B,WAAnBjD,EAAK+M,YACtD/M,EAAK+B,SAASZ,SAASE,EAAIrB,EAAKkC,WAAWe,OAASjD,EAAKgB,KAAOhB,EAAKoK,OAAO/I,GAEhF,MAAMiB,EAAWtC,EAAK+B,SAASO,SAASjB,EACxC,IAAIob,GAAU,EACd,GAAwB,WAAnBzc,EAAK+M,WAA0B/M,EAAKwJ,OAAOlB,QAAUtI,EAAKkC,WAAWe,QAAUX,EAAW,GACvE,QAAnBtC,EAAK+M,WAAuB/M,EAAKwJ,OAAOf,KAAO,GAAKnG,EAAW,EAAI,CACpE,MAAMoa,GAAc,QAAS1c,EAAK+B,SAASN,QAAQkb,OAAO3I,UAC1DhU,EAAK+B,SAASO,SAASjB,IAAMqb,EAC7BD,GAAU,CACd,CACA,IAAKA,EACD,OAEJ,MAAMG,EAAS5c,EAAKoK,OAAO/I,EAAIrB,EAAKgB,KAChChB,EAAKwJ,OAAOlB,QAAUtI,EAAKkC,WAAWe,QAA6B,WAAnBjD,EAAK+M,UACrD/M,EAAK+B,SAASZ,SAASE,EAAIrB,EAAKkC,WAAWe,OAAS2Z,EAE/C5c,EAAKwJ,OAAOf,KAAO,GAAwB,QAAnBzI,EAAK+M,YAClC/M,EAAK+B,SAASZ,SAASE,EAAIub,GAEV,UAAjB5c,EAAKwc,SACLxc,EAAK+B,SAASjB,SAEtB,CCtEO,MAAMgc,GACT,WAAAnd,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAKoH,MAAQ,CACT,SACA,kBACA,oBACA,iBACA,mBACA,QAER,CACA,MAAAoE,CAAOrJ,EAAUgL,EAAWoD,EAAOqM,GAC/B,IAAK5c,KAAKoH,MAAMgK,SAASwL,GACrB,OAEJ,MAAMhb,EAAY5B,KAAK4B,UACvB,IAAIub,GAAU,EACd,IAAK,MAAO,CAAExK,KAAW/Q,EAAUwb,QAI/B,QAH8B/c,IAA1BsS,EAAO0K,iBACPF,EAAUxK,EAAO0K,eAAelb,EAAUoO,EAAOpD,IAEjDgQ,EACA,MAGR,GAAIA,EACA,OAEJ,MAAMnY,EAAM7C,EAASW,cAAe0H,EAASrI,EAASqI,OAAQpJ,EAAOe,EAASkD,YAAauE,GAAS,QAAgB5E,EAAK5D,GAAOkB,EAAaV,EAAUI,OAAOZ,KAC9Jub,GAAiB,CAAExa,WAAUya,UAASzP,YAAWvD,SAAQtH,aAAYkI,SAAQpJ,SAC7E6b,GAAe,CAAE9a,WAAUya,UAASzP,YAAWvD,SAAQtH,aAAYkI,SAAQpJ,QAC/E,ECjCG,MAAMkc,GACT,WAAAvd,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAKoH,MAAQ,CAAC,UAClB,CACA,MAAAoE,CAAOrJ,EAAUgL,EAAWoQ,EAAQX,GAChC,IAAK5c,KAAKoH,MAAMgK,SAASwL,GACrB,OAEJ,MAAMhb,EAAY5B,KAAK4B,UACvB,OAAQO,EAASqb,SACb,IAAK,SACL,IAAK,UACD,IAAI,QAAcrb,EAASZ,SAAUK,EAAUI,OAAOZ,KAAMa,EAAA,EAAOyB,OAAQvB,EAASkD,YAAa8H,GAC7F,OAEJ,MACJ,IAAK,SAAU,CACX,MAAM,GAAElI,EAAE,GAAEC,IAAO,QAAa/C,EAASZ,SAAUY,EAASsb,aACpDjc,EAAGkc,EAAIjc,EAAGkc,GAAOxb,EAASO,SAClC,GAAKgb,EAAK,GAAKzY,EAAK9C,EAASsb,WAAWxd,QACnC0d,EAAK,GAAKzY,EAAK/C,EAASsb,WAAWxd,QACnCyd,GAAM,GAAKzY,GAAM9C,EAASsb,WAAWxd,QACrC0d,GAAM,GAAKzY,GAAM/C,EAASsb,WAAWxd,OACtC,OAEJ,KACJ,EAEJ2B,EAAU0H,UAAUsU,OAAOzb,OAAU9B,GAAW,EACpD,EC9BG,MAAMwd,GACT,WAAA9d,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAKoH,MAAQ,CAAC,OAClB,CACA,MAAAoE,CAAOrJ,EAAUgL,EAAWoD,EAAOqM,GAC/B,IAAK5c,KAAKoH,MAAMgK,SAASwL,GACrB,OAEJ,GAAKza,EAASN,QAAQyI,KAAKnF,SAASgP,aACjB,SAAdhH,GAAsC,UAAdA,IACxBhL,EAASN,QAAQyI,KAAKnF,SAASiP,WACb,QAAdjH,GAAqC,WAAdA,GAC5B,OAEJ,MAAM8K,EAAiB9V,EAASN,QAAQyI,KAAK4N,QAAStW,EAAY5B,KAAK4B,UACjEU,EAAaV,EAAUI,OAAOZ,KAC9B0c,EAAU3b,EAASkD,YACzB,GAAK4S,EAAelJ,OAWf,CACD,MAAMxN,EAAWY,EAASZ,WACpB0W,EAAeG,SACjB7W,EAASE,EAAIa,EAAWe,OAASya,GACnB,WAAd3Q,GACC8K,EAAeG,SAAW7W,EAASE,GAAKqc,GAAyB,QAAd3Q,IACpDvL,EAAU0H,UAAUsU,OAAOzb,EAEnC,KAnB4B,CACxB,GAAKA,EAASO,SAASjB,EAAI,GAAKU,EAASZ,SAASE,GAAKa,EAAWe,OAASya,GACtE3b,EAASO,SAASjB,EAAI,GAAKU,EAASZ,SAASE,IAAMqc,GACnD3b,EAASO,SAASlB,EAAI,GAAKW,EAASZ,SAASC,GAAKc,EAAWc,MAAQ0a,GACrE3b,EAASO,SAASlB,EAAI,GAAKW,EAASZ,SAASC,IAAMsc,EACpD,QAEC,QAAc3b,EAASZ,SAAUK,EAAUI,OAAOZ,KAAMa,EAAA,EAAOyB,OAAQoa,EAAS3Q,IACjFvL,EAAU0H,UAAUsU,OAAOzb,EAEnC,CAUJ,ECtCG,MAAM4b,GACT,WAAAhe,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAKoH,MAAQ,CAAC,MAClB,CACA,MAAAoE,CAAOrJ,EAAUgL,EAAWoD,EAAOqM,GAC/B,IAAK5c,KAAKoH,MAAMgK,SAASwL,GACrB,OAEJ,MAAMhb,EAAY5B,KAAK4B,UACvB,OAAQO,EAASqb,SACb,IAAK,SAAU,CACX,MAAQhc,EAAGkc,EAAIjc,EAAGkc,GAAOxb,EAASO,SAC5Bsb,EAAU/b,EAAA,EAAOyB,OACvBsa,EAAQnb,OAASV,EAASsb,WAAWxd,OACrC+d,EAAQjb,MAAQZ,EAASO,SAASK,MAAQC,KAAKC,GAC/C+a,EAAQ7Z,MAAMlC,EAAA,EAAOZ,OAAOc,EAASsb,aACrC,MAAM,GAAExY,EAAE,GAAEC,IAAO,QAAa/C,EAASZ,SAAUyc,GACnD,GAAKN,GAAM,GAAKzY,GAAM,GAAO0Y,GAAM,GAAKzY,GAAM,GAAOwY,GAAM,GAAKzY,GAAM,GAAO0Y,GAAM,GAAKzY,GAAM,EAC1F,OAEJ/C,EAASZ,SAASC,EAAIwB,KAAKqP,OAAM,QAAc,CAC3ClP,IAAK,EACL6F,IAAKpH,EAAUI,OAAOZ,KAAKgC,SAE/BjB,EAASZ,SAASE,EAAIuB,KAAKqP,OAAM,QAAc,CAC3ClP,IAAK,EACL6F,IAAKpH,EAAUI,OAAOZ,KAAKiC,UAE/B,MAAQ4B,GAAIgZ,EAAO/Y,GAAIgZ,IAAU,QAAa/b,EAASZ,SAAUY,EAASsb,YAC1Etb,EAASgL,UAAYnK,KAAKmb,OAAOD,GAAQD,GACzC9b,EAASO,SAASK,MAAQZ,EAASgL,UACnC,KACJ,CACA,QACI,IAAI,QAAchL,EAASZ,SAAUK,EAAUI,OAAOZ,KAAMa,EAAA,EAAOyB,OAAQvB,EAASkD,YAAa8H,GAC7F,OAEJ,OAAQhL,EAASqb,SACb,IAAK,UAAW,CACZrb,EAASZ,SAASC,EACdwB,KAAKqP,OAAM,QAAc,CACrBlP,KAAMhB,EAASsb,WAAWxd,OAC1B+I,IAAK7G,EAASsb,WAAWxd,UACvBkC,EAASsb,WAAWjc,EAC9BW,EAASZ,SAASE,EACduB,KAAKqP,OAAM,QAAc,CACrBlP,KAAMhB,EAASsb,WAAWxd,OAC1B+I,IAAK7G,EAASsb,WAAWxd,UACvBkC,EAASsb,WAAWhc,EAC9B,MAAM,GAAEwD,EAAE,GAAEC,IAAO,QAAa/C,EAASZ,SAAUY,EAASsb,YACxDtb,EAASsb,WAAWxd,SACpBkC,EAASgL,UAAYnK,KAAKmb,MAAMjZ,EAAID,GACpC9C,EAASO,SAASK,MAAQZ,EAASgL,WAEvC,KACJ,CACA,IAAK,SAAU,CACX,MAAMiR,EAAOjc,EAASN,QAAQyI,KAAK+T,KAAM/b,EAAaV,EAAUI,OAAOZ,KAAMkd,EAAS,CAClF5V,OAAQpG,EAAWe,OAASlB,EAASkD,YAAclD,EAASqI,OAAO/I,EACnEkH,MAAOxG,EAASkD,YAAclD,EAASqI,OAAOhJ,EAC9CoH,MAAOtG,EAAWc,MAAQjB,EAASkD,YAAclD,EAASqI,OAAOhJ,EACjEqH,KAAM1G,EAASkD,YAAclD,EAASqI,OAAO/I,GAC9C8c,EAAYpc,EAASkD,YAAamZ,GAAa,QAAgBrc,EAASZ,SAAUgd,GACnE,UAAdpR,GACAqR,EAAW7V,KAAOrG,EAAWc,MAAQjB,EAASqI,OAAOhJ,GACrDW,EAASZ,SAASC,EAAI8c,EAAO3V,KAC7BxG,EAASiC,gBAAgB5C,EAAIW,EAASZ,SAASC,EAC1C4c,IACDjc,EAASZ,SAASE,GAAI,UAAca,EAAWe,OAC/ClB,EAASiC,gBAAgB3C,EAAIU,EAASZ,SAASE,IAGhC,SAAd0L,GAAwBqR,EAAW5V,OAASzG,EAASqI,OAAOhJ,IACjEW,EAASZ,SAASC,EAAI8c,EAAO1V,MAC7BzG,EAASiC,gBAAgB5C,EAAIW,EAASZ,SAASC,EAC1C4c,IACDjc,EAASZ,SAASE,GAAI,UAAca,EAAWe,OAC/ClB,EAASiC,gBAAgB3C,EAAIU,EAASZ,SAASE,IAGrC,WAAd0L,GACAqR,EAAW3V,IAAMvG,EAAWe,OAASlB,EAASqI,OAAO/I,GAChD2c,IACDjc,EAASZ,SAASC,GAAI,UAAcc,EAAWc,MAC/CjB,EAASiC,gBAAgB5C,EAAIW,EAASZ,SAASC,GAEnDW,EAASZ,SAASE,EAAI6c,EAAOzV,IAC7B1G,EAASiC,gBAAgB3C,EAAIU,EAASZ,SAASE,GAE5B,QAAd0L,GAAuBqR,EAAW9V,QAAUvG,EAASqI,OAAO/I,IAC5D2c,IACDjc,EAASZ,SAASC,GAAI,UAAcc,EAAWc,MAC/CjB,EAASiC,gBAAgB5C,EAAIW,EAASZ,SAASC,GAEnDW,EAASZ,SAASE,EAAI6c,EAAO5V,OAC7BvG,EAASiC,gBAAgB3C,EAAIU,EAASZ,SAASE,GAEnD,KACJ,EAEJ,MAGZ,ECrGG,MAAMgd,GACT,WAAA1e,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAK0e,eAAiB,CAACvc,EAAUoO,EAAOqM,EAASzP,KAC7C,IAAK,MAAMwR,KAAW3e,KAAK4e,SACvBD,EAAQnT,OAAOrJ,EAAUgL,EAAWoD,EAAOqM,EAC/C,EAEJ5c,KAAK4e,SAAW,CACZ,IAAI1B,GAActb,GAClB,IAAI0b,GAAe1b,GACnB,IAAImc,GAAWnc,GACf,IAAIic,GAAYjc,GAExB,CACA,IAAAsF,GACA,CACA,SAAAkE,CAAUjJ,GACN,OAAQA,EAASE,YAAcF,EAAS+S,QAC5C,CACA,MAAA1J,CAAOrJ,EAAUoO,GACb,MAAMsO,EAAW1c,EAASN,QAAQyI,KAAKuU,SACvC7e,KAAK0e,eAAevc,EAAUoO,EAAOsO,EAASnW,QAAUmW,EAASC,QAAS,UAC1E9e,KAAK0e,eAAevc,EAAUoO,EAAOsO,EAASlW,MAAQkW,EAASC,QAAS,QACxE9e,KAAK0e,eAAevc,EAAUoO,EAAOsO,EAASjW,OAASiW,EAASC,QAAS,SACzE9e,KAAK0e,eAAevc,EAAUoO,EAAOsO,EAAShW,KAAOgW,EAASC,QAAS,MAC3E,EC7BG1W,eAAe2W,GAAoBzW,EAAQC,GAAU,SAClDD,EAAOoD,mBAAmB,YAAa9J,GAAc,IAAI6c,GAAmB7c,IAAY2G,EAClG,CCFA,SAAS,GAAapG,EAAUzB,EAAO0b,EAAUtN,GAC7C,OAAQ3M,EAASN,QAAQT,KAAKiN,UAAUnN,SACpC,IAAK,MACGR,GAASoO,GACT3M,EAASjB,UAEb,MACJ,IAAK,MACGR,GAAS0b,GACTja,EAASjB,UAEb,MAEZ,CACO,SAAS8d,GAAW7c,EAAUoO,GACjC,MAAMnQ,EAAO+B,EAASf,KACtB,GAAIe,EAASE,YACRjC,IACAA,EAAK2O,SACJ3O,EAAKkb,UAAY,GAAK,IAAMlb,EAAKmb,OAAS,IAAMnb,EAAKkb,UAAY,GACnE,OAEJ,MAAM2D,GAAgB7e,EAAKsC,UAAY,GAAK6N,EAAMpH,OAAQiT,EAAWhc,EAAK+C,IAAK2L,EAAW1O,EAAK4I,IAAKsP,EAAQlY,EAAKkY,OAAS,EAO1H,GANKlY,EAAKob,OACNpb,EAAKob,KAAO,IAEXpb,EAAKqb,WAAa,GAAK,GAAKrb,EAAKob,MAAQpb,EAAKqb,WAAa,KAC5Drb,EAAKob,MAAQjL,EAAM7P,UAElBN,EAAKqb,WAAa,GAAK,GAAKrb,EAAKob,MAAQpb,EAAKqb,WAAa,IAAhE,CAGA,OAAQrb,EAAKsb,QACT,IAAK,aACGtb,EAAKM,OAASoO,GACd1O,EAAKsb,OAAS,aACTtb,EAAKmb,QACNnb,EAAKmb,MAAQ,GAEjBnb,EAAKmb,SAGLnb,EAAKM,OAASue,EAElB,MACJ,IAAK,aACG7e,EAAKM,OAAS0b,GACdhc,EAAKsb,OAAS,aACTtb,EAAKmb,QACNnb,EAAKmb,MAAQ,GAEjBnb,EAAKmb,SAGLnb,EAAKM,OAASue,EAGtB7e,EAAKsC,UAAsB,IAAV4V,IACjBlY,EAAKsC,UAAY4V,GAErB,GAAanW,EAAU/B,EAAKM,MAAO0b,EAAUtN,GACxC3M,EAASE,YACVjC,EAAKM,OAAQ,QAAMN,EAAKM,MAAO0b,EAAUtN,GA/B7C,CAiCJ,CC/DO,MAAMoQ,GACT,IAAAhY,CAAK/E,GACD,MAAMP,EAAYO,EAASP,UAAWud,EAAchd,EAASN,QAAQT,KAAMge,EAAgBD,EAAY9Q,UACnG+Q,EAAcrQ,SACd5M,EAASf,KAAKsB,UACRP,EAAS2B,OAAOub,oBAAsBzd,EAAUkC,OAAOub,oBAAsB,IAC3Ezd,EAAUkC,OAAOG,aACpBmb,EAAc3C,OACfta,EAASf,KAAKsB,WAAY,WAGtC,CACA,SAAA0I,CAAUjJ,GACN,OAASA,EAASE,YACbF,EAAS+S,UACV/S,EAASf,KAAK2N,UACZ5M,EAASf,KAAKka,UAAY,IAAM,IAC5BnZ,EAASf,KAAKka,UAAY,GAAK,IAAMnZ,EAASf,KAAKma,OAAS,IAAMpZ,EAASf,KAAKka,UAAY,GAC1G,CACA,KAAAzH,CAAM1R,GACFA,EAASf,KAAKma,MAAQ,CAC1B,CACA,MAAA/P,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,IAGpB6c,GAAW7c,EAAUoO,EACzB,EC5BGnI,eAAekX,GAAgBhX,EAAQC,GAAU,SAC9CD,EAAOoD,mBAAmB,QAAQ,IAAM,IAAIwT,IAAe3W,EACrE,CCGOH,eAAemX,GAAUjX,EAAQC,GAAU,SACxCmS,GAAcpS,GAAQ,SACtB2S,GAAgB3S,GAAQ,SACxB4T,GAAiB5T,GAAQ,SACzBoU,GAAmBpU,GAAQ,SAC3ByW,GAAoBzW,GAAQ,SAC5BgX,GAAgBhX,GAAQ,SACxBA,EAAOC,QAAQA,EACzB,CCbOH,eAAeoX,MAClB,QAAU,gBAAiB9e,GAAUA,GAAS,KAC9C,QAAU,iBAAkBA,GAAU,GAAK,EAAIA,IAAU,KACzD,QAAU,oBAAqBA,GAAWA,EAAQ,GAAM,EAAIA,GAAS,EAAI,IAAM,EAAIA,EAAQ,IAAM,EAAI,GACzG,C,0BCLO,MAAM+e,GACT,WAAA1f,GACIC,KAAKmF,SAAW,IAChBnF,KAAK0M,SAAW,GAChB1M,KAAK0f,OAAS,gBACd1f,KAAKmJ,OAAS,EACdnJ,KAAK8X,SAAW,GAChB9X,KAAKkP,MAAQ,CACjB,CACA,IAAA/O,CAAKC,GACIA,SAGiBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,eAEH9E,IAAlBD,EAAKsM,WACL1M,KAAK0M,SAAWtM,EAAKsM,eAELrM,IAAhBD,EAAKsf,SACL1f,KAAK0f,OAAStf,EAAKsf,aAEHrf,IAAhBD,EAAK+I,SACLnJ,KAAKmJ,OAAS/I,EAAK+I,aAED9I,IAAlBD,EAAK0X,WACL9X,KAAK8X,SAAW1X,EAAK0X,eAENzX,IAAfD,EAAK8O,QACLlP,KAAKkP,MAAQ9O,EAAK8O,OAE1B,EC7BG,MAAMyQ,WAAkB/M,EAC3B,WAAA7S,CAAYuI,EAAQ1G,GAChBpB,MAAMoB,GACN5B,KAAK4f,cAAgB,KACjB,MAAMhe,EAAY5B,KAAK4B,UAClBA,EAAU8C,UACX9C,EAAU8C,QAAU,CAAE4E,UAAW,KAErC,MAAM,QAAE5E,GAAY9C,EAUpB,GATK8C,EAAQmb,SACJnb,EAAQwE,QACTxE,EAAQwE,MAAQ,GAEpBxE,EAAQwE,QACJxE,EAAQwE,QAAUtH,EAAU0H,UAAUJ,QACtCxE,EAAQmb,QAAS,IAGrBnb,EAAQG,SAAU,CAClB,MAAM4O,EAAW7R,EAAUgD,cAAcD,MAAMsC,cAAe6Y,EAAgBle,EAAUkC,OAAOic,oBAC/F,IAAKD,GAAiBA,EAAgB,IAAMrM,EACxC,OAEJzT,KAAKggB,gBAAgBvM,EAAUqM,EAAe,IAAIG,GAAAC,EAAOzM,EAASjS,EAAGiS,EAAShS,EAAGqe,GACrF,MAC8B,IAArBpb,EAAQG,WACbH,EAAQ4E,UAAY,GAElB,EAEVtJ,KAAKmgB,cAAgB,KACjB,MAAMve,EAAY5B,KAAK4B,UAAW6R,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAAUue,EAAgBle,EAAUkC,OAAOic,qBACjHD,GAAiBA,EAAgB,IAAMrM,GAG5CzT,KAAKggB,gBAAgBvM,EAAUqM,EAAe,IAAIG,GAAAC,EAAOzM,EAASjS,EAAGiS,EAAShS,EAAGqe,GAAe,EAEpG9f,KAAKggB,gBAAkB,CAACze,EAAUue,EAAeM,KAC7C,MAAMxe,EAAY5B,KAAK4B,UAAWye,EAAiBze,EAAUuF,cAAcvC,cAAcwC,MAAM1C,QAC/F,IAAK2b,EACD,OAEJ,MAAMC,EAAQ1e,EAAU0H,UAAUiX,SAASD,MAAMF,GAAOI,GAAMxgB,KAAKoL,UAAUoV,KAC7E,IAAK,MAAMre,KAAYme,EAAO,CAC1B,MAAM,GAAErb,EAAE,GAAEC,EAAE,SAAEC,IAAa,QAAahD,EAASZ,SAAUA,GACvDmB,EAAW2d,EAAenR,MAAQmR,EAAelX,OACjDsX,GAAgB,SAAM,QAAUJ,EAAeX,OAAzB,CAAiC,EAAIva,EAAW2a,GAAiBpd,EAAU,EAAG2d,EAAevI,UACnH4I,EAAUze,EAAA,EAAOZ,OAAoB,IAAb8D,EAAiBzC,EAAYuC,EAAKE,EAAYsb,EAA4B,IAAbtb,EAAiBzC,EAAYwC,EAAKC,EAAYsb,GACzIte,EAASZ,SAASof,QAAQD,EAC9B,GAEJ1gB,KAAK2N,QAAUrF,EACV1G,EAAU8C,UACX9C,EAAU8C,QAAU,CAAE4E,UAAW,KAErCtJ,KAAK0G,gBAAmBC,IACpB,MAAM9E,EAAU7B,KAAK4B,UAAUuF,cAAezC,EAAU7C,EAAQ+C,cAAcwC,MAAM1C,QACpF,GAAKA,GAAoB,YAATiC,EAAhB,CAGK/E,EAAU8C,UACX9C,EAAU8C,QAAU,CAAE4E,UAAW,KAErC1H,EAAU8C,QAAQG,UAAW,EAC7BjD,EAAU8C,QAAQwE,MAAQ,EAC1B,IAAK,MAAM/G,KAAYP,EAAU8C,QAAQ4E,UAChCtJ,KAAKoL,UAAUjJ,IAGpBA,EAASO,SAASD,MAAMN,EAASQ,iBAErCf,EAAU8C,QAAQ4E,UAAY,GAC9B1H,EAAU8C,QAAQmb,QAAS,EAC3BhV,YAAW,KACHjJ,EAAUS,YAGTT,EAAU8C,UACX9C,EAAU8C,QAAU,CAAE4E,UAAW,KAErC1H,EAAU8C,QAAQG,UAAW,EAAK,GAChB,IAAnBH,EAAQgI,SAtBX,CAsB2B,CAEnC,CACA,KAAAwG,GACA,CACA,IAAAhM,GACI,MAAMtF,EAAY5B,KAAK4B,UAAW8C,EAAU9C,EAAUuF,cAAcvC,cAAcwC,MAAM1C,QACnFA,IAGL9C,EAAUkC,OAAOic,oBAAsBrb,EAAQS,SAAWvD,EAAUkC,OAAOE,WAC/E,CACA,cAAMmP,GACF,MAAMvR,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAeyZ,EAAkBhf,EAAUgD,cAAc8W,SAAW,MAAgBxT,EAASrG,EAAQ+C,cAAcsD,OAAQ2Y,EAAe3Y,EAAOyL,QAAQ5E,OAAQ+R,EAAY5Y,EAAOyL,QAAQhN,KAAMoa,EAAe7Y,EAAOC,QAAQ4G,OAAQiS,EAAY9Y,EAAOC,QAAQxB,KACrTia,GAAmBC,IAAgB,QAAU,UAAWC,GACxD9gB,KAAKmgB,gBAEAY,IAAgB,QAAU,UAAWC,IAC1ChhB,KAAK4f,eAEb,CACA,SAAAxU,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAexC,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiB/C,EAAQ+C,eAAesD,OACxK,KAAMvD,EAAMpD,WAAa2G,EAAOyL,QAAQ5E,WAAapK,EAAMsC,gBAAkBiB,EAAOC,QAAQ4G,QACxF,OAAO,EAEX,MAAM+R,EAAY5Y,EAAOyL,QAAQhN,KAAMqa,EAAY9Y,EAAOC,QAAQxB,KAClE,OAAO,QAAU,UAAWma,KAAc,QAAU,UAAWE,EACnE,CACA,eAAApN,CAAgB/R,KAAYwJ,GACnBxJ,EAAQ6C,UACT7C,EAAQ6C,QAAU,IAAI+a,IAE1B,IAAK,MAAM1X,KAAUsD,EACjBxJ,EAAQ6C,QAAQvE,KAAK4H,GAAQrD,QAErC,CACA,KAAAmP,GACA,ECxHGzL,eAAe6Y,GAA+B3Y,EAAQC,GAAU,SAC7DD,EAAOyL,cAAc,mBAAoBnS,GAAc,IAAI+d,GAAUrX,EAAQ1G,IAAY2G,EACnG,C,eCHO,MAAM2Y,GACT,WAAAnhB,GACIC,KAAKmF,SAAW,GACpB,CACA,IAAAhF,CAAKC,GACIA,QAGiBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,SAE7B,ECTG,MAAMgc,WAAgBvO,EACzB,WAAA7S,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAKohB,eAAiB,CAAC7f,EAAUtB,EAAQmgB,KACrC,MAAME,EAAQtgB,KAAK4B,UAAU0H,UAAUiX,SAASD,MAAMF,GAAOI,GAAMxgB,KAAKoL,UAAUoV,KAClF,IAAK,MAAMre,KAAYme,EACfF,aAAgBH,GAAAC,GAChB,SAAa,QAA6B/d,GAAW,CACjDZ,WACAtB,SACAC,KAAOD,GAAU,EAAI+C,KAAKC,GAAM,EAChCP,SAAUT,EAAA,EAAOyB,OACjByF,OAAQlH,EAAA,EAAOyB,SAGd0c,aAAgBiB,GAAA,IACrB,QAAWlf,GAAU,QAAgBZ,EAAUtB,GAEvD,EAEJD,KAAKshB,oBAAsB,KACvB,MAAM1f,EAAY5B,KAAK4B,UAAWyY,EAAUzY,EAAUkC,OAAOE,WAAYud,EAAY,GAAKlH,EAAS5G,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAAUtB,EAAS2B,EAAUkC,OAAO0d,oBAC3KvhB,GAAUA,EAAS,IAAMwT,GAG9BzT,KAAKohB,eAAe3N,EAAUxT,EAAQ,IAAIggB,GAAAC,EAAOzM,EAASjS,EAAGiS,EAAShS,EAAGxB,EAASshB,GAAW,EAEjGvhB,KAAKyhB,sBAAwB,CAACpM,EAAUqM,KACpC,MAAM9f,EAAY5B,KAAK4B,UAAW0e,EAAQpQ,SAASyR,iBAAiBtM,GAC/DiL,EAAMzd,QAGXyd,EAAMsB,SAASC,IACX,MAAMC,EAAOD,EAAMxH,EAAUzY,EAAUkC,OAAOE,WAAYgB,EAAM,CAC5DxD,GAAIsgB,EAAKC,WAAaD,EAAKE,YAAc,GAAK3H,EAC9C5Y,GAAIqgB,EAAKG,UAAYH,EAAKI,aAAe,GAAK7H,GAC/Cpa,EAAU6hB,EAAKE,YAAc,EAAK3H,EAASkH,EAAY,GAAKlH,EAAS+F,EAAoB,WAAbsB,EAAI7O,KAC7E,IAAIoN,GAAAC,EAAOlb,EAAIxD,EAAGwD,EAAIvD,EAAGxB,EAASshB,GAClC,IAAIF,GAAA,EAAUS,EAAKC,WAAa1H,EAAUkH,EAAWO,EAAKG,UAAY5H,EAAUkH,EAAWO,EAAKE,YAAc3H,EAAsB,EAAZkH,EAAeO,EAAKI,aAAe7H,EAAsB,EAAZkH,GAC3KvhB,KAAKohB,eAAepc,EAAK/E,EAAQmgB,EAAK,GACxC,CAEV,CACA,KAAAlN,GACA,CACA,IAAAhM,GACI,MAAMtF,EAAY5B,KAAK4B,UAAWmb,EAASnb,EAAUuF,cAAcvC,cAAcwC,MAAM2V,OAClFA,IAGLnb,EAAUkC,OAAO0d,mBAAqBzE,EAAO5X,SAAWvD,EAAUkC,OAAOE,WAC7E,CACA,cAAMmP,GACF,MAAMvR,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAee,EAASrG,EAAQ+C,cAAcsD,OAAQ0Y,EAAkBhf,EAAUgD,cAAc8W,SAAW,MAAgBmF,EAAe3Y,EAAOyL,QAAQ5E,OAAQ+R,EAAY5Y,EAAOyL,QAAQhN,KAAMwb,EAAOja,EAAOka,MAClQxB,GAAmBC,IAAgB,QAAU,SAAUC,GACvD9gB,KAAKshB,uBAGL,QAAe,SAAUa,GAAM,CAAC9M,EAAUqM,IAAQ1hB,KAAKyhB,sBAAsBpM,EAAUqM,IAE/F,CACA,SAAAtW,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAexC,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiB/C,EAAQ+C,eAAesD,OAAQia,EAAOja,EAAOka,MAC9L,OAASzd,EAAMpD,UAAY2G,EAAOyL,QAAQ5E,SAAU,QAAU,SAAU7G,EAAOyL,QAAQhN,QACnF,QAAiB,SAAUwb,EACnC,CACA,eAAAvO,CAAgB/R,KAAYwJ,GACnBxJ,EAAQkb,SACTlb,EAAQkb,OAAS,IAAImE,IAEzB,IAAK,MAAMnZ,KAAUsD,EACjBxJ,EAAQkb,OAAO5c,KAAK4H,GAAQgV,OAEpC,CACA,KAAAlJ,GACA,EC5EGzL,eAAeia,GAA8B/Z,EAAQC,GAAU,SAC5DD,EAAOyL,cAAc,kBAAmBnS,GAAc,IAAIuf,GAAQvf,IAAY2G,EACxF,CCFO,MAAM+Z,GACT,WAAAviB,GACIC,KAAKmF,SAAW,IAChBnF,KAAK0M,SAAW,GAChB1M,KAAKuiB,KAAM,CACf,CACA,IAAApiB,CAAKC,GACD,GAAKA,EAAL,CAeA,QAZsBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,eAEH9E,IAAlBD,EAAKsM,WACL1M,KAAK0M,SAAWtM,EAAKsM,eAERrM,IAAbD,EAAKmiB,MACLviB,KAAKuiB,IAAMniB,EAAKmiB,UAECliB,IAAjBD,EAAKa,UACLjB,KAAKiB,QAAUb,EAAKa,cAELZ,IAAfD,EAAKS,MAAqB,CAC1B,MAAM2hB,GAAc,QAAQxiB,KAAKa,YAASR,EAAYL,KAAKa,MAC3Db,KAAKa,OAAQ,QAA0BT,EAAKS,OAAQA,GACzCC,EAAAC,EAAaM,OAAOmhB,EAAa3hB,IAEhD,MACkBR,IAAdD,EAAKgB,OACLpB,KAAKoB,KAAOhB,EAAKgB,KApBrB,CAsBJ,EC9BG,MAAMqhB,WAAkBH,GAC3B,WAAAviB,GACIS,QACAR,KAAK0iB,UAAY,EACrB,CACA,OAAIC,GACA,OAAO,QAA0B3iB,KAAK0iB,WAAYpc,GAAMA,EAAEmP,QAAQ,IAAK,KAC3E,CACA,OAAIkN,CAAIjiB,GACJV,KAAK0iB,WAAY,QAA0BhiB,GAAQ4F,GAAM,IAAIA,KACjE,CACA,IAAAnG,CAAKC,GACDI,MAAML,KAAKC,GACNA,SAGYC,IAAbD,EAAKuiB,MACL3iB,KAAK2iB,IAAMviB,EAAKuiB,UAEGtiB,IAAnBD,EAAKsiB,YACL1iB,KAAK0iB,UAAYtiB,EAAKsiB,WAE9B,ECrBG,MAAME,WAAeN,GACxB,IAAAniB,CAAKC,GACDI,MAAML,KAAKC,GACNA,IAGLJ,KAAKmiB,MAAO,QAA0B/hB,EAAK+hB,MAAOT,IAC9C,MAAMzZ,EAAM,IAAIwa,GAEhB,OADAxa,EAAI9H,KAAKuhB,GACFzZ,CAAG,IAElB,ECbG,SAAS4a,GAAqBC,EAAeC,EAAWC,EAAcC,GACzE,GAAIF,GAAaC,EAAc,CAC3B,MAAMtiB,EAAQoiB,GAAiBC,EAAYC,GAAgBC,EAC3D,OAAO,QAAMviB,EAAOoiB,EAAeC,EACvC,CACK,GAAIA,EAAYC,EAAc,CAC/B,MAAMtiB,EAAQoiB,GAAiBE,EAAeD,GAAaE,EAC3D,OAAO,QAAMviB,EAAOqiB,EAAWD,EACnC,CACJ,CCPO,MAAMI,WAAgBtQ,EACzB,WAAA7S,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAKmjB,aAAe,KAChB,MAAMvhB,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAeic,EAAgBxhB,EAAUgD,cAAcD,MAAMsC,cAAeoc,EAAgBxhB,EAAQ+C,cAAcwC,MAAMkc,OAC9K,IAAKD,IAAkBD,EACnB,OAECxhB,EAAU0hB,SACX1hB,EAAU0hB,OAAS,CAAC,GAExB,MAAMne,EAAWvD,EAAUkC,OAAOyf,mBAClC,IAAKpe,GAAYA,EAAW,EACxB,OAEJ,MAAMmb,EAAQ1e,EAAU0H,UAAUiX,SAASiD,YAAYJ,EAAeje,GAAWqb,GAAMxgB,KAAKoL,UAAUoV,MAAK,OAAE8C,GAAW1hB,EACxH,IAAK,MAAMO,KAAYme,EAAO,CAC1B,IAAKgD,EAAOze,SACR,SAEJ1C,EAASmhB,OAAO1J,SAAW0J,EAAOG,YAClC,MAAMze,EAAM7C,EAASW,cAAe4gB,GAAY,QAAY1e,EAAKoe,GAAgBO,IAAa,IAAIC,MAAOC,WAAajiB,EAAUgD,cAAcD,MAAMmf,WAAa,IAAM,IACnKH,EAAYN,EAAc3W,WAC1B4W,EAAOG,aAAc,GAErBE,EAAqC,EAAzBN,EAAc3W,WAC1B4W,EAAOze,UAAW,EAClBye,EAAOG,aAAc,GAEzB,MAAMM,EAAW,CACbC,UAAW,CACPC,SAAUriB,EAAUkC,OAAOogB,eAC3BxjB,MAAOyB,EAASmhB,OAAOrjB,QAE3BkkB,aAAc,CACVF,UAAU,QAAY9hB,EAASN,QAAQT,KAAKV,OAASkB,EAAUkC,OAAOE,WACtEtD,MAAOyB,EAASf,KAAKV,OAEzBmS,KAAM,QAEV7S,KAAKokB,SAASjiB,EAAUuhB,EAAWC,EAAWI,GAC9C,MAAMM,EAAc,CAChBL,UAAW,CACPC,SAAUZ,EAAcpiB,QACxBP,MAAOyB,EAASmhB,OAAOriB,SAE3BkjB,aAAc,CACVF,UAAU,QAAY9hB,EAASN,QAAQZ,QAAQP,OAC/CA,MAAOyB,EAASlB,SAASP,OAAS,GAEtCmS,KAAM,WAEV7S,KAAKokB,SAASjiB,EAAUuhB,EAAWC,EAAWU,IACzCf,EAAOG,aAAeC,GAAave,EACpCnF,KAAKskB,kBAAkBniB,EAAUuhB,UAG1BvhB,EAASmhB,OAAOziB,KAE/B,GAEJb,KAAKukB,aAAe,KAChB,MAAM3iB,EAAY5B,KAAK4B,UAAW6R,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAAU4D,EAAWvD,EAAUkC,OAAOyf,mBACjH,IAAKpe,GAAYA,EAAW,QAAkB9E,IAAboT,EAC7B,OAEJ,MAAM6M,EAAQ1e,EAAU0H,UAAUiX,SAASiD,YAAY/P,EAAUtO,GAAWqb,GAAMxgB,KAAKoL,UAAUoV,KACjG,IAAK,MAAMre,KAAYme,EAAO,CAC1Bne,EAASmhB,OAAO1J,SAAU,EAC1B,MAAM5U,EAAM7C,EAASW,cAAe0hB,GAAgB,QAAYxf,EAAKyO,GAAWwP,EAAQ,EAAIuB,EAAgBrf,EACxGqf,GAAiBrf,EACb8d,GAAS,GAAKrhB,EAAUgD,cAAc8W,SAAW,QACjD1b,KAAKykB,iBAAiBtiB,EAAU8gB,GAChCjjB,KAAK0kB,oBAAoBviB,EAAU8gB,GACnCjjB,KAAKskB,kBAAkBniB,EAAU8gB,IAIrCjjB,KAAK6T,MAAM1R,GAEXP,EAAUgD,cAAc8W,SAAW,OACnC1b,KAAK6T,MAAM1R,EAEnB,GAEJnC,KAAKskB,kBAAoB,CAACniB,EAAU8gB,EAAO0B,KACvC,MAAM9iB,EAAU7B,KAAK4B,UAAUuF,cAAekc,EAAgBsB,GAAa9iB,EAAQ+C,cAAcwC,MAAMkc,OACvG,GAAKD,EAAL,CAGA,IAAKlhB,EAASmhB,OAAOsB,WAAY,CAC7B,MAAMC,EAAYxB,EAAcxiB,MAChC,IAAKgkB,EACD,OAEJ,MAAMC,GAAc,QAAyBD,GAC7C1iB,EAASmhB,OAAOsB,YAAa,QAAgBE,EACjD,CACA,GAAK3iB,EAASmhB,OAAOsB,WAGrB,GAAIvB,EAAcd,IAAK,CACnBpgB,EAASmhB,OAAOziB,WAAQR,EACxB,MAAM0kB,EAAS5iB,EAASiI,eACxBjI,EAASmhB,OAAOziB,MAAQkkB,GAClB,SAAS,QAASA,EAAQ5iB,EAASmhB,OAAOsB,WAAY,EAAI3B,EAAOA,IACjE9gB,EAASmhB,OAAOsB,UAC1B,MAEIziB,EAASmhB,OAAOziB,MAAQsB,EAASmhB,OAAOsB,UApB5C,CAqBA,EAEJ5kB,KAAK0kB,oBAAsB,CAACviB,EAAU8gB,EAAO0B,KACzC,MAAM/iB,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAe6d,EAAcL,GAAW1jB,SAAWY,EAAQ+C,cAAcwC,MAAMkc,QAAQriB,QAC7I,IAAK+jB,EACD,OAEJ,MAAMC,EAAa9iB,EAASN,QAAQZ,QAAQP,MAAOwkB,EAAW/iB,EAASlB,SAASP,OAAS,EAAGO,EAAU4hB,GAAqBqC,EAAUF,GAAa,QAAYC,GAAahC,QAC3J5iB,IAAZY,IACAkB,EAASmhB,OAAOriB,QAAUA,EAC9B,EAEJjB,KAAKykB,iBAAmB,CAACtiB,EAAU8gB,EAAO0B,KACtC,MAAM/iB,EAAY5B,KAAK4B,UAAWujB,EAAWR,GAAWvjB,KAAOujB,EAAUvjB,KAAOQ,EAAUkC,OAAOE,WAAapC,EAAUkC,OAAOogB,eAC/H,QAAiB7jB,IAAb8kB,EACA,OAEJ,MAAMC,GAAU,QAAYjjB,EAASN,QAAQT,KAAKV,OAASkB,EAAUkC,OAAOE,WAAYqhB,EAAQljB,EAASf,KAAKV,MAAOU,EAAOyhB,GAAqBwC,EAAOF,EAAUC,EAASnC,QAC9J5iB,IAATe,IACAe,EAASmhB,OAAOrjB,OAASmB,EAC7B,EAEJpB,KAAKokB,SAAW,CAACjiB,EAAUuhB,EAAWC,EAAWvjB,KAC7C,MAAMwB,EAAY5B,KAAK4B,UAAW0jB,EAAcllB,EAAK4jB,UAAUC,SAAUpiB,EAAUD,EAAUuF,cAAekc,EAAgBxhB,EAAQ+C,cAAcwC,MAAMkc,OACxJ,IAAKD,QAAiChjB,IAAhBilB,EAClB,OAEJ,MAAMC,EAAiBlC,EAAc3W,SAAU8Y,EAAiB5jB,EAAUkC,OAAOyf,mBAAoBkC,EAAiBrlB,EAAK+jB,aAAaF,SAAUyB,EAAatlB,EAAK4jB,UAAUtjB,MAAOilB,EAAOvlB,EAAK+jB,aAAazjB,OAAS,EAAGmS,EAAOzS,EAAKyS,KACtO,GAAK2S,KAAkBA,EAAiB,IAAKF,IAAgBG,EAM7D,GAHK7jB,EAAU0hB,SACX1hB,EAAU0hB,OAAS,CAAC,GAEpB1hB,EAAU0hB,OAAOG,YACbiC,IACa,SAAT7S,UACO1Q,EAASmhB,OAAOrjB,OAEd,YAAT4S,UACO1Q,EAASmhB,OAAOriB,cAK/B,GAAIyiB,GAAa8B,EAAgB,CAC7B,MAAMI,EAAMF,GAAcC,EAC1B,GAAIC,IAAQN,EAAa,CACrB,MAAM5kB,EAAQilB,EAAQhC,GAAagC,EAAOL,GAAgBC,EAC7C,SAAT1S,IACA1Q,EAASmhB,OAAOrjB,OAASS,GAEhB,YAATmS,IACA1Q,EAASmhB,OAAOriB,QAAUP,EAElC,CACJ,KAEiB,SAATmS,UACO1Q,EAASmhB,OAAOrjB,OAEd,YAAT4S,UACO1Q,EAASmhB,OAAOriB,OAGnC,EAEJjB,KAAK6lB,qBAAuB,CAACtV,EAAO8E,EAAUqM,KAC1C,MAAM9f,EAAY5B,KAAK4B,UAAW8gB,EAAYxS,SAASyR,iBAAiBtM,GAAWiO,EAAS1hB,EAAUuF,cAAcvC,cAAcwC,MAAMkc,OACnIA,GAAWZ,EAAU7f,QAG1B6f,EAAUd,SAASC,IACf,MAAMC,EAAOD,EAAMxH,EAAUzY,EAAUkC,OAAOE,WAAYgB,EAAM,CAC5DxD,GAAIsgB,EAAKC,WAAaD,EAAKE,YAAc,GAAK3H,EAC9C5Y,GAAIqgB,EAAKG,UAAYH,EAAKI,aAAe,GAAK7H,GAC/CyL,EAAiBhE,EAAKE,YAAc,EAAK3H,EAAS+F,EAAoB,WAAbsB,EAAI7O,KAC1D,IAAIoN,GAAAC,EAAOlb,EAAIxD,EAAGwD,EAAIvD,EAAGqkB,GACzB,IAAIzE,GAAA,EAAUS,EAAKC,WAAa1H,EAASyH,EAAKG,UAAY5H,EAASyH,EAAKE,YAAc3H,EAASyH,EAAKI,aAAe7H,GAAUiG,EAAQ1e,EAAU0H,UAAUiX,SAASD,MAAMF,GAAOI,GAAMxgB,KAAKoL,UAAUoV,KAC1M,IAAK,MAAMre,KAAYme,EAAO,CAC1B,IAAKF,EAAK2F,SAAS5jB,EAASW,eACxB,SAEJX,EAASmhB,OAAO1J,SAAU,EAC1B,MAAMuI,EAAOmB,EAAOnB,KAAMwC,GAAY,QAAQxC,EAAML,GAC/C3f,EAASmhB,OAAO5B,KAAOvf,EAASmhB,OAAO5B,MAAQI,IAChD9hB,KAAKkT,MAAM/Q,EAAUoO,GAAO,GAC5BpO,EAASmhB,OAAO5B,IAAMI,GAE1B9hB,KAAKykB,iBAAiBtiB,EAAU,EAAGwiB,GACnC3kB,KAAK0kB,oBAAoBviB,EAAU,EAAGwiB,GACtC3kB,KAAKskB,kBAAkBniB,EAAU,EAAGwiB,EACxC,IACF,EAED/iB,EAAU0hB,SACX1hB,EAAU0hB,OAAS,CAAC,GAExBtjB,KAAK0G,gBAAmBC,IACP,WAATA,IAGC/E,EAAU0hB,SACX1hB,EAAU0hB,OAAS,CAAC,GAExB1hB,EAAU0hB,OAAOze,UAAW,EAAI,CAExC,CACA,KAAAqO,CAAM/Q,EAAUoO,EAAOyV,GACf7jB,EAASmhB,OAAO1J,UAAYoM,WAGzB7jB,EAASmhB,OAAO5B,WAChBvf,EAASmhB,OAAOriB,eAChBkB,EAASmhB,OAAOrjB,cAChBkC,EAASmhB,OAAOziB,MAC3B,CACA,IAAAqG,GACI,MAAMtF,EAAY5B,KAAK4B,UAAW0hB,EAAS1hB,EAAUuF,cAAcvC,cAAcwC,MAAMkc,OAClFA,IAGL1hB,EAAUkC,OAAOyf,mBAAqBD,EAAOne,SAAWvD,EAAUkC,OAAOE,gBACrD3D,IAAhBijB,EAAOliB,OACPQ,EAAUkC,OAAOogB,eAAiBZ,EAAOliB,KAAOQ,EAAUkC,OAAOE,YAEzE,CACA,cAAMmP,CAAS5C,GACX,MAAM1O,EAAU7B,KAAK4B,UAAUuF,cAAee,EAASrG,EAAQ+C,cAAcsD,OAAQyL,EAAUzL,EAAOyL,QAASxL,EAAUD,EAAOC,QAAS0Y,EAAelN,EAAQ5E,OAAQ+R,EAAYnN,EAAQhN,KAAMoa,EAAe5Y,EAAQ4G,OAAQiS,EAAY7Y,EAAQxB,KAAMwb,EAAOja,EAAOka,MACrQvB,IAAgB,QAAU,SAAUC,GACpC9gB,KAAKukB,eAEAxD,IAAgB,QAAU,SAAUC,GACzChhB,KAAKmjB,gBAGL,QAAe,SAAUhB,GAAM,CAAC9M,EAAUqM,IAAQ1hB,KAAK6lB,qBAAqBtV,EAAO8E,EAAUqM,IAErG,CACA,SAAAtW,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAexC,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiB/C,EAAQ+C,eAAesD,QAAQ,QAAEC,EAAO,MAAEia,EAAK,QAAEzO,GAAYzL,EAAQyc,GAAY,QAAiB,SAAUvC,GAC7P,SAAMuC,GAAchR,EAAQ5E,QAAUpK,EAAMpD,UAAc4G,EAAQ4G,QAAUpK,EAAMsC,kBAG3E,QAAU,SAAU0M,EAAQhN,QAAS,QAAU,SAAUwB,EAAQxB,OAASge,EACrF,CACA,eAAA/Q,CAAgB/R,KAAYwJ,GACnBxJ,EAAQyhB,SACTzhB,EAAQyhB,OAAS,IAAIV,IAEzB,IAAK,MAAM7a,KAAUsD,EACjBxJ,EAAQyhB,OAAOnjB,KAAK4H,GAAQub,OAEpC,CACA,KAAAzP,CAAM1R,GACFA,EAASmhB,OAAO1J,SAAU,CAC9B,EC5QGxR,eAAe6d,GAA8B3d,EAAQC,GAAU,SAC5DD,EAAOyL,cAAc,kBAAmBnS,GAAc,IAAIshB,GAAQthB,IAAY2G,EACxF,CCHO,MAAM2d,GACT,WAAAnmB,GACIC,KAAKiB,QAAU,EACnB,CACA,IAAAd,CAAKC,GACIA,QAGgBC,IAAjBD,EAAKa,UACLjB,KAAKiB,QAAUb,EAAKa,QAE5B,ECVG,MAAMklB,GACT,WAAApmB,GACIC,KAAKmF,SAAW,GAChBnF,KAAK2V,MAAQ,IAAIuQ,GACjBlmB,KAAKC,OAAS,EAClB,CACA,cAAImmB,GACA,OAAOpmB,KAAK2V,KAChB,CACA,cAAIyQ,CAAW1lB,GACXV,KAAK2V,MAAQjV,CACjB,CACA,eAAI2lB,GACA,OAAOrmB,KAAK2V,KAChB,CACA,eAAI0Q,CAAY3lB,GACZV,KAAK2V,MAAQjV,CACjB,CACA,IAAAP,CAAKC,GACIA,SAGiBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,UAEzBnF,KAAK2V,MAAMxV,KAAKC,EAAKuV,OAASvV,EAAKgmB,YAAchmB,EAAKimB,kBAClChmB,IAAhBD,EAAKH,SACLD,KAAKC,OAASG,EAAKH,QAE3B,E,eC7BG,SAASqmB,GAAS9gB,EAAS+gB,EAAIC,EAAIvlB,GACtC,MAAMwlB,EAAWzjB,KAAKqP,MAAMmU,EAAGnhB,YAAckhB,EAAGlhB,aAAcqhB,EAASH,EAAGnc,eAAgBuc,EAASH,EAAGpc,eACtG,IAAKsc,IAAWC,EACZ,OAEJ,MAAMC,EAAYL,EAAGzjB,cAAe+jB,EAAUL,EAAG1jB,cAAegkB,GAAS,QAASJ,EAAQC,EAAQJ,EAAGlhB,YAAamhB,EAAGnhB,aAAc0hB,EAAOvhB,EAAQwhB,qBAAqBJ,EAAUplB,EAAGolB,EAAUnlB,EAAGolB,EAAQrlB,EAAGqlB,EAAQplB,GAIpN,OAHAslB,EAAKE,aAAa,GAAG,QAAgBP,EAAQzlB,IAC7C8lB,EAAKE,aAAaR,EAAW,EAAI,EAAIA,GAAU,QAAgBK,EAAQ7lB,IACvE8lB,EAAKE,aAAa,GAAG,QAAgBN,EAAQ1lB,IACtC8lB,CACX,CACO,SAASG,GAAgB1hB,EAASpC,EAAO+jB,EAAWC,EAAOC,IAC9D,SAAS7hB,EAAS4hB,EAAOC,GACzB7hB,EAAQ8hB,UAAYlkB,EACpBoC,EAAQ+hB,YAAcJ,EACtB3hB,EAAQgiB,QACZ,CACO,SAASL,GAAUvlB,EAAW6lB,EAAKlB,EAAIC,GAC1C,MAAM3kB,EAAUD,EAAUuF,cAAeugB,EAAiB7lB,EAAQ+C,cAAcwC,MAAMugB,QACtF,GAAKD,EAGL,OAAOpB,GAASmB,EAAKlB,EAAIC,EAAIkB,EAAe/R,MAAM1U,QACtD,CACO,SAAS2mB,GAAehmB,EAAW2kB,EAAIC,GAC1C5kB,EAAUI,OAAOuD,MAAMkiB,IACnB,MAAMI,EAAKV,GAAUvlB,EAAW6lB,EAAKlB,EAAIC,GACzC,IAAKqB,EACD,OAEJ,MAAMC,EAAOvB,EAAGzjB,cAAeilB,EAAOvB,EAAG1jB,cACzCokB,GAAgBO,EAAKlB,EAAGziB,OAAOkkB,YAAc,EAAGH,EAAIC,EAAMC,EAAK,GAEvE,CC/BO,MAAME,WAAkBrV,EAC3B,WAAA7S,CAAY6B,GACRpB,MAAMoB,EACV,CACA,KAAAsR,GACA,CACA,IAAAhM,GACI,MAAMtF,EAAY5B,KAAK4B,UAAW+lB,EAAU/lB,EAAUuF,cAAcvC,cAAcwC,MAAMugB,QACnFA,IAGL/lB,EAAUkC,OAAOokB,oBAAsBP,EAAQxiB,SAAWvD,EAAUkC,OAAOE,WAC3EpC,EAAUkC,OAAOqkB,kBAAoBR,EAAQ1nB,OAAS2B,EAAUkC,OAAOE,WAC3E,CACA,cAAMmP,GACF,MAAMvR,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cACtD,GAAItF,EAAQ+C,cAAcsD,OAAOyL,QAAQ5E,QAA6C,gBAAnCnN,EAAUgD,cAAc8W,OAA0B,CACjG,MAAMjI,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAC/C,IAAKK,EAAUkC,OAAOokB,qBAClBtmB,EAAUkC,OAAOokB,oBAAsB,IACtCtmB,EAAUkC,OAAOqkB,mBAClBvmB,EAAUkC,OAAOqkB,kBAAoB,IACpC1U,EACD,OAEJ,MAAMtO,EAAWnC,KAAKsU,IAAI1V,EAAUkC,OAAOqkB,mBAAoB7H,EAAQ1e,EAAU0H,UAAUiX,SAASiD,YAAY/P,EAAUtO,GAAWqb,GAAMxgB,KAAKoL,UAAUoV,KAC1J,IAAIzV,EAAI,EACR,IAAK,MAAMwb,KAAMjG,EAAO,CACpB,MAAMwH,EAAOvB,EAAGzjB,cAChB,IAAK,MAAM0jB,KAAMlG,EAAM8H,MAAMrd,EAAI,GAAI,CACjC,MAAMgd,EAAOvB,EAAG1jB,cAAeulB,EAAUrlB,KAAKsU,IAAI1V,EAAUkC,OAAOokB,qBAAsBI,EAAQtlB,KAAKsU,IAAIwQ,EAAKtmB,EAAIumB,EAAKvmB,GAAI+mB,EAAQvlB,KAAKsU,IAAIwQ,EAAKrmB,EAAIsmB,EAAKtmB,GACvJ6mB,EAAQD,GAAWE,EAAQF,GAC3BT,GAAehmB,EAAW2kB,EAAIC,EAEtC,GACEzb,CACN,CACJ,CACJ,CACA,SAAAK,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAW+C,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiBhD,EAAUuF,cAAcvC,eAAesD,OACrJ,SAAMA,EAAOyL,QAAQ5E,SAAUpK,EAAMpD,YAG9B,QAAU,UAAW2G,EAAOyL,QAAQhN,KAC/C,CACA,eAAAiN,CAAgB/R,KAAYwJ,GACnBxJ,EAAQ8lB,UACT9lB,EAAQ8lB,QAAU,IAAIxB,IAE1B,IAAK,MAAMpe,KAAUsD,EACjBxJ,EAAQ8lB,QAAQxnB,KAAK4H,GAAQ4f,QAErC,CACA,KAAA9T,GACA,ECzDGzL,eAAeogB,GAA+BlgB,EAAQC,GAAU,SAC7DD,EAAOyL,cAAc,mBAAoBnS,GAAc,IAAIqmB,GAAUrmB,IAAY2G,EAC3F,CCFO,MAAMkgB,GACT,WAAA1oB,GACIC,KAAK0oB,OAAQ,EACb1oB,KAAK2oB,SAAU,EACf3oB,KAAKiB,QAAU,CACnB,CACA,IAAAd,CAAKC,GACIA,SAGcC,IAAfD,EAAKsoB,QACL1oB,KAAK0oB,MAAQtoB,EAAKsoB,YAEHroB,IAAfD,EAAKS,QACLb,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,aAEjCR,IAAjBD,EAAKuoB,UACL3oB,KAAK2oB,QAAUvoB,EAAKuoB,cAEHtoB,IAAjBD,EAAKa,UACLjB,KAAKiB,QAAUb,EAAKa,SAE5B,ECtBG,MAAM2nB,GACT,WAAA7oB,GACIC,KAAKmF,SAAW,IAChBnF,KAAK2V,MAAQ,IAAI8S,EACrB,CACA,cAAIrC,GACA,OAAOpmB,KAAK2V,KAChB,CACA,cAAIyQ,CAAW1lB,GACXV,KAAK2V,MAAQjV,CACjB,CACA,eAAI2lB,GACA,OAAOrmB,KAAK2V,KAChB,CACA,eAAI0Q,CAAY3lB,GACZV,KAAK2V,MAAQjV,CACjB,CACA,IAAAP,CAAKC,GACIA,SAGiBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,UAEzBnF,KAAK2V,MAAMxV,KAAKC,EAAKuV,OAASvV,EAAKgmB,YAAchmB,EAAKimB,aAC1D,ECzBG,SAASwC,GAAarjB,EAASpC,EAAOgkB,EAAOC,EAAKyB,EAAW7nB,IAChE,SAASuE,EAAS4hB,EAAOC,GACzB7hB,EAAQ+hB,aAAc,QAAgBuB,EAAW7nB,GACjDuE,EAAQ8hB,UAAYlkB,EACpBoC,EAAQgiB,QACZ,CACO,SAASuB,GAASnnB,EAAWO,EAAU6mB,EAAW/nB,EAASwS,GAC9D7R,EAAUI,OAAOuD,MAAMkiB,IACnB,MAAMwB,EAAW9mB,EAASW,cAC1B+lB,GAAapB,EAAKtlB,EAAS2B,OAAOkkB,YAAc,EAAGiB,EAAUxV,EAAUuV,EAAW/nB,EAAQ,GAElG,CCTO,MAAMioB,WAAgBtW,EACzB,WAAA7S,CAAY6B,GACRpB,MAAMoB,EACV,CACA,KAAAsR,GACA,CACA,IAAAhM,GACI,MAAMtF,EAAY5B,KAAK4B,UAAWunB,EAAOvnB,EAAUuF,cAAcvC,cAAcwC,MAAM+hB,KAChFA,IAGLvnB,EAAUkC,OAAOslB,iBAAmBD,EAAKhkB,SAAWvD,EAAUkC,OAAOE,WACzE,CACA,cAAMmP,GACF,MAAMvR,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAevC,EAAgB/C,EAAQ+C,cAC7F,IAAKA,EAAcwC,MAAM+hB,OACpBvkB,EAAcsD,OAAOyL,QAAQ5E,QAC9BnN,EAAUgD,cAAc8W,SAAW,MACnC,OAEJ,MAAMjI,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAC/C,IAAKkS,EACD,OAEJ,MAAMtO,EAAWvD,EAAUkC,OAAOslB,iBAClC,IAAKjkB,GAAYA,EAAW,EACxB,OAEJ,MAAMmb,EAAQ1e,EAAU0H,UAAUiX,SAASiD,YAAY/P,EAAUtO,GAAWqb,GAAMxgB,KAAKoL,UAAUoV,KACjG,IAAK,MAAMre,KAAYme,EAAO,CAC1B,MAAMtb,EAAM7C,EAASW,cAAe0hB,GAAgB,QAAYxf,EAAKyO,GACrE,GAAI+Q,EAAgBrf,EAChB,SAEJ,MAAMkkB,EAAkBzkB,EAAcwC,MAAM+hB,KAAKxT,MAAO2T,EAAcD,EAAgBpoB,QAASsoB,EAAcD,EAAe9E,EAAgB8E,EAAenkB,EAC3J,GAAIokB,GAAe,EACf,SAEJ,MAAMC,EAAWH,EAAgBxoB,OAASsB,EAASN,QAAQ8T,OAAO9U,MAClE,IAAKe,EAAU0H,UAAUmgB,eAAiBD,EAAU,CAChD,MAAME,EAAe9kB,EAAcwC,MAAM+hB,KAAKxT,MAC9C/T,EAAU0H,UAAUmgB,eAAgB,QAAmBD,EAAUE,EAAahB,MAAOgB,EAAaf,QACtG,CACA,MAAMG,GAAY,QAAa3mB,OAAU9B,EAAWuB,EAAU0H,UAAUmgB,eACnEX,GAGLC,GAASnnB,EAAWO,EAAU2mB,EAAWS,EAAa9V,EAC1D,CACJ,CACA,SAAArI,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAW+C,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiBhD,EAAUuF,cAAcvC,eAAesD,OACrJ,OAAOA,EAAOyL,QAAQ5E,UAAYpK,EAAMpD,WAAY,QAAU,OAAQ2G,EAAOyL,QAAQhN,KACzF,CACA,eAAAiN,CAAgB/R,KAAYwJ,GACnBxJ,EAAQsnB,OACTtnB,EAAQsnB,KAAO,IAAIP,IAEvB,IAAK,MAAM7gB,KAAUsD,EACjBxJ,EAAQsnB,KAAKhpB,KAAK4H,GAAQohB,KAElC,CACA,KAAAtV,GACA,ECjEGzL,eAAeuhB,GAA4BrhB,EAAQC,GAAU,SAC1DD,EAAOyL,cAAc,gBAAiBnS,GAAc,IAAIsnB,GAAQtnB,IAAY2G,EACtF,CCFO,MAAMqhB,WAAehX,EACxB,WAAA7S,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAK0G,gBAAmBC,IACpB,GAAa,UAATA,EACA,OAEJ,MAAM/E,EAAY5B,KAAK4B,UACnBA,EAAUioB,qBACVjoB,EAAUmO,QAGVnO,EAAUiO,MACd,CAER,CACA,KAAAqD,GACA,CACA,IAAAhM,GACA,CACA,cAAMiM,GACN,CACA,SAAA/H,GACI,OAAO,CACX,CACA,KAAAyI,GACA,EC1BGzL,eAAe0hB,GAA6BxhB,EAAQC,GAAU,SAC3DD,EAAOyL,cAAc,iBAAkBnS,GAAc,IAAIgoB,GAAOhoB,IAAY2G,EACtF,CCFO,MAAMwhB,GACT,WAAAhqB,GACIC,KAAK8e,SAAU,EACf9e,KAAKgqB,OAAS,GACdhqB,KAAK4M,SAAW,CACpB,CACA,gBAAIqd,GACA,OAAOjqB,KAAK4M,QAChB,CACA,gBAAIqd,CAAavpB,GACbV,KAAK4M,UAAW,QAAclM,EAClC,CACA,IAAAP,CAAKC,GACD,IAAKA,EACD,YAEiBC,IAAjBD,EAAK0e,UACL9e,KAAK8e,QAAU1e,EAAK0e,cAEJze,IAAhBD,EAAK4pB,SACLhqB,KAAKgqB,OAAS5pB,EAAK4pB,OAAOzX,KAAKjM,GAAMA,KAEpCtG,KAAKgqB,OAAOnnB,SACb7C,KAAK8e,SAAU,GAEnB,MAAMlS,EAAWxM,EAAKwM,UAAYxM,EAAK6pB,kBACtB5pB,IAAbuM,IACA5M,KAAK4M,UAAW,QAAcA,GAEtC,EC5BG,MAAMsd,WAAetX,EACxB,WAAA7S,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAK0G,gBAAmBC,IACpB,GAAa,SAATA,EACA,OAEJ,MAAM/E,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAegjB,EAActoB,EAAQ+C,cAAcwC,MAAMX,KAC/G,IAAK0jB,EACD,OAEJ,MAAMvd,GAAW,QAAcud,EAAYvd,UAC3C,GAAIA,GAAY,EACZ,OAEJ,MAAMlC,GAAQ,QAAc,MAACrK,KAAc8pB,EAAYH,SAAUI,OAAyB/pB,IAAVqK,EAAsB9I,EAAUuF,cAAcmC,UAAU0gB,OAAOtf,QAASrK,EACxJuB,EAAU0H,UAAU7C,KAAKmG,EAAUhL,EAAUgD,cAAcD,MAAOylB,EAAc1f,EAAM,CAE9F,CACA,KAAAwI,GACA,CACA,IAAAhM,GACA,CACA,cAAMiM,GACN,CACA,SAAA/H,GACI,OAAO,CACX,CACA,eAAAwI,CAAgB/R,KAAYwJ,GACnBxJ,EAAQ4E,OACT5E,EAAQ4E,KAAO,IAAIsjB,IAEvB,IAAK,MAAMhiB,KAAUsD,EACjBxJ,EAAQ4E,KAAKtG,KAAK4H,GAAQtB,KAElC,CACA,KAAAoN,GACA,ECtCGzL,eAAeiiB,GAA4B/hB,EAAQC,GAAU,SAC1DD,EAAOyL,cAAc,gBAAiBnS,GAAc,IAAIsoB,GAAOtoB,IAAY2G,EACrF,CCFO,MAAM+hB,GACT,WAAAvqB,GACIC,KAAK4M,SAAW,CACpB,CACA,gBAAIqd,GACA,OAAOjqB,KAAK4M,QAChB,CACA,gBAAIqd,CAAavpB,GACbV,KAAK4M,UAAW,QAAclM,EAClC,CACA,IAAAP,CAAKC,GACD,IAAKA,EACD,OAEJ,MAAMwM,EAAWxM,EAAKwM,UAAYxM,EAAK6pB,kBACtB5pB,IAAbuM,IACA5M,KAAK4M,UAAW,QAAcA,GAEtC,ECjBG,MAAM2d,WAAgB3X,EACzB,WAAA7S,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAK0G,gBAAmBC,IACpB,MAAM/E,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cACtD,IAAKtF,EAAQ+C,cAAcwC,MAAMwW,QAAmB,WAATjX,EACvC,OAEJ,MAAM6jB,GAAW,QAAc3oB,EAAQ+C,cAAcwC,MAAMwW,OAAOhR,UAClEhL,EAAU0H,UAAUmhB,eAAeD,EAAS,CAEpD,CACA,KAAAtX,GACA,CACA,IAAAhM,GACA,CACA,cAAMiM,GACN,CACA,SAAA/H,GACI,OAAO,CACX,CACA,eAAAwI,CAAgB/R,KAAYwJ,GACnBxJ,EAAQ+b,SACT/b,EAAQ+b,OAAS,IAAI0M,IAEzB,IAAK,MAAMviB,KAAUsD,EACjBxJ,EAAQ+b,OAAOzd,KAAK4H,GAAQ6V,OAEpC,CACA,KAAA/J,GACA,EC/BGzL,eAAesiB,GAA8BpiB,EAAQC,GAAU,SAC5DD,EAAOyL,cAAc,kBAAmBnS,GAAc,IAAI2oB,GAAQ3oB,IAAY2G,EACxF,CCHO,MAAMoiB,GACT,WAAA5qB,GACIC,KAAKmF,SAAW,IAChBnF,KAAK0M,SAAW,GAChB1M,KAAKmJ,OAAS,IACdnJ,KAAKkP,MAAQ,EACblP,KAAK8X,SAAW,GAChB9X,KAAK0f,OAAS,eAClB,CACA,IAAAvf,CAAKC,GACIA,SAGiBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,eAEH9E,IAAlBD,EAAKsM,WACL1M,KAAK0M,SAAWtM,EAAKsM,eAELrM,IAAhBD,EAAKsf,SACL1f,KAAK0f,OAAStf,EAAKsf,aAEHrf,IAAhBD,EAAK+I,SACLnJ,KAAKmJ,OAAS/I,EAAK+I,aAEJ9I,IAAfD,EAAK8O,QACLlP,KAAKkP,MAAQ9O,EAAK8O,YAEA7O,IAAlBD,EAAK0X,WACL9X,KAAK8X,SAAW1X,EAAK0X,UAE7B,EC7BG,MAAM8S,WAAmBD,GAC5B,WAAA5qB,GACIS,QACAR,KAAK0iB,UAAY,EACrB,CACA,OAAIC,GACA,OAAO,QAA0B3iB,KAAK0iB,WAAYpc,GAAMA,EAAEmP,QAAQ,IAAK,KAC3E,CACA,OAAIkN,CAAIjiB,GACJV,KAAK0iB,WAAY,QAA0BhiB,GAAQ4F,GAAM,IAAIA,KACjE,CACA,IAAAnG,CAAKC,GACDI,MAAML,KAAKC,GACNA,SAGYC,IAAbD,EAAKuiB,MACL3iB,KAAK2iB,IAAMviB,EAAKuiB,UAEGtiB,IAAnBD,EAAKsiB,YACL1iB,KAAK0iB,UAAYtiB,EAAKsiB,WAE9B,ECrBG,MAAMmI,WAAgBF,GACzB,IAAAxqB,CAAKC,GACDI,MAAML,KAAKC,GACNA,IAGLJ,KAAKmiB,MAAO,QAA0B/hB,EAAK+hB,MAAOT,IAC9C,MAAMzZ,EAAM,IAAI2iB,GAEhB,OADA3iB,EAAI9H,KAAKuhB,GACFzZ,CAAG,IAElB,ECZG,MAAM6iB,WAAiBlY,EAC1B,WAAA7S,CAAYuI,EAAQ1G,GAChBpB,MAAMoB,GACN5B,KAAK+qB,cAAgB,KACjB,MAAMnpB,EAAY5B,KAAK4B,UAAWopB,EAAiBppB,EAAUuF,cAAcvC,cAAcwC,MAAM6jB,QAC/F,IAAKD,EACD,OAEJ,MAAMC,EAAUrpB,EAAUqpB,SAAW,CAAE3hB,UAAW,IAUlD,GATK2hB,EAAQpL,SACJoL,EAAQ/hB,QACT+hB,EAAQ/hB,MAAQ,GAEpB+hB,EAAQ/hB,QACJ+hB,EAAQ/hB,QAAUtH,EAAU0H,UAAUJ,QACtC+hB,EAAQpL,QAAS,IAGrBoL,EAAQpmB,SAAU,CAClB,MAAMqmB,EAAkBtpB,EAAUkC,OAAOqnB,oBACzC,IAAKD,GAAmBA,EAAkB,EACtC,OAEJ,MAAMpF,EAAgB9iB,KAAKoC,IAAI8lB,EAAkB,EAAG,GAAI9H,EAAgBxhB,EAAUgD,cAAcD,MAAMsC,cACtG,QAAsB5G,IAAlB+iB,EACA,OAEJ,MAAMgI,EAAQ,IAAInL,GAAAC,EAAOkD,EAAc5hB,EAAG4hB,EAAc3hB,EAAGqkB,GAAgBxF,EAAQ1e,EAAU0H,UAAUiX,SAASD,MAAM8K,GAAQ5K,GAAMxgB,KAAKoL,UAAUoV,KACnJ,IAAK,MAAMre,KAAYme,EAAO,CAC1B,MAAM,GAAErb,EAAE,GAAEC,EAAE,SAAEC,IAAa,QAAaie,EAAejhB,EAASZ,UAAW0T,EAAI9P,GAAY,EAAGzC,EAAWsoB,EAAe9b,MAAO8W,GAAUF,EAAgBpjB,EAAYuS,EACvK,GAAIA,GAAK6Q,EAAe,CACpBmF,EAAQ3hB,UAAU7C,KAAKtE,GACvB,MAAMkpB,EAAOppB,EAAA,EAAOZ,OAAO4D,EAAIC,GAC/BmmB,EAAKxoB,OAASmjB,EACd7jB,EAASO,SAASD,MAAM4oB,EAC5B,CACJ,CACJ,MACK,IAAyB,IAArBJ,EAAQpmB,SAAoB,CACjC,IAAK,MAAM1C,KAAY8oB,EAAQ3hB,UAC3BnH,EAASO,SAASD,MAAMN,EAASQ,iBAErCsoB,EAAQ3hB,UAAY,EACxB,GAEJtJ,KAAKsrB,cAAgB,KACjB,MAAM1pB,EAAY5B,KAAK4B,UAAW6R,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAAUukB,EAAgBlkB,EAAUkC,OAAOqnB,qBACjHrF,GAAiBA,EAAgB,IAAMrS,GAG5CzT,KAAKurB,gBAAgB9X,EAAUqS,EAAe,IAAI7F,GAAAC,EAAOzM,EAASjS,EAAGiS,EAAShS,EAAGqkB,GAAe,EAEpG9lB,KAAKurB,gBAAkB,CAAChqB,EAAUukB,EAAe1F,EAAMoL,KACnD,MAAM5pB,EAAY5B,KAAK4B,UAAW0e,EAAQ1e,EAAU0H,UAAUiX,SAASD,MAAMF,GAAOI,GAAMxgB,KAAKoL,UAAUoV,KAAKwK,EAAiBppB,EAAUuF,cAAcvC,cAAcwC,MAAM6jB,QAC3K,GAAKD,EAGL,IAAK,MAAM7oB,KAAYme,EAAO,CAC1B,MAAM,GAAErb,EAAE,GAAEC,EAAE,SAAEC,IAAa,QAAahD,EAASZ,SAAUA,GAAWmB,GAAY8oB,GAAYtc,OAAS8b,EAAe9b,OAAS8b,EAAe7hB,OAAQsiB,GAAgB,SAAM,QAAUT,EAAetL,OAAzB,CAAiC,EAAIva,EAAW2gB,GAAiBpjB,EAAU,EAAGsoB,EAAelT,UAAW4I,EAAUze,EAAA,EAAOZ,OAAoB,IAAb8D,EAAiBzC,EAAYuC,EAAKE,EAAYsmB,EAA4B,IAAbtmB,EAAiBzC,EAAYwC,EAAKC,EAAYsmB,GACzZtpB,EAASZ,SAAS4C,MAAMuc,EAC5B,GAEJ1gB,KAAK0rB,uBAAyB,CAACrW,EAAUqM,KACrC,MAAM9f,EAAY5B,KAAK4B,UAAWqpB,EAAUrpB,EAAUuF,cAAcvC,cAAcwC,MAAM6jB,QACxF,IAAKA,EACD,OAEJ,MAAM3K,EAAQpQ,SAASyR,iBAAiBtM,GACnCiL,EAAMzd,QAGXyd,EAAMsB,SAASC,IACX,MAAMC,EAAOD,EAAMxH,EAAUzY,EAAUkC,OAAOE,WAAYgB,EAAM,CAC5DxD,GAAIsgB,EAAKC,WAAaD,EAAKE,YAAc,GAAK3H,EAC9C5Y,GAAIqgB,EAAKG,UAAYH,EAAKI,aAAe,GAAK7H,GAC/CyL,EAAiBhE,EAAKE,YAAc,EAAK3H,EAAS+F,EAAoB,WAAbsB,EAAI7O,KAC1D,IAAIoN,GAAAC,EAAOlb,EAAIxD,EAAGwD,EAAIvD,EAAGqkB,GACzB,IAAIzE,GAAA,EAAUS,EAAKC,WAAa1H,EAASyH,EAAKG,UAAY5H,EAASyH,EAAKE,YAAc3H,EAASyH,EAAKI,aAAe7H,GAAU8H,EAAO8I,EAAQ9I,KAAMqJ,GAAa,QAAQrJ,EAAML,GACnL9hB,KAAKurB,gBAAgBvmB,EAAK8gB,EAAe1F,EAAMoL,EAAW,GAC5D,EAENxrB,KAAK2N,QAAUrF,EACV1G,EAAUqpB,UACXrpB,EAAUqpB,QAAU,CAAE3hB,UAAW,KAErCtJ,KAAK0G,gBAAmBC,IACpB,MAAM9E,EAAU7B,KAAK4B,UAAUuF,cAAewkB,EAAc9pB,EAAQ+C,cAAcwC,MAAM6jB,QACxF,IAAKU,GAAwB,YAAThlB,EAChB,OAEC/E,EAAUqpB,UACXrpB,EAAUqpB,QAAU,CAAE3hB,UAAW,KAErC,MAAM2hB,EAAUrpB,EAAUqpB,QAC1BA,EAAQpmB,UAAW,EACnBomB,EAAQ/hB,MAAQ,EAChB,IAAK,MAAM/G,KAAYP,EAAUqpB,QAAQ3hB,UAChCtJ,KAAKoL,UAAUjJ,IAGpBA,EAASO,SAASD,MAAMN,EAASQ,iBAErCsoB,EAAQ3hB,UAAY,GACpB2hB,EAAQpL,QAAS,EACjBhV,YAAW,KACHjJ,EAAUS,YAGd4oB,EAAQpmB,UAAW,EAAK,GACF,IAAvB8mB,EAAYjf,SAAgB,CAEvC,CACA,KAAAwG,GACA,CACA,IAAAhM,GACI,MAAMtF,EAAY5B,KAAK4B,UAAWqpB,EAAUrpB,EAAUuF,cAAcvC,cAAcwC,MAAM6jB,QACnFA,IAGLrpB,EAAUkC,OAAOqnB,oBAAsBF,EAAQ9lB,SAAWvD,EAAUkC,OAAOE,WAC/E,CACA,cAAMmP,GACF,MAAMvR,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAeyZ,EAAkBhf,EAAUgD,cAAc8W,SAAW,MAAgBxT,EAASrG,EAAQ+C,cAAcsD,OAAQ0jB,EAAQ1jB,EAAOyL,QAASkN,EAAe+K,EAAM7c,OAAQ+R,EAAY8K,EAAMjlB,KAAMklB,EAAQ3jB,EAAOC,QAAS4Y,EAAe8K,EAAM9c,OAAQiS,EAAY6K,EAAMllB,KAAMwb,EAAOja,EAAOka,MACrVxB,GAAmBC,IAAgB,QAAU,UAAWC,GACxD9gB,KAAKsrB,gBAEAvK,IAAgB,QAAU,UAAWC,GAC1ChhB,KAAK+qB,iBAGL,QAAe,UAAW5I,GAAM,CAAC9M,EAAUqM,IAAQ1hB,KAAK0rB,uBAAuBrW,EAAUqM,IAEjG,CACA,SAAAtW,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAexC,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiB/C,EAAQ+C,eAAesD,OAAQia,EAAOja,EAAOka,MAAOwJ,EAAQ1jB,EAAOyL,QAASkY,EAAQ3jB,EAAOC,QAASqjB,GAAa,QAAiB,UAAWrJ,GAC9R,KAAMqJ,GAAeI,EAAM7c,QAAUpK,EAAMpD,UAAcsqB,EAAM9c,QAAUpK,EAAMsC,eAC3E,OAAO,EAEX,MAAM6Z,EAAY8K,EAAMjlB,KAAMqa,EAAY6K,EAAMllB,KAChD,OAAO,QAAU,UAAWma,KAAc,QAAU,UAAWE,IAAcwK,CACjF,CACA,eAAA5X,CAAgB/R,KAAYwJ,GACnBxJ,EAAQopB,UACTppB,EAAQopB,QAAU,IAAIJ,IAE1B,IAAK,MAAM9iB,KAAUsD,EACjBxJ,EAAQopB,QAAQ9qB,KAAK4H,GAAQkjB,QAErC,CACA,KAAApX,GACA,ECvJGzL,eAAe0jB,GAA+BxjB,EAAQC,GAAU,SAC7DD,EAAOyL,cAAc,mBAAoBnS,GAAc,IAAIkpB,GAASxiB,EAAQ1G,IAAY2G,EAClG,CCHO,MAAMwjB,GACT,WAAAhsB,GACIC,KAAKmJ,OAAS,EACdnJ,KAAKC,OAAS,GAClB,CACA,IAAAE,CAAKC,GACIA,SAGeC,IAAhBD,EAAK+I,SACLnJ,KAAKmJ,OAAS/I,EAAK+I,aAEH9I,IAAhBD,EAAKH,SACLD,KAAKC,OAASG,EAAKH,QAE3B,ECbG,MAAM+rB,WAAepZ,EACxB,WAAA7S,CAAY6B,GACRpB,MAAMoB,EACV,CACA,KAAAsR,CAAM/Q,EAAUoO,EAAOyV,GACf7jB,EAASwX,KAAKC,UAAYoM,IAG9B7jB,EAASwX,KAAKxQ,OAAS,EAC3B,CACA,IAAAjC,GACI,MAAMtF,EAAY5B,KAAK4B,UAAW+X,EAAO/X,EAAUuF,cAAcvC,cAAcwC,MAAMuS,KAChFA,IAGL/X,EAAUkC,OAAOmoB,eAAiBtS,EAAK1Z,OAAS2B,EAAUkC,OAAOE,WACrE,CACA,cAAMmP,GACN,CACA,SAAA/H,CAAUjJ,GACN,MAAMP,EAAY5B,KAAK4B,UAAW+C,EAAQ/C,EAAUgD,cAAcD,MAAOuD,GAAU/F,GAAUyC,eAAiBhD,EAAUuF,cAAcvC,eAAesD,OACrJ,OAAOA,EAAOyL,QAAQ5E,UAAYpK,EAAMpD,WAAY,QAAU,OAAQ2G,EAAOyL,QAAQhN,KACzF,CACA,eAAAiN,CAAgB/R,KAAYwJ,GACnBxJ,EAAQ8X,OACT9X,EAAQ8X,KAAO,IAAIoS,IAEvB,IAAK,MAAMhkB,KAAUsD,EACjBxJ,EAAQ8X,KAAKxZ,KAAK4H,GAAQ4R,KAElC,CACA,KAAA9F,CAAM1R,GACFA,EAASwX,KAAKC,SAAU,EACxB,MAAMhY,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAesM,EAAW7R,EAAUgD,cAAcD,MAAMpD,SAAUtB,EAAS2B,EAAUkC,OAAOmoB,eAAgBC,EAAcrqB,EAAQ+C,cAAcwC,MAAMuS,KAC5M,IAAKuS,IAAgBjsB,GAAUA,EAAS,IAAMwT,EAC1C,OAEJ,MAAM0Y,EAAchqB,EAASW,cAAespB,GAAO,QAAY3Y,EAAU0Y,GAAcE,EAAkBD,EAAOnsB,EAAQqa,EAAa4R,EAAY/iB,QAAQ,KAAEwQ,GAASxX,EAChKiqB,EAAOnsB,IAGX0Z,EAAKC,SAAU,EACfD,EAAKxQ,OAASkjB,EAAkB/R,EACpC,EC5CGlS,eAAekkB,GAA4BhkB,EAAQC,GAAU,SAC1DD,EAAOyL,cAAc,gBAAiBnS,GAAc,IAAIoqB,GAAOpqB,IAAY2G,EACrF,CCHO,MAAMgkB,GAAmB,CAAC,EAAG,EAAG,EAAG,GAC7BC,GAAiB,CAAC,EAAG,EAAG,EAAG,GCDjC,MAAMC,GACT,WAAA1sB,CAAY2sB,GACR1sB,KAAKgF,IAAM,EACXhF,KAAKI,KAAO,IAAIusB,kBAAkBD,EACtC,CACA,SAAAE,CAAU1jB,GACN,MAAMkf,EAAQpoB,KAAKI,KAAKgoB,MAAMpoB,KAAKgF,IAAKhF,KAAKgF,IAAMkE,GAEnD,OADAlJ,KAAKgF,KAAOojB,EAAMvlB,OACXulB,EAAMyE,QAAO,CAACC,EAAKC,IAASD,EAAME,OAAOC,aAAaF,IAAO,GACxE,CACA,QAAAG,GACI,OAAOltB,KAAKI,KAAKJ,KAAKgF,MAC1B,CACA,YAAAmoB,GAEI,OADAntB,KAAKgF,KAAO,EACLhF,KAAKI,KAAKJ,KAAKgF,IAAM,IAAMhF,KAAKI,KAAKJ,KAAKgF,IAAM,IAAM,EACjE,CACA,aAAAooB,GACI,IAAIC,EAAc,GAAIjsB,EAAO,EAC7B,EAAG,CACCA,EAAOpB,KAAKI,KAAKJ,KAAKgF,OACtB,IAAK,IAAIkE,EAAQ9H,IAAQ8H,GAAS,EAAGmkB,GAAeL,OAAOC,aAAajtB,KAAKI,KAAKJ,KAAKgF,SAE3F,OAAkB,IAAT5D,GACT,OAAOisB,CACX,CACA,gBAAAC,GACI,IAAIlsB,EAAO,EAAGmsB,EAAM,EACpB,IAAK,IAAI/iB,EAAS,EAA6C,KAAzCpJ,EAAOpB,KAAKI,KAAKJ,KAAKgF,IAAMwF,IAAgBA,GAAUpJ,EAAO,EAC/EmsB,GAAOnsB,EAEX,MAAMosB,EAAY,IAAIC,WAAWF,GACjC,IAAK,IAAIxiB,EAAI,EAAsC,KAAlC3J,EAAOpB,KAAKI,KAAKJ,KAAKgF,SACnC,IAAK,IAAIkE,EAAQ9H,IAAQ8H,GAAS,EAAGskB,EAAUziB,KAAO/K,KAAKI,KAAKJ,KAAKgF,QAGzE,OAAOwoB,CACX,CACA,aAAAE,GACI,KAA+B,IAAxB1tB,KAAKI,KAAKJ,KAAKgF,KAAYhF,KAAKgF,KAAOhF,KAAKI,KAAKJ,KAAKgF,KAAO,GAEpEhF,KAAKgF,KACT,ECxCJ,SAAS2oB,GAAgBC,EAAY1kB,GACjC,MAAM2kB,EAAS,GACf,IAAK,IAAI9iB,EAAI,EAAGA,EAAI7B,EAAO6B,IACvB8iB,EAAOpnB,KAAK,CACRjC,EAAGopB,EAAWxtB,KAAKwtB,EAAW5oB,KAC9BT,EAAGqpB,EAAWxtB,KAAKwtB,EAAW5oB,IAAM,GACpCV,EAAGspB,EAAWxtB,KAAKwtB,EAAW5oB,IAAM,KAExC4oB,EAAW5oB,KAAO,EAEtB,OAAO6oB,CACX,CACAzlB,eAAe0lB,GAAoBF,EAAYG,EAAKC,EAAeC,GAC/D,OAAQL,EAAWV,YACf,KAAK,IAAK,CACN,MAAMgB,EAAQH,EAAII,OAAOH,GAAc,IACvCJ,EAAW5oB,MACX,MAAMopB,EAAaR,EAAWV,WAC9BgB,EAAMG,YAA2B,IAAbD,KAAuB,EAC3CF,EAAMI,gBAA+B,GAAbF,KAAuB,EAC/CF,EAAMK,mBAA0C,KAAP,EAAbH,GAC5B,MAAMI,EAAwC,KAAP,EAAbJ,GAC1BF,EAAMzS,UAAwC,GAA5BmS,EAAWT,eAC7B,MAAMsB,EAAoBb,EAAWV,WACjCsB,GACAP,EAAqBQ,GAEzBb,EAAW5oB,MACX,KACJ,CACA,KAAK,IAAK,CACN4oB,EAAW5oB,MACX,MAAM0pB,EAAuB,CACzBC,WAAYf,EAAWhB,UAAU,GACjCgC,mBAAoBhB,EAAWhB,UAAU,GACzCxsB,KAAMwtB,EAAWN,oBAErBS,EAAIc,sBAAsBpoB,KAAKioB,GAC/B,KACJ,CACA,KAAK,IACDX,EAAIe,SAASroB,KAAK,CAACunB,GAAc,GAAQJ,EAAWR,kBACpD,MAEJ,KAAK,EACD,GAAoC,IAAhCW,EAAIgB,iBAAiBlsB,OACrB,MAAM,IAAImsB,UAAU,mDAExBpB,EAAW5oB,MACX+oB,EAAII,OAAOH,GAAc,IAAQiB,cAAgB,CAC7CtmB,KAAMilB,EAAWT,eACjBtkB,IAAK+kB,EAAWT,eAChB/pB,MAAOwqB,EAAWT,eAClB9pB,OAAQuqB,EAAWT,eACnB+B,SAAU,CACN9rB,MAAOwqB,EAAWT,eAClB9pB,OAAQuqB,EAAWT,gBAEvBgC,gBAAiBvB,EAAWV,WAC5BkC,gBAAiBxB,EAAWV,WAC5BmC,KAAMzB,EAAWR,iBAErB,MAEJ,QACIQ,EAAWF,gBACX,MAEZ,CACAtlB,eAAeknB,GAAgB1B,EAAYG,EAAKwB,EAAUvB,EAAeC,EAAsBuB,GAC3F,MAAMtB,EAAQH,EAAII,OAAOH,GAAc,IACvCE,EAAMvlB,KAAOilB,EAAWT,eACxBe,EAAMrlB,IAAM+kB,EAAWT,eACvBe,EAAM9qB,MAAQwqB,EAAWT,eACzBe,EAAM7qB,OAASuqB,EAAWT,eAC1B,MAAMiB,EAAaR,EAAWV,WAAYuC,EAA8C,OAAV,IAAbrB,GAA6BsB,EAAyC,MAAV,GAAbtB,GAChHF,EAAMyB,SAAmC,MAAV,GAAbvB,GAClBF,EAAM0B,UAAyB,GAAbxB,KAAuB,EACzC,MAAMyB,EAAkB,GAAyB,GAAL,EAAbzB,GAC3BqB,IACAvB,EAAM4B,gBAAkBnC,GAAgBC,EAAYiC,IAExD,MAAME,EAAYxoB,IACd,MAAM,EAAE/C,EAAC,EAAED,EAAC,EAAED,IAAOmrB,EAAsBvB,EAAM4B,gBAAkB/B,EAAIgB,kBAAkBxnB,GACzF,MAAO,CAAE/C,IAAGD,IAAGD,IAAG6H,EAAG5E,IAAU0mB,EAAqB,MAASsB,MAAe/qB,EAAID,EAAID,GAAK,GAAK,EAAK,IAAK,EAEtG0rB,EAAQ,MACV,IACI,OAAO,IAAIC,UAAU/B,EAAM9qB,MAAO8qB,EAAM7qB,OAAQ,CAAE6sB,WAAY,QAClE,CACA,MAAOC,GACH,GAAIA,aAAiBC,cAA+B,mBAAfD,EAAM7uB,KACvC,OAAO,KAEX,MAAM6uB,CACV,CACH,EAVa,GAWd,GAAa,MAATH,EACA,MAAM,IAAIhB,UAAU,8BAExB,MAAMqB,EAAczC,EAAWV,WAAYoD,EAAY1C,EAAWN,mBAAoBiD,EAAY,GAAKF,EACjGG,EAAW,CAACxrB,EAAKuoB,KACnB,MAAMkD,EAAUzrB,IAAQ,EAAG0rB,EAAe,EAAN1rB,EACpC,OAAUsrB,EAAUG,IAAYH,EAAUG,EAAU,IAAM,IAAMH,EAAUG,EAAU,IAAM,KACnF,GAAKlD,GAAO,GAAMmD,KACrBA,CAAO,EAEf,GAAIhB,EAAgB,CAChB,IAAK,IAAIiB,EAAO,EAAGvvB,EAAOivB,EAAc,EAAGrrB,EAAM,EAAG4rB,EAAM,CAAC,CAAC,IAAKC,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACzF,GAAItE,GAAiBsE,GAAQ3C,EAAM7qB,OAC/B,IAAK,IAAIytB,EAAW,EAAGC,EAAY,IAAK,CACpC,MAAMC,EAAOL,EAGb,GAFAA,EAAOH,EAASxrB,EAAK5D,GACrB4D,GAAO5D,EAAO,EACVuvB,IAASJ,EAAW,CACpBnvB,EAAOivB,EAAc,EACrBO,EAAI/tB,OAAS0tB,EAAY,EACzB,IAAK,IAAIxlB,EAAI,EAAGA,EAAI6lB,EAAI/tB,OAAQkI,IAC5B6lB,EAAI7lB,GAAKA,EAAIwlB,EAAY,CAACxlB,GAAK,EAEvC,KACK,CACG4lB,GAAQC,EAAI/tB,OACZ+tB,EAAInqB,KAAKmqB,EAAII,GAAMC,OAAOL,EAAII,GAAM,KAE/BA,IAAST,GACdK,EAAInqB,KAAKmqB,EAAII,GAAMC,OAAOL,EAAID,GAAM,KAExC,IAAK,IAAI5lB,EAAI,EAAGA,EAAI6lB,EAAID,GAAM9tB,OAAQkI,IAAK,CACvC,MAAM,EAAEvG,EAAC,EAAED,EAAC,EAAED,EAAC,EAAE6H,GAAM4jB,EAASa,EAAID,GAAM5lB,IAC1CilB,EAAM5vB,KAAKwR,IAAI,CAACpN,EAAGD,EAAGD,EAAG6H,GAAIogB,GAAiBsE,GAAQ3C,EAAM9qB,MACxDopB,GAAeqE,GAAQE,EACtBD,GAA0B,EAAd5C,EAAM9qB,QACvB0tB,GAAY,CAChB,CACIF,EAAI/tB,SAAW,GAAKzB,GAAQA,EAAO,IACnCA,GAER,CACA,GAAI0vB,IAA2B,EAAd5C,EAAM9qB,OAAa2tB,EAAY,KAC5CA,IACIxE,GAAiBsE,GAAQrE,GAAeqE,GAAQE,GAAa7C,EAAM7qB,QACnE,KAGZ,CAEJmsB,IAAmB5B,EAAW5oB,KAAO4oB,EAAWxtB,KAAKyC,OAAS,GAAImrB,GAAc,GAAS,EAAGgC,EAAO,CAAExuB,EAAG0sB,EAAMvlB,KAAMlH,EAAGysB,EAAMrlB,KAAO,CAAEzF,MAAO2qB,EAAI3qB,MAAOC,OAAQ0qB,EAAI1qB,QACxK,CACA6qB,EAAM8B,MAAQA,EACd9B,EAAMgD,aAAeC,kBAAkBnB,EAC3C,KACK,CACD,IAAK,IAAIW,EAAO,EAAGvvB,EAAOivB,EAAc,EAAGrrB,EAAM,EAAG4rB,EAAM,CAAC,CAAC,IAAKE,GAAY,IAAK,CAC9E,MAAME,EAAOL,EAGb,GAFAA,EAAOH,EAASxrB,EAAK5D,GACrB4D,GAAO5D,EACHuvB,IAASJ,EAAW,CACpBnvB,EAAOivB,EAAc,EACrBO,EAAI/tB,OAAS0tB,EAAY,EACzB,IAAK,IAAIxlB,EAAI,EAAGA,EAAI6lB,EAAI/tB,OAAQkI,IAC5B6lB,EAAI7lB,GAAKA,EAAIwlB,EAAY,CAACxlB,GAAK,EAEvC,KACK,CACD,GAAI4lB,IAASJ,EAAY,EACrB,MAEAI,GAAQC,EAAI/tB,OACZ+tB,EAAInqB,KAAKmqB,EAAII,GAAMC,OAAOL,EAAII,GAAM,KAE/BA,IAAST,GACdK,EAAInqB,KAAKmqB,EAAII,GAAMC,OAAOL,EAAID,GAAM,KAExC,IAAK,IAAI5lB,EAAI,EAAGA,EAAI6lB,EAAID,GAAM9tB,OAAQkI,IAAK,CACvC,MAAM,EAAEvG,EAAC,EAAED,EAAC,EAAED,EAAC,EAAE6H,GAAM4jB,EAASa,EAAID,GAAM5lB,IAC1CilB,EAAM5vB,KAAKwR,IAAI,CAACpN,EAAGD,EAAGD,EAAG6H,GAAK2kB,GAAY,EAC9C,CACIF,EAAI/tB,QAAU,GAAKzB,GAAQA,EAAO,IAClCA,GAER,CACJ,CACA8sB,EAAM8B,MAAQA,EACd9B,EAAMgD,aAAeC,kBAAkBnB,GACvCR,KAAoB5B,EAAW5oB,IAAM,GAAK4oB,EAAWxtB,KAAKyC,OAAQmrB,GAAc,GAAS,EAAGE,EAAM8B,MAAO,CAAExuB,EAAG0sB,EAAMvlB,KAAMlH,EAAGysB,EAAMrlB,KAAO,CAAEzF,MAAO2qB,EAAI3qB,MAAOC,OAAQ0qB,EAAI1qB,QAC9K,CACJ,CACA+E,eAAegpB,GAAWxD,EAAYG,EAAKwB,EAAUvB,EAAeC,EAAsBuB,GACtF,OAAQ5B,EAAWV,YACf,KAAK,GACD,OAAO,EACX,KAAK,SACKoC,GAAgB1B,EAAYG,EAAKwB,EAAUvB,EAAeC,EAAsBuB,GACtF,MACJ,KAAK,SACK1B,GAAoBF,EAAYG,EAAKC,EAAeC,GAC1D,MACJ,QACI,MAAM,IAAIe,UAAU,yBAE5B,OAAO,CACX,CACO,SAASqC,GAAiBtD,GAC7B,IAAK,MAAMuD,KAAavD,EAAIc,sBACxB,GAAIyC,EAAU3C,WAAa2C,EAAU1C,qBAAuB,cAG5D,OAAO0C,EAAUlxB,KAAK,IAAMkxB,EAAUlxB,KAAK,IAAM,GAErD,OAAOmxB,GACX,CACOnpB,eAAeopB,GAAUC,EAAQjC,EAAkBD,GACjDA,IACDA,GAAW,GACf,MAAMmC,QAAYC,MAAMF,GACxB,IAAKC,EAAIE,IAAqB,MAAfF,EAAIhW,OACf,MAAM,IAAIsT,UAAU,kBAExB,MAAM6C,QAAeH,EAAII,cACnB/D,EAAM,CACR3qB,MAAO,EACPC,OAAQ,EACR0uB,UAAW,EACXC,SAAU,EACVC,iBAAkB,EAClB9D,OAAQ,GACRwB,UAAU,EACVZ,iBAAkB,GAClBmD,gBAAiB,IAAIjC,UAAU,EAAG,EAAG,CAAEC,WAAY,SACnDpB,SAAU,GACVD,sBAAuB,IACxBjB,EAAa,IAAInB,GAAW,IAAIE,kBAAkBkF,IACrD,GAAgC,WAA5BjE,EAAWhB,UAAU,GACrB,MAAM,IAAItX,MAAM,4BAEpByY,EAAI3qB,MAAQwqB,EAAWT,eACvBY,EAAI1qB,OAASuqB,EAAWT,eACxB,MAAMiB,EAAaR,EAAWV,WAAYiF,EAA+C,OAAV,IAAb/D,GAClEL,EAAIiE,UAAyB,IAAb5D,KAAuB,EACvCL,EAAI4B,SAAgC,KAAP,EAAbvB,GAChB,MAAMgE,EAAmB,GAAyB,GAAL,EAAbhE,GAAsBiE,EAAuBzE,EAAWV,WACxFa,EAAIkE,iBAAmBrE,EAAWV,WACL,IAAzBa,EAAIkE,mBACJlE,EAAIkE,kBAAoBlE,EAAIkE,iBAAmB,IAAO,IAEtDE,IACApE,EAAIgB,iBAAmBpB,GAAgBC,EAAYwE,IAEvD,MAAMF,EAAkB,MACpB,IACI,OAAO,IAAIjC,UAAUlC,EAAI3qB,MAAO2qB,EAAI1qB,OAAQ,CAAE6sB,WAAY,QAC9D,CACA,MAAOC,GACH,GAAIA,aAAiBC,cAA+B,mBAAfD,EAAM7uB,KACvC,OAAO,KAEX,MAAM6uB,CACV,CACH,EAVuB,GAWxB,GAAuB,MAAnB+B,EACA,MAAM,IAAI5c,MAAM,8BAEpB,MAAM,EAAE9Q,EAAC,EAAED,EAAC,EAAED,GAAMypB,EAAIgB,iBAAiBsD,GACzCH,EAAgB9xB,KAAKwR,IAAIugB,EAAuB,CAAC3tB,EAAGD,EAAGD,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,IAC3E,IAAK,IAAIyG,EAAI,EAAGA,EAAImnB,EAAgB9xB,KAAKyC,OAAQkI,GAAK,EAClDmnB,EAAgB9xB,KAAKkyB,WAAWvnB,EAAG,EAAGA,GAE1CgjB,EAAImE,gBAAkBA,EACtB,IAAIK,GAAc,EAAGC,GAAsB,EAAM/D,GAAqB,EACtE,MAAMgE,EAAiBC,IACfA,IACAF,GAAsB,GAEnBD,GAELtE,EAAwB0E,IACV,MAAZA,IACAlE,EAAoBkE,GAEjBlE,GAEX,IACI,GACQ+D,IACAzE,EAAII,OAAO1nB,KAAK,CACZkC,KAAM,EACNE,IAAK,EACLzF,MAAO,EACPC,OAAQ,EACRirB,eAAgB,EAChB0B,MAAO,IAAIC,UAAU,EAAG,EAAG,CAAEC,WAAY,SACzCjB,cAAe,KACfV,oBAAoB,EACpB9S,UAAW,EACXkU,UAAU,EACVG,gBAAiB,GACjBF,SAAU,EACVvB,WAAY,IAEhBkE,IACA9D,GAAqB,EACrB+D,GAAsB,gBAEbpB,GAAWxD,EAAYG,EAAKwB,EAAUkD,EAAexE,EAAsBuB,IAC5FzB,EAAII,OAAOtrB,SACX,IAAK,MAAMqrB,KAASH,EAAII,OAAQ,CAC5B,GAAID,EAAMK,oBAA0C,IAApBL,EAAMzS,UAAiB,CACnDsS,EAAIgE,UAAYa,IAChB,KACJ,CACA7E,EAAIgE,WAAa7D,EAAMzS,SAC3B,CACA,OAAOsS,CACX,CACA,MAAOoC,GACH,GAAIA,aAAiBnB,UACjB,MAAM,IAAI1Z,MAAM,6BAA6Bid,MAAepC,EAAM0C,YAEtE,MAAM1C,CACV,CACJ,CCjUA,MAAM2C,GAAoB,uGAC1B,SAASC,GAAgBC,EAAYnyB,EAAOI,GACxC,MAAM,QAAEgyB,GAAYD,EACpB,IAAKC,EACD,MAAO,GAEX,MAAMC,GAAa,QAAgBryB,EAAOI,GAC1C,GAAIgyB,EAAQ7hB,SAAS,QACjB,OAAO6hB,EAAQxd,QAAQqd,IAAmB,IAAMI,IAEpD,MAAMC,EAAeF,EAAQzrB,QAAQ,KACrC,MAAO,GAAGyrB,EAAQG,UAAU,EAAGD,YAAuBD,KAAcD,EAAQG,UAAUD,IAC1F,CACO/qB,eAAeirB,GAAUrD,GAC5B,OAAO,IAAIsD,SAASC,IAChBvD,EAAMwD,SAAU,EAChB,MAAMC,EAAM,IAAIC,MAChB1D,EAAM/f,QAAUwjB,EAChBA,EAAIE,iBAAiB,QAAQ,KACzB3D,EAAMwD,SAAU,EAChBD,GAAS,IAEbE,EAAIE,iBAAiB,SAAS,KAC1B3D,EAAM/f,aAAU5P,EAChB2vB,EAAMG,OAAQ,EACdH,EAAMwD,SAAU,GAChB,UAAYrD,MAAM,GAAG,wBAA8BH,EAAMjoB,UACzDwrB,GAAS,IAEbE,EAAIG,IAAM5D,EAAMjoB,MAAM,GAE9B,CACOK,eAAeyrB,GAAa7D,GAC/B,GAAmB,QAAfA,EAAMnd,KAAV,CAIAmd,EAAMwD,SAAU,EAChB,IACIxD,EAAM8D,cAAgBtC,GAAUxB,EAAMjoB,QACtCioB,EAAM+D,aAAe1C,GAAiBrB,EAAM8D,UAAY,EAC7B,IAAvB9D,EAAM+D,eACN/D,EAAM+D,aAAenB,IAE7B,CACA,MACI5C,EAAMG,OAAQ,CAClB,CACAH,EAAMwD,SAAU,CAZhB,YAFUH,GAAUrD,EAexB,CACO5nB,eAAe4rB,GAAiBhE,GACnC,GAAmB,QAAfA,EAAMnd,KAEN,kBADMwgB,GAAUrD,GAGpBA,EAAMwD,SAAU,EAChB,MAAMS,QAAiBtC,MAAM3B,EAAMjoB,QAC9BksB,EAASrC,GAKV5B,EAAMiD,cAAgBgB,EAAS5E,SAJ/B,UAAYc,MAAM,GAAG,yBACrBH,EAAMG,OAAQ,GAKlBH,EAAMwD,SAAU,CACpB,CACO,SAASU,GAAkBlE,EAAOM,EAAWzvB,EAAOsB,GACvD,MAAMgyB,EAAiBpB,GAAgB/C,EAAOnvB,EAAOsB,EAASlB,SAASP,OAAS,GAAI0zB,EAAW,CAC3FvzB,QACAktB,IAAKuC,EAAUvC,IACf3tB,KAAM,IACC4vB,EACHiD,QAASkB,GAEbE,QAAQ,EACRpR,MAAOqN,EAAUltB,MAAQktB,EAAUjtB,OACnCixB,aAAchE,EAAUgE,cAAgBhE,EAAUiE,cAClDxsB,OAAQuoB,EAAUsD,KAEtB,OAAO,IAAIN,SAASC,IAChB,MAAMiB,EAAM,IAAIC,KAAK,CAACN,GAAiB,CAAEthB,KAAM,kBAAoB6hB,EAASC,KAAOxd,OAAOwd,KAAOxd,OAAOyd,WAAazd,OAAQ0d,EAAMH,EAAOI,gBAAgBN,GAAMf,EAAM,IAAIC,MAC1KD,EAAIE,iBAAiB,QAAQ,KACzBS,EAASC,QAAS,EAClBD,EAASnkB,QAAUwjB,EACnBF,EAAQa,GACRM,EAAOK,gBAAgBF,EAAI,IAE/BpB,EAAIE,iBAAiB,SAASvrB,UAC1BssB,EAAOK,gBAAgBF,GACvB,MAAMG,EAAO,IACNhF,EACHG,OAAO,EACPqD,SAAS,SAEPH,GAAU2B,GAChBZ,EAASC,QAAS,EAClBD,EAASnkB,QAAU+kB,EAAK/kB,QACxBsjB,EAAQa,EAAS,IAErBX,EAAIG,IAAMiB,CAAG,GAErB,CCrGO,MAAMI,GACT,WAAAl1B,CAAYuI,GACRtI,KAAKk1B,eAAiB9sB,MAAO4qB,IACzB,IAAKhzB,KAAK2N,QAAQ0lB,UACd,MAAM,IAAI/d,MAAM,GAAG,2CAEjBtV,KAAK2N,QAAQ0lB,UAAU,CACzBtF,IAAKiF,EAAWjF,IAChBzsB,KAAM0xB,EAAW1xB,KACjBgzB,aAActB,EAAWsB,cAAgBtB,EAAWuB,gBAAiB,EACrEX,IAAKZ,EAAWY,KAClB,EAEN5zB,KAAK2N,QAAUrF,CACnB,CACA,QAAA6sB,CAASnF,GACAhwB,KAAK2N,QAAQynB,SACdp1B,KAAK2N,QAAQynB,OAAS,IAE1Bp1B,KAAK2N,QAAQynB,OAAO3uB,KAAKupB,EAC7B,CACA,IAAAzqB,CAAKC,EAASrD,EAAUlC,EAAQgB,EAASsP,GACrC,MAAMyf,EAAQ7tB,EAAS6tB,MAAO/f,EAAU+f,GAAO/f,QAC/C,GAAK+f,EAAL,CAIA,GADAxqB,EAAQ6vB,YAAcp0B,EAClB+uB,EAAMjC,KAAOiC,EAAM8D,QAAS,CAC5B,MAAMwB,EAAkB,IAAIC,gBAAgBvF,EAAM8D,QAAQ1wB,MAAO4sB,EAAM8D,QAAQzwB,QAASmyB,EAAmBF,EAAgBG,WAAW,MACtI,IAAKD,EACD,MAAM,IAAIlgB,MAAM,6CAEpBkgB,EAAiBE,sBAAwB,MACzCF,EAAiBG,uBAAwB,EACzCH,EAAiBI,UAAU,EAAG,EAAGN,EAAgBlyB,MAAOkyB,EAAgBjyB,aAC1ChD,IAA1B8B,EAAS4xB,eACT5xB,EAAS4xB,aAAe/D,EAAM+D,cAAgB,GAElD,IAAIxB,EAAapwB,EAAS0zB,UAAY,EACtC,MAAM7wB,EAAM,CAAExD,EAA0B,IAAtBwuB,EAAM8D,QAAQ1wB,MAAa3B,EAA2B,IAAvBuuB,EAAM8D,QAAQzwB,QAAgB6qB,EAAQ8B,EAAM8D,QAAQ3F,OAAOoE,GAI5G,QAHyBlyB,IAArB8B,EAAS2zB,UACT3zB,EAAS2zB,QAAU,IAElB5H,EAAMgD,OACP,OAGJ,OADA1rB,EAAQuwB,MAAM91B,EAAS+vB,EAAM8D,QAAQ1wB,MAAOnD,EAAS+vB,EAAM8D,QAAQzwB,QAC3D6qB,EAAMI,gBACV,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACDkH,EAAiBQ,UAAU9H,EAAMgD,OAAQhD,EAAMvlB,KAAMulB,EAAMrlB,KAC3DrD,EAAQwwB,UAAUV,EAAiBtwB,EAAIxD,EAAGwD,EAAIvD,GAC9C+zB,EAAiBI,UAAU,EAAG,EAAGN,EAAgBlyB,MAAOkyB,EAAgBjyB,QACxE,MACJ,KAAK,EACDmyB,EAAiBQ,UAAU9H,EAAMgD,OAAQhD,EAAMvlB,KAAMulB,EAAMrlB,KAC3DrD,EAAQwwB,UAAUV,EAAiBtwB,EAAIxD,EAAGwD,EAAIvD,GAC9C,MACJ,KAAK,EACD+zB,EAAiBQ,UAAU9H,EAAMgD,OAAQhD,EAAMvlB,KAAMulB,EAAMrlB,KAC3DrD,EAAQwwB,UAAUV,EAAiBtwB,EAAIxD,EAAGwD,EAAIvD,GAC9C+zB,EAAiBI,UAAU,EAAG,EAAGN,EAAgBlyB,MAAOkyB,EAAgBjyB,QAC1B,IAA1C2sB,EAAM8D,QAAQ/E,iBAAiBlsB,OAC/B2yB,EAAiBS,aAAajG,EAAM8D,QAAQ3F,OAAO,GAAG6B,MAAOhrB,EAAIxD,EAAI0sB,EAAMvlB,KAAM3D,EAAIvD,EAAIysB,EAAMrlB,KAG/F2sB,EAAiBS,aAAajG,EAAM8D,QAAQ5B,gBAAiBltB,EAAIxD,EAAGwD,EAAIvD,GAE5E,MACJ,KAAK,EACD,CACI,MAAMy0B,EAAoBV,EAAiBW,aAAa,EAAG,EAAGb,EAAgBlyB,MAAOkyB,EAAgBjyB,QACrGmyB,EAAiBQ,UAAU9H,EAAMgD,OAAQhD,EAAMvlB,KAAMulB,EAAMrlB,KAC3DrD,EAAQwwB,UAAUV,EAAiBtwB,EAAIxD,EAAGwD,EAAIvD,GAC9C+zB,EAAiBI,UAAU,EAAG,EAAGN,EAAgBlyB,MAAOkyB,EAAgBjyB,QACxEmyB,EAAiBS,aAAaC,EAAmB,EAAG,EACxD,CACA,MAGR,GADA/zB,EAAS2zB,SAAWvlB,EAAM7P,MACtByB,EAAS2zB,QAAU5H,EAAMzS,UAAW,CAEpC,GADAtZ,EAAS2zB,SAAW5H,EAAMzS,YACpB8W,GAAcvC,EAAM8D,QAAQ3F,OAAOtrB,OAAQ,CAC7C,KAAMV,EAAS4xB,cAAgB,EAC3B,OAEJxB,EAAa,EACbiD,EAAiBI,UAAU,EAAG,EAAGN,EAAgBlyB,MAAOkyB,EAAgBjyB,OAC5E,CACAlB,EAAS0zB,SAAWtD,CACxB,CACA/sB,EAAQuwB,MAAM/F,EAAM8D,QAAQ1wB,MAAQnD,EAAQ+vB,EAAM8D,QAAQzwB,OAASpD,EACvE,MACK,GAAIgQ,EAAS,CACd,MAAMgT,EAAQ+M,EAAM/M,MAAOje,EAAM,CAC7BxD,GAAIvB,EACJwB,GAAIxB,GAERuF,EAAQwwB,UAAU/lB,EAASjL,EAAIxD,EAAGwD,EAAIvD,EAAY,EAATxB,EAAsB,EAATA,EAAcgjB,EACxE,CACAzd,EAAQ6vB,YAAc,CA9EtB,CA+EJ,CACA,aAAAva,GACI,OAAO,EACX,CACA,UAAM5T,CAAKtF,GACP,MAAMC,EAAUD,EAAUuF,cAC1B,GAAKtF,EAAQu0B,SAAYp2B,KAAK2N,QAAQ0lB,UAGtC,IAAK,MAAM/C,KAAazuB,EAAQu0B,cACtBp2B,KAAK2N,QAAQ0lB,UAAU/C,EAErC,CACA,SAAA+F,CAAUl0B,GACN,GAAuB,UAAnBA,EAAS8K,OAAwC,WAAnB9K,EAAS8K,MACvC,OAECjN,KAAK2N,QAAQynB,SACdp1B,KAAK2N,QAAQynB,OAAS,IAE1B,MAAM9E,EAAYnuB,EAAS6Y,UAAWgV,EAAQhwB,KAAK2N,QAAQynB,OAAO/uB,MAAMC,GAAMA,EAAEhF,OAASgvB,EAAUhvB,MAAQgF,EAAEyB,SAAWuoB,EAAUsD,MAC7H5D,GACDhwB,KAAKk1B,eAAe5E,GAAWla,MAAK,KAChCpW,KAAKq2B,UAAUl0B,EAAS,GAGpC,CACA,YAAA4Y,CAAanZ,EAAWO,GACpB,GAAuB,UAAnBA,EAAS8K,OAAwC,WAAnB9K,EAAS8K,MACvC,OAECjN,KAAK2N,QAAQynB,SACdp1B,KAAK2N,QAAQynB,OAAS,IAE1B,MAAMA,EAASp1B,KAAK2N,QAAQynB,OAAQ9E,EAAYnuB,EAAS6Y,UAAWna,EAAQsB,EAASiI,eAAgB4lB,EAAQoF,EAAO/uB,MAAMC,GAAMA,EAAEhF,OAASgvB,EAAUhvB,MAAQgF,EAAEyB,SAAWuoB,EAAUsD,MACpL,IAAK5D,EACD,OAEJ,MAAMsE,EAAehE,EAAUgE,cAAgBhE,EAAUiE,eAAiBvE,EAAMsE,aAC5EtE,EAAMwD,QACN3oB,YAAW,KACP7K,KAAK+a,aAAanZ,EAAWO,EAAS,IAI9C,WACI,IAAIiyB,EAEAA,EADApE,EAAMiD,SAAWpyB,QACAqzB,GAAkBlE,EAAOM,EAAWzvB,EAAOsB,GAGjD,CACPtB,QACAT,KAAM4vB,EACN/f,QAAS+f,EAAM/f,QACf8d,IAAKiC,EAAMjC,IACX+F,QAAS9D,EAAM8D,QACfC,aAAc/D,EAAM+D,aACpBM,QAAQ,EACRpR,MAAOqN,EAAUltB,OAASktB,EAAUjtB,OAASitB,EAAUltB,MAAQktB,EAAUjtB,OAAS2sB,EAAM/M,OAAS,EACjGqR,aAAcA,EACdvsB,OAAQuoB,EAAUsD,KAGrBQ,EAASnR,QACVmR,EAASnR,MAAQ,GAErB,MAAMnd,EAAOwqB,EAAUxqB,MAAQ3D,EAAS2D,KAAMwwB,EAAQhG,EAAUgG,OAASn0B,EAASm0B,MAAOtD,EAAa,CAClGhD,MAAOoE,EACPtuB,OACAwwB,SAEJn0B,EAAS6tB,MAAQgD,EAAWhD,MAC5B7tB,EAAS2D,KAAOktB,EAAWltB,KAC3B3D,EAASm0B,MAAQtD,EAAWsD,KAC/B,EA9BD,EA+BJ,ECtLG,MAAMC,GACT,WAAAx2B,GACIC,KAAK4zB,IAAM,GACX5zB,KAAK+tB,KAAM,CACf,CACA,IAAA5tB,CAAKC,GACIA,SAGYC,IAAbD,EAAK2tB,MACL/tB,KAAK+tB,IAAM3tB,EAAK2tB,UAEA1tB,IAAhBD,EAAKiD,SACLrD,KAAKqD,OAASjD,EAAKiD,aAELhD,IAAdD,EAAKkB,OACLtB,KAAKsB,KAAOlB,EAAKkB,WAEKjB,IAAtBD,EAAKk0B,eACLt0B,KAAKs0B,aAAel0B,EAAKk0B,mBAEZj0B,IAAbD,EAAKwzB,MACL5zB,KAAK4zB,IAAMxzB,EAAKwzB,UAEDvzB,IAAfD,EAAKgD,QACLpD,KAAKoD,MAAQhD,EAAKgD,OAE1B,EC1BG,MAAMozB,GACT,WAAAz2B,CAAYuI,GACRtI,KAAK4H,GAAK,iBACV5H,KAAK2N,QAAUrF,CACnB,CACA,SAAAT,GACI,MAAO,CAAC,CACZ,CACA,WAAAC,CAAYjG,EAASkG,GACjB,IAAKA,IAAWA,EAAOquB,QACnB,OAECv0B,EAAQu0B,UACTv0B,EAAQu0B,QAAU,IAEtB,MAAMK,EAAiB50B,EAAQu0B,QAC/B,IAAK,MAAMvU,KAAQ9Z,EAAOquB,QAAS,CAC/B,MAAMM,EAAWD,EAAepwB,MAAMC,GAAMA,EAAEhF,OAASugB,EAAKvgB,MAAQgF,EAAEstB,MAAQ/R,EAAK+R,MACnF,GAAI8C,EACAA,EAASv2B,KAAK0hB,OAEb,CACD,MAAMuU,EAAU,IAAIG,GACpBH,EAAQj2B,KAAK0hB,GACb4U,EAAehwB,KAAK2vB,EACxB,CACJ,CACJ,CACA,WAAApuB,GACI,OAAO,CACX,EC3BJ,SAAS2uB,GAAqBruB,GACtBA,EAAO+qB,YAGX/qB,EAAO+qB,UAAYjrB,MAAOhI,IACtB,IAAKA,EAAKkB,OAASlB,EAAKwzB,IACpB,MAAM,IAAIte,MAAM,GAAG,kCAKvB,GAHKhN,EAAO8sB,SACR9sB,EAAO8sB,OAAS,KAEhB9sB,EAAO8sB,OAAO/uB,MAAMC,GAAMA,EAAEhF,OAASlB,EAAKkB,MAAQgF,EAAEyB,SAAW3H,EAAKwzB,MAGxE,IACI,MAAM5D,EAAQ,CACVjC,IAAK3tB,EAAK2tB,MAAO,EACjBzsB,KAAMlB,EAAKkB,MAAQlB,EAAKwzB,IACxB7rB,OAAQ3H,EAAKwzB,IACb/gB,KAAMzS,EAAKwzB,IAAIR,UAAUhzB,EAAKwzB,IAAI/wB,OAAS,GAC3CstB,OAAO,EACPqD,SAAS,EACTc,aAAcl0B,EAAKk0B,aACnBrR,MAAO7iB,EAAKgD,OAAShD,EAAKiD,OAASjD,EAAKgD,MAAQhD,EAAKiD,YAAShD,GAElEiI,EAAO8sB,OAAO3uB,KAAKupB,GACnB,MAAM4G,EAAYx2B,EAAK2tB,IAAM8F,GAAezzB,EAAKk0B,aAAeN,GAAmBX,SAC7EuD,EAAU5G,EACpB,CACA,MACI,MAAM,IAAI1a,MAAM,GAAG,SAAelV,EAAKkB,MAAQlB,EAAKwzB,gBACxD,GAER,CACOxrB,eAAe8sB,GAAe5sB,EAAQC,GAAU,GACnDouB,GAAqBruB,GACrB,MAAMuuB,EAAY,IAAIL,GAAqBluB,SACrCA,EAAOE,UAAUquB,EAAWtuB,SAC5BD,EAAOoJ,SAAS,CAAC,QAAS,UAAW,IAAIujB,GAAY3sB,GAASC,EACxE,CC1CO,MAAMuuB,WAAkBv2B,EAAA,GAC3B,WAAAR,GACIS,QACAR,KAAKyc,MAAO,CAChB,CACA,IAAAtc,CAAKC,GACIA,IAGLI,MAAML,KAAKC,QACOC,IAAdD,EAAKqc,OACLzc,KAAKyc,KAAOrc,EAAKqc,MAEzB,ECbG,MAAMsa,WAAqBx2B,EAAA,GAC9B,WAAAR,GACIS,QACAR,KAAK0Q,OAAOsmB,aAAe,KAC3Bh3B,KAAKyc,MAAO,CAChB,CACA,IAAAtc,CAAKC,GACIA,IAGLI,MAAML,KAAKC,QACOC,IAAdD,EAAKqc,OACLzc,KAAKyc,KAAOrc,EAAKqc,MAEzB,ECbG,MAAMwa,GACT,WAAAl3B,GACIC,KAAKkJ,MAAQ,EACblJ,KAAKyM,MAAQ,IAAIqqB,GACjB92B,KAAK0M,SAAW,IAAIqqB,EACxB,CACA,IAAA52B,CAAKC,GACIA,SAGcC,IAAfD,EAAK8I,QACLlJ,KAAKkJ,MAAQ9I,EAAK8I,OAEtBlJ,KAAKyM,MAAMtM,KAAKC,EAAKqM,OACrBzM,KAAK0M,SAASvM,KAAKC,EAAKsM,UAC5B,ECfG,MAAMwqB,GACT,WAAAn3B,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAMP,EAAY5B,KAAK4B,UAAWqJ,EAAmB9I,EAASN,QAASs1B,EAAclsB,EAAiB+B,KACjGmqB,IAGLh1B,EAAS6K,KAAO,CACZP,MAAO7K,EAAUkC,OAAOG,cAChB,QAAckzB,EAAY1qB,MAAM/L,QAAUy2B,EAAY1qB,MAAMgQ,KAAO,GAAI,WACvE7a,EAAUkC,OAAOG,aACjB,IACF,EACNwX,UAAW,EACX/O,SAAU9K,EAAUkC,OAAOG,cACnB,QAAckzB,EAAYzqB,SAAShM,QAAUy2B,EAAYzqB,SAAS+P,KAAO,GAAI,WAC7E7a,EAAUkC,OAAOG,aACjB,IACF,EACNuX,KAAM,EACNtS,MAAOiuB,EAAYjuB,OAEnB/G,EAAS6K,KAAKN,UAAY,IAC1BvK,EAAS6K,KAAKN,UAAY,GAE1BvK,EAAS6K,KAAK9D,OAAS,IACvB/G,EAAS6K,KAAK9D,OAAS,GAEvB/G,EAAS6K,OACT7K,EAAS+S,SAAW/S,EAAS6K,KAAKP,MAAQ,GAElD,CACA,SAAArB,CAAUjJ,GACN,OAAQA,EAASE,SACrB,CACA,WAAAyF,CAAYjG,KAAYwJ,GACfxJ,EAAQmL,OACTnL,EAAQmL,KAAO,IAAIiqB,IAEvB,IAAK,MAAMlvB,KAAUsD,EACjBxJ,EAAQmL,KAAK7M,KAAK4H,GAAQiF,KAElC,CACA,MAAAxB,CAAOrJ,EAAUoO,GACb,IAAKvQ,KAAKoL,UAAUjJ,KAAcA,EAAS6K,KACvC,OAEJ,MAAMA,EAAO7K,EAAS6K,KACtB,IAAIoqB,GAAc,EAClB,GAAIj1B,EAAS+S,SAAU,CAEnB,GADAlI,EAAKyO,WAAalL,EAAM7P,QACpBsM,EAAKyO,WAAatZ,EAAS6K,KAAKP,OAOhC,OANA2qB,GAAc,EACdj1B,EAAS+S,UAAW,EACpBlI,EAAKyO,UAAY,EACjBzO,EAAKwO,KAAO,CAKpB,CACA,IAAuB,IAAnBxO,EAAKN,SACL,OAEJ,GAAIvK,EAAS+S,SACT,OAQJ,GANIkiB,EACApqB,EAAKwO,KAAO,EAGZxO,EAAKwO,MAAQjL,EAAM7P,MAEnBsM,EAAKwO,KAAOxO,EAAKN,SACjB,OAMJ,GAJAM,EAAKwO,KAAO,EACRrZ,EAAS6K,KAAK9D,MAAQ,GACtB/G,EAAS6K,KAAK9D,QAEU,IAAxB/G,EAAS6K,KAAK9D,MAEd,YADA/G,EAASjB,UAGb,MAAMoB,EAAatC,KAAK4B,UAAUI,OAAOZ,KAAMi2B,GAAa,QAAc,EAAG/0B,EAAWc,OAAQk0B,GAAc,QAAc,EAAGh1B,EAAWc,OAC1IjB,EAASZ,SAASC,GAAI,QAAc61B,GACpCl1B,EAASZ,SAASE,GAAI,QAAc61B,GACpCn1B,EAAS+S,UAAW,EACpBlI,EAAKyO,UAAY,EACjBzO,EAAKwO,KAAO,EACZrZ,EAAS0R,QACT,MAAMsjB,EAAch1B,EAASN,QAAQmL,KACjCmqB,IACAnqB,EAAKP,MAAiD,KAAzC,QAAc0qB,EAAY1qB,MAAM/L,OAC7CsM,EAAKN,SAAuD,KAA5C,QAAcyqB,EAAYzqB,SAAShM,OAE3D,ECnGG0H,eAAemvB,GAAgBjvB,EAAQC,GAAU,SAC9CD,EAAOoD,mBAAmB,QAAS9J,GAAc,IAAIs1B,GAAYt1B,IAAY2G,EACvF,CCHO,MAAMivB,GACT,IAAAjyB,CAAKC,EAASrD,EAAUlC,GACpB,MAAM+a,EAAY7Y,EAAS6Y,UAC3BxV,EAAQiyB,QAAQx3B,EAAS,EAAG,GAC5BuF,EAAQkyB,OAAOz3B,EAAS,EAAG,GAC3BuF,EAAQmyB,QAAU3c,GAAW4c,KAAO,MACxC,CACA,aAAA9c,GACI,OAAO,CACX,ECRG1S,eAAeyvB,GAAcvvB,EAAQC,GAAU,SAC5CD,EAAOoJ,SAAS,OAAQ,IAAI8lB,GAAcjvB,EACpD,CCFO,MAAMuvB,GACT,IAAA5wB,GACA,CACA,SAAAkE,CAAUjJ,GACN,QAAS,YACJA,EAASE,WACVF,EAASP,UAAUuF,cAAcvC,cAAcsD,OAAOyL,QAAQokB,SAAShpB,MAC/E,CACA,IAAAzE,CAAKnI,GACD,MAAMP,EAAYO,EAASP,UAAWC,EAAUD,EAAUuF,cAAe6wB,EAAkBn2B,EAAQ+C,cAAcsD,OAAOyL,QAAQokB,SAChI,IAAI,YAAYC,EAAgBjpB,OAC5B,OAEJ,MAAMkpB,EAAgBD,EAAgBhS,MAAOvS,EAAW7R,EAAUgD,cAAcD,MAAMpD,SACtF,IAAKkS,EACD,OAEJ,MAAMnR,EAAaV,EAAUI,OAAOZ,KAAM82B,EAAe,CACrD12B,EAAGc,EAAWc,MAAQ,EACtB3B,EAAGa,EAAWe,OAAS,GACxB80B,EAAiBH,EAAgBI,OAAQjvB,EAAShH,EAASkD,YAAc4yB,EAAeI,EAAiB,CACxG72B,GAAIiS,EAASjS,EAAI02B,EAAa12B,GAAK2H,EACnC1H,GAAIgS,EAAShS,EAAIy2B,EAAaz2B,GAAK0H,IACpC,OAAEqB,GAAWrI,EAChBqI,EAAOhJ,IAAM62B,EAAe72B,EAAIgJ,EAAOhJ,GAAK22B,EAC5C3tB,EAAO/I,IAAM42B,EAAe52B,EAAI+I,EAAO/I,GAAK02B,CAChD,EC1BG/vB,eAAekwB,GAAkBhwB,EAAQC,GAAU,SAChDD,EAAOqS,SAAS,YAAY,IAAM,IAAImd,IAAiBvvB,EACjE,CCHO,MAAMgwB,GACT,WAAAx4B,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAK6S,KAAO,WAChB,ECHG,MAAM,WAAkB0lB,GAC3B,WAAAx4B,CAAY6B,GACRpB,MAAMoB,EACV,CACA,KAAAsR,GACA,CACA,IAAAhM,GACA,CACA,cAAMiM,CAASoT,GACX,MAAM3kB,EAAY5B,KAAK4B,UAAWuD,EAAWohB,EAAGziB,OAAO00B,iBAAmB52B,EAAUkC,OAAO00B,gBAAiB1Q,EAAOvB,EAAGzjB,cAAewd,EAAQ1e,EAAU0H,UAAUiX,SAASiD,YAAYsE,EAAM3iB,GAC5L,IAAK,MAAMqhB,KAAMlG,EAAO,CACpB,GAAIiG,IAAOC,IAAOA,EAAG3kB,QAAQyI,KAAK5F,QAAQqK,QAAUyX,EAAGnkB,WAAamkB,EAAGtR,SACnE,SAEJ,MAAM6S,EAAOvB,EAAG1jB,eAAe,GAAEmC,EAAE,GAAEC,IAAO,QAAa4iB,EAAMC,GAAO0Q,EAASlS,EAAG1kB,QAAQyI,KAAK5F,QAAQ+zB,OAAQC,EAAKzzB,GAAiB,IAAXwzB,EAAOj3B,GAAWm3B,EAAKzzB,GAAiB,IAAXuzB,EAAOh3B,GAAWm3B,EAAWpS,EAAGplB,KAAKV,MAAQ6lB,EAAGnlB,KAAKV,MAAOm4B,EAAW,EAAID,EAClOrS,EAAG7jB,SAASlB,GAAKk3B,EAAKE,EACtBrS,EAAG7jB,SAASjB,GAAKk3B,EAAKC,EACtBpS,EAAG9jB,SAASlB,GAAKk3B,EAAKG,EACtBrS,EAAG9jB,SAASjB,GAAKk3B,EAAKE,CAC1B,CACJ,CACA,SAAAztB,CAAUjJ,GACN,OAAOA,EAASN,QAAQyI,KAAK5F,QAAQqK,MACzC,CACA,KAAA8E,GACA,ECzBGzL,eAAe0wB,GAAgCxwB,EAAQC,GAAU,SAC9DD,EAAOyL,cAAc,oBAAqBnS,GAAc,IAAI,GAAUA,IAAY2G,EAC5F,CCFA,SAASwwB,GAAaxS,EAAIyS,EAAIxS,EAAIyS,EAAI1oB,EAAOvM,GACzC,MAAMmF,GAAS,QAAOod,EAAG1kB,QAAQq3B,WAAWC,OAAOjqB,MAAQqB,EAAMpH,OAAU,GAAI,EAAG8vB,GAClF1S,EAAGnlB,KAAKV,OAASyI,EAAS,EAC1Bqd,EAAGplB,KAAKV,OAASyI,EACb8vB,GAAMj1B,IACNwiB,EAAGplB,KAAKV,MAAQ,EAChB8lB,EAAGtlB,UAEX,CACO,SAASi4B,GAAO5S,EAAIC,EAAIjW,EAAOvM,GAClC,MAAMg1B,EAAKzS,EAAGlhB,YAAa4zB,EAAKzS,EAAGnhB,iBACxBhF,IAAP24B,QAA2B34B,IAAP44B,EACpB1S,EAAGrlB,eAESb,IAAP24B,QAA2B34B,IAAP44B,EACzBzS,EAAGtlB,eAESb,IAAP24B,QAA2B34B,IAAP44B,IACrBD,GAAMC,EACNF,GAAaxS,EAAIyS,EAAIxS,EAAIyS,EAAI1oB,EAAOvM,GAGpC+0B,GAAavS,EAAIyS,EAAI1S,EAAIyS,EAAIzoB,EAAOvM,GAGhD,CCzBA,MAAMo1B,GAAkB5Y,SACQngB,IAAxBmgB,EAAE6Y,oBACF7Y,EAAE6Y,mBAAoB,QAAc7Y,EAAE3e,QAAQq3B,WAAWphB,WAEzD0I,EAAE9d,SAASG,OAAS2d,EAAE6Y,oBACtB7Y,EAAE9d,SAASG,OAAS2d,EAAE6Y,kBAC1B,EAEG,SAAStc,GAAOwJ,EAAIC,IACvB,SAAa,QAA6BD,IAAK,QAA6BC,IAC5E4S,GAAe7S,GACf6S,GAAe5S,EACnB,CCZO,SAAStlB,GAAQqlB,EAAIC,GAIxB,GAHKD,EAAG3b,aAAgB4b,EAAG5b,aACvBmS,GAAOwJ,EAAIC,QAEQnmB,IAAnBkmB,EAAGlhB,kBAAgDhF,IAAnBmmB,EAAGnhB,YACnCkhB,EAAGrlB,eAEF,QAAuBb,IAAnBkmB,EAAGlhB,kBAAgDhF,IAAnBmmB,EAAGnhB,YACxCmhB,EAAGtlB,eAEF,QAAuBb,IAAnBkmB,EAAGlhB,kBAAgDhF,IAAnBmmB,EAAGnhB,YAA2B,CACnE,MAAMi0B,EAAU/S,EAAGlhB,aAAemhB,EAAGnhB,YAAcmhB,EAAKD,EACxD+S,EAAQp4B,SACZ,CACJ,CCZO,SAASq4B,GAAiBhT,EAAIC,EAAIjW,EAAOvM,GAC5C,OAAQuiB,EAAG1kB,QAAQq3B,WAAWvyB,MAC1B,IAAK,SACDwyB,GAAO5S,EAAIC,EAAIjW,EAAOvM,GACtB,MAEJ,IAAK,SACD+Y,GAAOwJ,EAAIC,GACX,MAEJ,IAAK,UACDtlB,GAAQqlB,EAAIC,GACZ,MAGZ,CChBO,MAAMgT,WAAiBjB,GAC1B,WAAAx4B,CAAY6B,GACRpB,MAAMoB,EACV,CACA,KAAAsR,GACA,CACA,IAAAhM,GACA,CACA,cAAMiM,CAASoT,EAAIhW,GACf,GAAIgW,EAAGlkB,WAAakkB,EAAGrR,SACnB,OAEJ,MAAMtT,EAAY5B,KAAK4B,UAAWkmB,EAAOvB,EAAGzjB,cAAe22B,EAAUlT,EAAGlhB,YAAaib,EAAQ1e,EAAU0H,UAAUiX,SAASiD,YAAYsE,EAAgB,EAAV2R,GAC5I,IAAK,MAAMjT,KAAMlG,EAAO,CACpB,GAAIiG,IAAOC,IACNA,EAAG3kB,QAAQq3B,WAAWnqB,QACvBwX,EAAG1kB,QAAQq3B,WAAWvyB,OAAS6f,EAAG3kB,QAAQq3B,WAAWvyB,MACrD6f,EAAGnkB,WACHmkB,EAAGtR,SACH,SAEJ,MAAM6S,EAAOvB,EAAG1jB,cAAe42B,EAAUlT,EAAGnhB,YAC5C,GAAIrC,KAAKsU,IAAItU,KAAK22B,MAAM7R,EAAK8R,GAAK52B,KAAK22B,MAAM5R,EAAK6R,IAAMH,EAAUC,EAC9D,SAEJ,MAAMtN,GAAO,QAAYtE,EAAMC,GAAO8R,EAAQJ,EAAUC,EACpDtN,EAAOyN,GAGXN,GAAiBhT,EAAIC,EAAIjW,EAAO3O,EAAUkC,OAAOE,WACrD,CACJ,CACA,SAAAoH,CAAUjJ,GACN,OAAOA,EAASN,QAAQq3B,WAAWnqB,MACvC,CACA,KAAA8E,GACA,ECrCGzL,eAAe0xB,GAAmCxxB,EAAQC,GAAU,SACjED,EAAOyL,cAAc,uBAAwBnS,GAAc,IAAI43B,GAAS53B,IAAY2G,EAC9F,CCFO,MAAMwxB,WAAmB9Z,GAAAC,EAC5B,WAAAngB,CAAYyB,EAAGC,EAAGxB,EAAQqC,GACtB9B,MAAMgB,EAAGC,EAAGxB,GACZD,KAAKsC,WAAaA,EAClBtC,KAAKsC,WAAa,IAAKA,EAC3B,CACA,QAAAyjB,CAASiU,GACL,MAAM,MAAE52B,EAAK,OAAEC,GAAWrD,KAAKsC,YACzB,EAAEd,EAAC,EAAEC,GAAMu4B,EACjB,OAAQx5B,MAAMulB,SAASiU,IACnBx5B,MAAMulB,SAAS,CAAEvkB,EAAGA,EAAI4B,EAAO3B,OAC/BjB,MAAMulB,SAAS,CAAEvkB,EAAGA,EAAI4B,EAAO3B,EAAGA,EAAI4B,KACtC7C,MAAMulB,SAAS,CAAEvkB,IAAGC,EAAGA,EAAI4B,GACnC,CACA,UAAA42B,CAAW7O,GACP,GAAI5qB,MAAMy5B,WAAW7O,GACjB,OAAO,EAEX,MAAM8O,EAAO9O,EAAO+O,EAAS/O,EAAO9M,EAAS,CACzC9c,EAAG4pB,EAAM7pB,SAASC,EAAIxB,KAAKsC,WAAWc,MACtC3B,EAAG2pB,EAAM7pB,SAASE,EAAIzB,KAAKsC,WAAWe,QAE1C,QAAsBhD,IAAlB85B,EAAOl6B,OAAsB,CAC7B,MAAMm6B,EAAe,IAAIna,GAAAC,EAAO5B,EAAO9c,EAAG8c,EAAO7c,EAAmB,EAAhB04B,EAAOl6B,QAC3D,OAAOO,MAAMy5B,WAAWG,EAC5B,CACK,QAAkB/5B,IAAd65B,EAAK94B,KAAoB,CAC9B,MAAMi5B,EAAS,IAAIhZ,GAAA,EAAU/C,EAAO9c,EAAG8c,EAAO7c,EAAqB,EAAlBy4B,EAAK94B,KAAKgC,MAA8B,EAAnB82B,EAAK94B,KAAKiC,QAChF,OAAO7C,MAAMy5B,WAAWI,EAC5B,CACA,OAAO,CACX,EC/BG,MAAMC,GACT,WAAAv6B,GACIC,KAAKu6B,KAAO,EACZv6B,KAAKa,MAAQ,IAAIC,EAAAC,EACjBf,KAAKa,MAAMH,MAAQ,OACnBV,KAAK+O,QAAS,CAClB,CACA,IAAA5O,CAAKC,GACIA,SAGaC,IAAdD,EAAKm6B,OACLv6B,KAAKu6B,KAAOn6B,EAAKm6B,MAErBv6B,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,YAC9BR,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,QAE3B,EClBG,MAAMyrB,GACT,WAAAz6B,GACIC,KAAK+O,QAAS,EACd/O,KAAKy6B,UAAY,CACrB,CACA,IAAAt6B,CAAKC,GACIA,SAGcC,IAAfD,EAAKS,QACLb,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,aAElCR,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEA1O,IAAnBD,EAAKq6B,YACLz6B,KAAKy6B,UAAYr6B,EAAKq6B,gBAELp6B,IAAjBD,EAAKa,UACLjB,KAAKiB,QAAUb,EAAKa,SAE5B,ECnBG,MAAMy5B,GACT,WAAA36B,GACIC,KAAK0oB,OAAQ,EACb1oB,KAAKa,MAAQ,IAAIC,EAAAC,EACjBf,KAAKa,MAAMH,MAAQ,OACnBV,KAAK2oB,SAAU,EACf3oB,KAAKmF,SAAW,IAChBnF,KAAK+O,QAAS,EACd/O,KAAKy6B,UAAY,EACjBz6B,KAAKiB,QAAU,EACfjB,KAAK26B,OAAS,IAAIL,GAClBt6B,KAAK46B,UAAY,IAAIJ,GACrBx6B,KAAKoD,MAAQ,EACbpD,KAAKqe,MAAO,CAChB,CACA,IAAAle,CAAKC,GACIA,SAGWC,IAAZD,EAAKwH,KACL5H,KAAK4H,GAAKxH,EAAKwH,SAEAvH,IAAfD,EAAKsoB,QACL1oB,KAAK0oB,MAAQtoB,EAAKsoB,OAEtB1oB,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,YAC7BR,IAAjBD,EAAKuoB,UACL3oB,KAAK2oB,QAAUvoB,EAAKuoB,cAEFtoB,IAAlBD,EAAK+E,WACLnF,KAAKmF,SAAW/E,EAAK+E,eAEL9E,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEA1O,IAAnBD,EAAKq6B,YACLz6B,KAAKy6B,UAAYr6B,EAAKq6B,gBAELp6B,IAAjBD,EAAKa,UACLjB,KAAKiB,QAAUb,EAAKa,SAExBjB,KAAK26B,OAAOx6B,KAAKC,EAAKu6B,QACtB36B,KAAK46B,UAAUz6B,KAAKC,EAAKw6B,gBACNv6B,IAAfD,EAAKgD,QACLpD,KAAKoD,MAAQhD,EAAKgD,YAEJ/C,IAAdD,EAAKie,OACLre,KAAKqe,KAAOje,EAAKie,MAEzB,ECjDJ,SAASwc,GAAgB/S,EAAMC,EAAM+S,EAAax4B,EAAY+b,GAC1D,MAAM,GAAEpZ,EAAE,GAAEC,EAAE,SAAEC,IAAa,QAAa2iB,EAAMC,GAChD,IAAK1J,GAAQlZ,GAAY21B,EACrB,OAAO31B,EAEX,MAAM41B,EAAW,CACbv5B,EAAGwB,KAAKsU,IAAIrS,GACZxD,EAAGuB,KAAKsU,IAAIpS,IACb81B,EAAgB,CACfx5B,EAAGwB,KAAKG,IAAI43B,EAASv5B,EAAGc,EAAWc,MAAQ23B,EAASv5B,GACpDC,EAAGuB,KAAKG,IAAI43B,EAASt5B,EAAGa,EAAWe,OAAS03B,EAASt5B,IAEzD,OAAOuB,KAAKkJ,KAAK8uB,EAAcx5B,GAAK,EAAIw5B,EAAcv5B,GAAK,EAC/D,CACO,MAAMw5B,WAAe1C,GACxB,WAAAx4B,CAAY6B,GACRpB,MAAMoB,GACN5B,KAAKk7B,UAAa3U,IACd,IAAKA,EAAG1kB,QAAQ8T,MACZ,OAEJ,MAAM/T,EAAY5B,KAAKm7B,cAAezR,EAAenD,EAAG1kB,QAAQ8T,MAChE,IAAIylB,OAAgC/6B,IAApBqpB,EAAa9hB,GACvBhG,EAAU0H,UAAU+xB,WACpBz5B,EAAU0H,UAAUgyB,YAAYzpB,IAAI6X,EAAa9hB,IACvD,GAAIwzB,EACA,OAEJ,MAAM5R,EAAWE,EAAa7oB,MAC9Bu6B,GAAY,QAAmB5R,EAAUE,EAAahB,MAAOgB,EAAaf,cAClDtoB,IAApBqpB,EAAa9hB,GACbhG,EAAU0H,UAAU+xB,WAAaD,EAGjCx5B,EAAU0H,UAAUgyB,YAAY1pB,IAAI8X,EAAa9hB,GAAIwzB,EACzD,EAEJp7B,KAAKm7B,cAAgBv5B,CACzB,CACA,KAAAsR,GACA,CACA,IAAAhM,GACIlH,KAAKm7B,cAAc7xB,UAAU+xB,gBAAah7B,EAC1CL,KAAKm7B,cAAc7xB,UAAUgyB,YAAc,IAAI9pB,GACnD,CACA,cAAM2B,CAASoT,GACX,IAAKA,EAAG1kB,QAAQ8T,MACZ,OAEJ4Q,EAAG5Q,MAAQ,GACX,MAAMmS,EAAOvB,EAAGzjB,cAAelB,EAAY5B,KAAK4B,UAAWU,EAAaV,EAAUI,OAAOZ,KACzF,GAAI0mB,EAAKtmB,EAAI,GAAKsmB,EAAKrmB,EAAI,GAAKqmB,EAAKtmB,EAAIc,EAAWc,OAAS0kB,EAAKrmB,EAAIa,EAAWe,OAC7E,OAEJ,MAAMk4B,EAAWhV,EAAG1kB,QAAQ8T,MAAOsP,EAAasW,EAASt6B,QAAS65B,EAAcvU,EAAGziB,OAAO03B,eAAiB,EAAGnd,EAAOkd,EAASld,KAAM+M,EAAQ/M,EACtI,IAAI0b,GAAWjS,EAAKtmB,EAAGsmB,EAAKrmB,EAAGq5B,EAAax4B,GAC5C,IAAI2d,GAAAC,EAAO4H,EAAKtmB,EAAGsmB,EAAKrmB,EAAGq5B,GAAcxa,EAAQ1e,EAAU0H,UAAUiX,SAASD,MAAM8K,GAC1F,IAAK,MAAM5E,KAAMlG,EAAO,CACpB,MAAMmb,EAAWjV,EAAG3kB,QAAQ8T,MAC5B,GAAI4Q,IAAOC,IACNiV,GAAU1sB,QACXwsB,EAAS3zB,KAAO6zB,EAAS7zB,IACzB4e,EAAGtR,UACHsR,EAAGnkB,YACFmkB,EAAG7Q,OACJ4Q,EAAG5Q,MAAM+lB,MAAMp1B,GAAMA,EAAEq1B,cAAgBnV,KACvCA,EAAG7Q,MAAM+lB,MAAMp1B,GAAMA,EAAEq1B,cAAgBpV,IACvC,SAEJ,MAAMwB,EAAOvB,EAAG1jB,cAChB,GAAIilB,EAAKvmB,EAAI,GAAKumB,EAAKtmB,EAAI,GAAKsmB,EAAKvmB,EAAIc,EAAWc,OAAS2kB,EAAKtmB,EAAIa,EAAWe,OAC7E,SAEJ,MAAM8B,EAAW01B,GAAgB/S,EAAMC,EAAM+S,EAAax4B,EAAY+b,GAAQod,EAASpd,MACvF,GAAIlZ,EAAW21B,EACX,SAEJ,MAAMvR,GAAe,EAAIpkB,EAAW21B,GAAe7V,EACnDjlB,KAAKk7B,UAAU3U,GACfA,EAAG5Q,MAAMlP,KAAK,CACVk1B,YAAanV,EACbvlB,QAASsoB,GAEjB,CACJ,CACA,SAAAne,CAAUjJ,GACN,QAASA,EAASN,QAAQ8T,OAAO5G,MACrC,CACA,oBAAA6sB,CAAqB/5B,KAAYwJ,GACxBxJ,EAAQ8T,QACT9T,EAAQ8T,MAAQ,IAAI+kB,IAExB,IAAK,MAAM3yB,KAAUsD,EACjBxJ,EAAQ8T,MAAMxV,KAAK4H,GAAQ4N,OAAS5N,GAAQqe,YAAcre,GAAQse,YAE1E,CACA,KAAAxS,GACA,ECnGGzL,eAAeyzB,GAAqBvzB,EAAQC,GAAU,SACnDD,EAAOyL,cAAc,kBAAmBnS,GAAc,IAAIq5B,GAAOr5B,IAAY2G,EACvF,CCFO,SAASuzB,GAAaC,GACzB,IAAIC,GAAQ,EACZ,MAAM,MAAE5U,EAAK,IAAEC,EAAG,YAAE7P,EAAW,QAAEhS,EAAO,WAAElD,EAAU,MAAEc,EAAK,eAAE64B,EAAc,UAAEnT,EAAS,QAAE7nB,EAAO,MAAE0U,GAAUomB,EAC3G,IAAI,QAAY3U,EAAOC,IAAQ7P,GAC3B,SAAShS,EAAS4hB,EAAOC,GACzB2U,GAAQ,OAEP,GAAIrmB,EAAM0I,KAAM,CACjB,IAAI6d,EACAC,EACJ,MAAMC,EAAQ,CACV56B,EAAG6lB,EAAI7lB,EAAIc,EAAWc,MACtB3B,EAAG4lB,EAAI5lB,GAEL46B,GAAK,QAAajV,EAAOgV,GAC/B,GAAIC,EAAGl3B,UAAYqS,EAAa,CAC5B,MAAM8kB,EAAKlV,EAAM3lB,EAAK46B,EAAGn3B,GAAKm3B,EAAGp3B,GAAMmiB,EAAM5lB,EAC7C06B,EAAM,CAAE16B,EAAG,EAAGC,EAAG66B,GACjBH,EAAM,CAAE36B,EAAGc,EAAWc,MAAO3B,EAAG66B,EACpC,KACK,CACD,MAAMC,EAAQ,CACV/6B,EAAG6lB,EAAI7lB,EACPC,EAAG4lB,EAAI5lB,EAAIa,EAAWe,QAEpBm5B,GAAK,QAAapV,EAAOmV,GAC/B,GAAIC,EAAGr3B,UAAYqS,EAAa,CAC5B,MAAM8kB,EAAKlV,EAAM3lB,EAAK+6B,EAAGt3B,GAAKs3B,EAAGv3B,GAAMmiB,EAAM5lB,EACvCi7B,GAAMH,GAAME,EAAGt3B,GAAKs3B,EAAGv3B,IAC7Bi3B,EAAM,CAAE16B,EAAGi7B,EAAIh7B,EAAG,GAClB06B,EAAM,CAAE36B,EAAGi7B,EAAIh7B,EAAGa,EAAWe,OACjC,KACK,CACD,MAAMq5B,EAAQ,CACVl7B,EAAG6lB,EAAI7lB,EAAIc,EAAWc,MACtB3B,EAAG4lB,EAAI5lB,EAAIa,EAAWe,QAEpBs5B,GAAK,QAAavV,EAAOsV,GAC/B,GAAIC,EAAGx3B,UAAYqS,EAAa,CAC5B,MAAM8kB,EAAKlV,EAAM3lB,EAAKk7B,EAAGz3B,GAAKy3B,EAAG13B,GAAMmiB,EAAM5lB,EACvCi7B,GAAMH,GAAMK,EAAGz3B,GAAKy3B,EAAG13B,IAC7Bi3B,EAAM,CAAE16B,EAAGi7B,EAAIh7B,EAAG66B,GAClBH,EAAM,CAAE36B,EAAG06B,EAAI16B,EAAIc,EAAWc,MAAO3B,EAAGy6B,EAAIz6B,EAAIa,EAAWe,OAC/D,CACJ,CACJ,CACI64B,GAAOC,KACP,SAAS32B,EAAS4hB,EAAO8U,IACzB,SAAS12B,EAAS6hB,EAAK8U,GACvBH,GAAQ,EAEhB,CACA,IAAKA,EACD,OAEJx2B,EAAQ8hB,UAAYlkB,EAChB64B,EAAeltB,SACfvJ,EAAQo3B,yBAA2BX,EAAeY,WAEtDr3B,EAAQ+hB,aAAc,QAAgBuB,EAAW7nB,GACjD,MAAM,OAAE05B,GAAWhlB,EACnB,GAAIglB,EAAO5rB,OAAQ,CACf,MAAM+tB,GAAc,QAAgBnC,EAAO95B,OACvCi8B,IACAt3B,EAAQu3B,WAAapC,EAAOJ,KAC5B/0B,EAAQs3B,aAAc,QAAgBA,GAE9C,CACAt3B,EAAQgiB,QACZ,CACO,SAASwV,GAAiBjB,GAC7B,MAAM,QAAEv2B,EAAO,KAAEsiB,EAAI,KAAEC,EAAI,KAAEkV,EAAI,eAAEhB,EAAc,cAAEiB,EAAa,gBAAEC,GAAoBpB,GACtF,SAAav2B,EAASsiB,EAAMC,EAAMkV,GAC9BhB,EAAeltB,SACfvJ,EAAQo3B,yBAA2BX,EAAeY,WAEtDr3B,EAAQK,WAAY,QAAgBq3B,EAAeC,GACnD33B,EAAQM,MACZ,CACO,SAASs3B,GAAWza,GAEvB,OADAA,EAAI0a,MAAK,CAAClxB,EAAG7H,IAAM6H,EAAI7H,IAChBqe,EAAI2a,KAAK,IACpB,CACO,SAASC,GAAiBj0B,EAAWk0B,GACxC,MAAMC,EAAML,GAAW9zB,EAAUiJ,KAAKjM,GAAMA,EAAEsB,MAC9C,IAAI8pB,EAAM8L,EAAW3rB,IAAI4rB,GAKzB,YAJYp9B,IAARqxB,IACAA,GAAM,UACN8L,EAAW5rB,IAAI6rB,EAAK/L,IAEjBA,CACX,CC1FO,MAAMgM,GACT,WAAA39B,CAAY6B,GACR5B,KAAK4B,UAAYA,EACjB5B,KAAK29B,cAAgB,CAACpX,EAAIqX,KACtB,MAAMC,EAAiBtX,EAAG1kB,QAAQ8T,MAClC,IAAKkoB,GAAgB9uB,OACjB,OAEJ,MAAMnN,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAeqf,EAAKoX,EAAKjC,YAAa7T,EAAOvB,EAAGzjB,cAAeilB,EAAOvB,EAAG1jB,cAC/H,IAAI7B,EAAU28B,EAAK38B,QACnBW,EAAUI,OAAOuD,MAAMkiB,IACnB,IAAIqB,EACJ,MAAMgV,EAAUvX,EAAG1kB,QAAQi8B,SAASC,MACpC,GAAID,GAAS/uB,OAAQ,CACjB,MAAMivB,EAAcF,EAAQrD,UAAWwD,GAAa,QAAgBH,EAAQj9B,OAAQq9B,GAAY,UAAcF,EAC1GE,GAAaD,IACbnV,EAAYmV,EACZh9B,GAAU,QAAc68B,EAAQ78B,SAExC,CACA,IAAK6nB,EAAW,CACZ,MAAMsS,OAAkC/6B,IAAtBw9B,EAAej2B,GAC3BhG,EAAU0H,UAAUgyB,YAAYzpB,IAAIgsB,EAAej2B,IACnDhG,EAAU0H,UAAU+xB,WAC1BvS,GAAY,QAAavC,EAAIC,EAAI4U,EACrC,CACA,IAAKtS,EACD,OAEJ,MAAM1lB,EAAQmjB,EAAGziB,OAAOkkB,YAAc,EAAGxQ,EAAc+O,EAAGziB,OAAO03B,eAAiB,GAAG,eAAES,GAAmBp6B,EAC1Gi6B,GAAa,CACTt2B,QAASiiB,EACTrkB,QACAgkB,MAAOU,EACPT,IAAKU,EACLvQ,cACAlV,WAAYV,EAAUI,OAAOZ,KAC7BuU,MAAOkoB,EACP5B,eAAgBA,EAChBnT,YACA7nB,WACF,GACJ,EAENjB,KAAKm+B,kBAAoB,CAAC5X,EAAI6X,EAAOC,KACjC,MAAM3U,EAAenD,EAAG1kB,QAAQ8T,MAChC,IAAK+T,GAAc3a,OACf,OAEJ,MAAMuvB,EAAkB5U,EAAakR,UACrC,IAAK0D,EAAgBvvB,OACjB,OAEJ,MAAMnN,EAAY5B,KAAK4B,UAAWC,EAAUD,EAAUuF,cAAeqf,EAAK4X,EAAMzC,YAAa4C,EAAKF,EAAM1C,YAAawB,EAAkBmB,EAAgBr9B,UAAYm9B,EAAMn9B,QAAUo9B,EAAMp9B,SAAW,EAChMk8B,GAAmB,GAGvBv7B,EAAUI,OAAOuD,MAAMkiB,IACnB,MAAMK,EAAOvB,EAAGzjB,cAAeilB,EAAOvB,EAAG1jB,cAAem6B,EAAOsB,EAAGz7B,cAAe04B,EAAgBjV,EAAGziB,OAAO03B,eAAiB,EAC5H,IAAI,QAAY1T,EAAMC,GAAQyT,IAC1B,QAAYyB,EAAMlV,GAAQyT,IAC1B,QAAYyB,EAAMnV,GAAQ0T,EAC1B,OAEJ,IAAI0B,GAAgB,QAAgBoB,EAAgBz9B,OACpD,IAAKq8B,EAAe,CAChB,MAAM9B,OAAgC/6B,IAApBqpB,EAAa9hB,GACzBhG,EAAU0H,UAAUgyB,YAAYzpB,IAAI6X,EAAa9hB,IACjDhG,EAAU0H,UAAU+xB,WAC1B6B,GAAgB,QAAa3W,EAAIC,EAAI4U,EACzC,CACK8B,GAGLF,GAAiB,CACbx3B,QAASiiB,EACTK,OACAC,OACAkV,OACAhB,eAAgBp6B,EAAQo6B,eACxBiB,gBACAC,mBACF,GACJ,EAENn9B,KAAKw+B,eAAiB,CAAC38B,EAAS0kB,EAAIqX,EAAMa,KACtC,MAAMjY,EAAKoX,EAAKjC,YAChB,IAAM95B,EAAQ8T,OAAOilB,UAAU7rB,SAAUyX,EAAG3kB,QAAQ8T,OAAOilB,UAAU7rB,OACjE,OAEJ,MAAM2vB,EAAWlY,EAAG7Q,OAAOgpB,QAAQr4B,IAC/B,MAAMs4B,EAAW5+B,KAAK6+B,kBAAkBrY,EAAIlgB,EAAEq1B,aAC9C,OAAQnV,EAAG3kB,QAAQ8T,OACfipB,GAAYpY,EAAG3kB,QAAQ8T,MAAM8kB,WAC7BgE,EAAQK,WAAWp1B,GAAMA,EAAEiyB,cAAgBr1B,EAAEq1B,eAAgB,CAAE,IAEvE,GAAK+C,GAAU77B,OAGf,IAAK,MAAMk8B,KAAUL,EAAU,CAC3B,MAAMH,EAAKQ,EAAOpD,YAAaqD,EAAeh/B,KAAKi/B,sBAAsB1Y,EAAIC,EAAI+X,GAC7ES,EAAen9B,EAAQ8T,MAAMilB,UAAUH,WAG3Cz6B,KAAKm+B,kBAAkB5X,EAAIqX,EAAMmB,EACrC,GAEJ/+B,KAAK6+B,kBAAoB,CAACtY,EAAIC,IACnB+W,GAAiB,CAAChX,EAAIC,GAAKxmB,KAAKk/B,OAAOvpB,OAElD3V,KAAKi/B,sBAAwB,CAAC1Y,EAAIC,EAAI+X,IAC3BhB,GAAiB,CAAChX,EAAIC,EAAI+X,GAAKv+B,KAAKk/B,OAAOtE,WAEtD56B,KAAKk/B,OAAS,CACVvpB,MAAO,IAAInE,IACXopB,UAAW,IAAIppB,IAEvB,CACA,YAAA2tB,CAAa35B,EAASrD,GAClB,MAAM,MAAEwT,EAAK,QAAE9T,GAAYM,EAC3B,IAAKwT,GAASA,EAAM9S,QAAU,EAC1B,OAEJ,MAAM47B,EAAU9oB,EAAMgpB,QAAQj1B,GAAM7H,EAAQ8T,OAAS3V,KAAK6+B,kBAAkB18B,EAAUuH,EAAEiyB,cAAgB95B,EAAQ8T,MAAM8kB,YACtH,IAAK,MAAMmD,KAAQa,EACfz+B,KAAKw+B,eAAe38B,EAASM,EAAUy7B,EAAMa,GACzCb,EAAK38B,QAAU,IAAMkB,EAAS2B,OAAOkkB,YAAc,GAAK,GACxDhoB,KAAK29B,cAAcx7B,EAAUy7B,EAGzC,CACA,UAAM12B,GACFlH,KAAKk/B,OAAOvpB,MAAQ,IAAInE,IACxBxR,KAAKk/B,OAAOtE,UAAY,IAAIppB,GAChC,CACA,eAAA4tB,CAAgBj9B,GAEZ,GADAA,EAASwT,MAAQ,IACZxT,EAASN,QAAQ8T,MAClB,OAEJ,MAAMsN,EAAQjjB,KAAK4B,UAAUkC,OAAOE,YAAY,OAAEF,GAAW3B,GAAU,SAAEgD,EAAQ,MAAE/B,GAAUjB,EAASN,QAAQ8T,MAC9G7R,EAAO03B,cAAgBr2B,EAAW8d,EAClCnf,EAAOkkB,WAAa5kB,EAAQ6f,CAChC,CACA,iBAAA3X,CAAkBnJ,GACdA,EAASwT,MAAQ,EACrB,ECnJJ,MAAM0pB,GACF,WAAAt/B,GACIC,KAAK4H,GAAK,OACd,CACA,SAAAC,CAAUjG,GACN,OAAO,IAAI87B,GAAa97B,EAC5B,CACA,WAAAkG,GACA,CACA,WAAAE,GACI,OAAO,CACX,EAEGI,eAAek3B,GAAgBh3B,EAAQC,GAAU,GACpD,MAAMoK,EAAS,IAAI0sB,SACb/2B,EAAOE,UAAUmK,EAAQpK,EACnC,CCfOH,eAAem3B,GAA8Bj3B,EAAQC,GAAU,SAC5DszB,GAAqBvzB,EAAQC,SAC7B+2B,GAAgBh3B,EAAQC,EAClC,CCJO,MAAMi3B,GACT,IAAAj6B,CAAKC,EAASrD,EAAUlC,GACpB,MAAMw/B,EAAQz/B,KAAK0/B,UAAUv9B,EAAUlC,GAASmS,EAAOpS,KAAK2/B,aAAax9B,EAAUlC,GAAS2/B,EAAYxtB,EAAKlJ,MAAM22B,UAAYztB,EAAKlJ,MAAM42B,YAAaC,EAAe3tB,EAAKlJ,MAAM22B,UAAYztB,EAAKlJ,MAAM42B,YAAaE,EAAwB,KAAOD,EAAe,GAAMA,EAAcE,EAAgBj9B,KAAKC,GAAMD,KAAKC,GAAK+8B,EAAwB,IACpV,GAAKx6B,EAAL,CAGAA,EAAQE,YACRF,EAAQC,UAAUg6B,EAAMj+B,EAAGi+B,EAAMh+B,GACjC+D,EAAQiyB,OAAO,EAAG,GAClB,IAAK,IAAI1sB,EAAI,EAAGA,EAAI60B,EAAW70B,IAC3BvF,EAAQkyB,OAAOtlB,EAAKvP,OAAQ,GAC5B2C,EAAQC,UAAU2M,EAAKvP,OAAQ,GAC/B2C,EAAQizB,OAAOwH,EAPnB,CASJ,CACA,aAAAnlB,CAAc3Y,GACV,MAAM+9B,EAAU/9B,EAAS6Y,UACzB,OAAOhY,KAAK22B,OAAM,QAAcuG,GAASC,OAASD,GAASE,UAAY,GAC3E,EClBG,MAAMC,WAAsBb,GAC/B,SAAAE,CAAUv9B,EAAUlC,GAChB,MAAO,CACHuB,GAAIvB,GAAUkC,EAASg+B,MAAQ,KAC/B1+B,GAAIxB,EAAS,IAErB,CACA,YAAA0/B,CAAax9B,EAAUlC,GACnB,MAAMkgC,EAAQh+B,EAASg+B,MACvB,MAAO,CACHj3B,MAAO,CACH42B,YAAa,EACbD,UAAWM,GAEft9B,OAAkB,KAAT5C,GAAkBkgC,EAAQ,GAE3C,EChBG,MAAMG,WAAuBd,GAChC,SAAAE,CAAUv9B,EAAUlC,GAChB,MAAO,CACHuB,GAAIvB,EACJwB,EAAGxB,EAAS,KAEpB,CACA,aAAA6a,GACI,OAAO,CACX,CACA,YAAA6kB,CAAax9B,EAAUlC,GACnB,MAAO,CACHiJ,MAAO,CACH42B,YAAa,EACbD,UAAW,GAEfh9B,OAAiB,EAAT5C,EAEhB,ECjBGmI,eAAem4B,GAAwBj4B,EAAQC,GAAU,SACtDD,EAAOoJ,SAAS,UAAW,IAAI2uB,GAAiB93B,EAC1D,CACOH,eAAeo4B,GAAkBl4B,EAAQC,GAAU,SAChDD,EAAOoJ,SAAS,WAAY,IAAI4uB,GAAkB/3B,EAC5D,CACOH,eAAeq4B,GAAiBn4B,EAAQC,GAAU,SAC/Cg4B,GAAwBj4B,EAAQC,SAChCi4B,GAAkBl4B,EAAQC,EACpC,CCVO,MAAMm4B,GACT,WAAA3gC,GACIC,KAAK+O,QAAS,EACd/O,KAAKkP,MAAQ,EACblP,KAAKsY,MAAQ,EACbtY,KAAKyc,MAAO,CAChB,CACA,IAAAtc,CAAKC,GACIA,SAGeC,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEJ1O,IAAfD,EAAK8O,QACLlP,KAAKkP,OAAQ,QAAc9O,EAAK8O,aAEjB7O,IAAfD,EAAKkY,QACLtY,KAAKsY,OAAQ,QAAclY,EAAKkY,aAElBjY,IAAdD,EAAKqc,OACLzc,KAAKyc,KAAOrc,EAAKqc,MAEzB,ECtBG,MAAMkkB,WAAepgC,EAAA,GACxB,WAAAR,GACIS,QACAR,KAAKqO,UAAY,IAAIqyB,GACrB1gC,KAAKmN,UAAY,YACjBnN,KAAKmZ,MAAO,EACZnZ,KAAKU,MAAQ,CACjB,CACA,IAAAP,CAAKC,GACIA,IAGLI,MAAML,KAAKC,QACYC,IAAnBD,EAAK+M,YACLnN,KAAKmN,UAAY/M,EAAK+M,WAE1BnN,KAAKqO,UAAUlO,KAAKC,EAAKiO,gBACPhO,IAAdD,EAAK+Y,OACLnZ,KAAKmZ,KAAO/Y,EAAK+Y,MAEzB,ECpBJ,SAASynB,GAAaz+B,EAAUoO,GAC5B,MAAMkoB,EAASt2B,EAASs2B,OAAQoI,EAAgB1+B,EAASN,QAAQ42B,OACjE,IAAKA,IAAWoI,EACZ,OAEJ,MAAMC,EAAkBD,EAAcxyB,UAAWa,GAASupB,EAAO/1B,UAAY,GAAK6N,EAAMpH,OAAQH,EAAM,EAAIhG,KAAKC,GAAIqV,EAAQmgB,EAAOngB,OAAS,EAC3I,GAAKwoB,EAAgB/xB,OAArB,CAGA,OAAQ0pB,EAAO/c,QACX,IAAK,aACD+c,EAAO/3B,OAASwO,EACZupB,EAAO/3B,MAAQsI,IACfyvB,EAAO/3B,OAASsI,GAEpB,MACJ,IAAK,aACL,QACIyvB,EAAO/3B,OAASwO,EACZupB,EAAO/3B,MAAQ,IACf+3B,EAAO/3B,OAASsI,GAEpB,MAEJyvB,EAAO/1B,UAAsB,IAAV4V,IACnBmgB,EAAO/1B,UAAY4V,EAjBvB,CAmBJ,CACO,MAAMyoB,GACT,WAAAhhC,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAM0+B,EAAgB1+B,EAASN,QAAQ42B,OACvC,IAAKoI,EACD,OAEJ1+B,EAASs2B,OAAS,CACd1pB,OAAQ8xB,EAAcxyB,UAAUU,OAChCrO,OAAQ,QAAcmgC,EAAcngC,OAASsC,KAAKC,GAAM,KAE5Dd,EAAS6+B,aAAeH,EAAc1nB,KACtC,IAAI8nB,EAAkBJ,EAAc1zB,UACpC,GAAwB,WAApB8zB,EAA8B,CAC9B,MAAM15B,EAAQvE,KAAKqP,MAAoB,GAAd,WACzB4uB,EAAkB15B,EAAQ,EAAI,oBAAsB,WACxD,CACA,OAAQ05B,GACJ,IAAK,oBACL,IAAK,mBACD9+B,EAASs2B,OAAO/c,OAAS,aACzB,MACJ,IAAK,YACDvZ,EAASs2B,OAAO/c,OAAS,aACzB,MAER,MAAMolB,EAAkBD,EAAcxyB,UAClCyyB,EAAgB/xB,SAChB5M,EAASs2B,OAAOngB,MAAQ,GAAI,QAAcwoB,EAAgBxoB,OAC1DnW,EAASs2B,OAAO/1B,UACX,QAAco+B,EAAgB5xB,OAAS,IAAOlP,KAAK4B,UAAUkC,OAAOG,aACpE68B,EAAgBrkB,OACjBta,EAASs2B,OAAO/1B,WAAY,YAGpCP,EAAS++B,SAAW/+B,EAASs2B,OAAO/3B,KACxC,CACA,SAAA0K,CAAUjJ,GACN,MAAMs2B,EAASt2B,EAASN,QAAQ42B,OAChC,QAAKA,KAGGt2B,EAASE,YAAcF,EAAS+S,UAAYujB,EAAOpqB,UAAUU,SAAW0pB,EAAOtf,KAC3F,CACA,WAAArR,CAAYjG,KAAYwJ,GACfxJ,EAAQ42B,SACT52B,EAAQ42B,OAAS,IAAIkI,IAEzB,IAAK,MAAM54B,KAAUsD,EACjBxJ,EAAQ42B,OAAOt4B,KAAK4H,GAAQ0wB,OAEpC,CACA,MAAAjtB,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,KAGpBy+B,GAAaz+B,EAAUoO,GACvBpO,EAAS++B,SAAW/+B,EAASs2B,QAAQ/3B,OAAS,EAClD,ECzFG0H,eAAe+4B,GAAkB74B,EAAQC,GAAU,SAChDD,EAAOoD,mBAAmB,UAAW9J,GAAc,IAAIm/B,GAAcn/B,IAAY2G,EAC3F,CCHA,MAAM64B,GAAYp+B,KAAKkJ,KAAK,GACrB,MAAMm1B,GACT,IAAA97B,CAAKC,EAASrD,EAAUlC,GACpB,MAAMqhC,EAAcrhC,EAASmhC,GAAWG,EAA8B,EAAdD,EACxD97B,EAAQ00B,MAAMoH,GAAcA,EAAaC,EAAeA,EAC5D,CACA,aAAAzmB,GACI,OAAO,CACX,ECPG1S,eAAeo5B,GAAgBl5B,EAAQC,GAAU,SAC9CD,EAAOoJ,SAAS,CAAC,OAAQ,UAAW,IAAI2vB,GAAgB94B,EAClE,CCFO,MAAMk5B,GACT,IAAAl8B,CAAKC,EAASrD,EAAUlC,GACpB,MAAMkgC,EAAQh+B,EAASg+B,MAAOuB,EAAQv/B,EAASw/B,WAAa,EAC5Dn8B,EAAQiyB,OAAO,EAAG,EAAIx3B,GACtB,IAAK,IAAI8K,EAAI,EAAGA,EAAIo1B,EAAOp1B,IACvBvF,EAAQizB,OAAOz1B,KAAKC,GAAKk9B,GACzB36B,EAAQkyB,OAAO,EAAG,EAAIz3B,EAASyhC,GAC/Bl8B,EAAQizB,OAAOz1B,KAAKC,GAAKk9B,GACzB36B,EAAQkyB,OAAO,EAAG,EAAIz3B,EAE9B,CACA,aAAA6a,CAAc3Y,GACV,MAAMy/B,EAAOz/B,EAAS6Y,UACtB,OAAOhY,KAAK22B,OAAM,QAAciI,GAAMzB,OAASyB,GAAMxB,UAAY,GACrE,CACA,YAAArlB,CAAanZ,EAAWO,GACpB,MAAMy/B,EAAOz/B,EAAS6Y,UAAW0mB,GAAQ,QAAcE,GAAMF,OAAS,GACtEv/B,EAASw/B,UAAYD,CACzB,EClBGt5B,eAAey5B,GAAcv5B,EAAQC,GAAU,SAC5CD,EAAOoJ,SAAS,OAAQ,IAAI+vB,GAAcl5B,EACpD,CCFA,SAAS,GAAiBgI,EAAO4K,EAAYC,EAAgBpS,EAAKqS,GAC9D,IAAKF,IACAC,EAAerM,SACdoM,EAAWG,UAAY,GAAK,IAAMH,EAAWI,OAAS,IAAMJ,EAAWG,UAAY,GACrF,OAQJ,GANKH,EAAWK,OACZL,EAAWK,KAAO,IAEjBL,EAAWM,WAAa,GAAK,GAAKN,EAAWK,MAAQL,EAAWM,WAAa,KAC9EN,EAAWK,MAAQjL,EAAM7P,QAExBya,EAAWM,WAAa,GAAK,GAAKN,EAAWK,MAAQL,EAAWM,WAAa,GAC9E,OAEJ,MAAMjR,GAAS,QAAc4Q,EAAe5Q,QAAS9H,GAAYyY,EAAWzY,UAAY,GAAK6N,EAAMpH,OAAkB,IAATqB,EAAc8N,EAAQ6C,EAAW7C,OAAS,EACjJ+C,GAAkC,eAAtBF,EAAWO,QAcxBP,EAAWza,OAASgC,EAChByY,EAAWza,MAAQ,IACdya,EAAWI,QACZJ,EAAWI,MAAQ,GAEvBJ,EAAWI,QACXJ,EAAWO,OAAS,aACpBP,EAAWza,OAASya,EAAWza,SApBnCya,EAAWza,OAASgC,EAChByY,EAAWza,MAAQsI,IACdmS,EAAWI,QACZJ,EAAWI,MAAQ,GAEvBJ,EAAWI,QACPF,IACAF,EAAWO,OAAS,aACpBP,EAAWza,OAASya,EAAWza,MAAQsI,KAe/CmS,EAAWzY,UAAsB,IAAV4V,IACvB6C,EAAWzY,UAAY4V,GAEvB6C,EAAWza,MAAQsI,IACnBmS,EAAWza,OAASsI,EAE5B,CACO,SAAS84B,GAAkB3/B,EAAUoO,GACxC,IAAKpO,EAAS4/B,cAAgB5/B,EAAS6/B,gBACnC,OAEJ,MAAM,EAAEx4B,EAAC,EAAEC,EAAC,EAAEC,GAAMvH,EAAS4/B,aAAev4B,EAAGoS,EAAYnS,EAAGoS,EAAYnS,EAAGoS,GAAe3Z,EAAS6/B,gBACjGx4B,GACA,GAAiB+G,EAAO/G,EAAGoS,EAAY,KAAK,GAE5CnS,GACA,GAAiB8G,EAAO9G,EAAGoS,EAAY,KAAK,GAE5CnS,GACA,GAAiB6G,EAAO7G,EAAGoS,EAAY,KAAK,EAEpD,CC5DO,MAAMmmB,GACT,WAAAliC,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAMP,EAAY5B,KAAK4B,UAAWC,EAAUM,EAASN,QAC/C2lB,GAAS,QAAyB3lB,EAAQ2lB,OAAQrlB,EAASyF,GAAI/F,EAAQoa,kBAC7E9Z,EAAS+/B,aAAc,QAAc1a,EAAOpkB,OAASxB,EAAUkC,OAAOE,WACtE7B,EAASggC,eAAgB,QAAc3a,EAAOvmB,SAAW,GACzDkB,EAAS6/B,gBAAkBxa,EAAO3mB,OAAOwN,UACzC,MAAM+zB,GAAiB,QAAgB5a,EAAO3mB,QAAUsB,EAASiI,eAC7Dg4B,IACAjgC,EAAS4/B,aAAc,QAAuBK,EAAgBjgC,EAAS6/B,gBAAiBpgC,EAAUkC,OAAOG,cAEjH,CACA,SAAAmH,CAAUjJ,GACN,MAAMtB,EAAQsB,EAAS6/B,iBAAiB,YAAED,GAAgB5/B,EAC1D,OAASA,EAASE,YACbF,EAAS+S,YACRrU,SACyBR,IAAzB0hC,GAAav4B,EAAE9I,OAAuBqhC,EAAYv4B,EAAEuF,aACxB1O,IAAzB0hC,GAAat4B,EAAE/I,OAAuBqhC,EAAYt4B,EAAEsF,aAC3B1O,IAAzB0hC,GAAar4B,EAAEhJ,OAAuBqhC,EAAYr4B,EAAEqF,OACjE,CACA,MAAAvD,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,IAGpB2/B,GAAkB3/B,EAAUoO,EAChC,EC9BGnI,eAAei6B,GAAuB/5B,EAAQC,GAAU,SACrDD,EAAOoD,mBAAmB,eAAgB9J,GAAc,IAAIqgC,GAAmBrgC,IAAY2G,EACrG,CCFO,MAAM+5B,GAAa,CAAC,OAAQ,YAAa,QACzC,MAAMC,GACT,IAAAh9B,CAAKC,EAASrD,EAAUlC,EAAQgB,GAC5B,MAAMuhC,EAAYrgC,EAAS6Y,UAC3B,QAAkB3a,IAAdmiC,EACA,OAEJ,MAAMC,EAAWD,EAAU9hC,MAC3B,QAAiBL,IAAboiC,EACA,YAEkBpiC,IAAlB8B,EAASktB,OACTltB,EAASktB,MAAO,QAAyBoT,EAAUtgC,EAASugC,kBAEhE,MAAMrT,EAAOltB,EAASktB,KAAMsT,EAAQH,EAAUG,OAAS,GAAIC,EAASJ,EAAUI,QAAU,MAAOxhC,EAA4B,EAArB4B,KAAK22B,MAAM15B,GAAa4iC,EAAOL,EAAUK,MAAQ,UAAW/8B,EAAO3D,EAAS2D,KAAMg9B,EAAWzT,EAAKxsB,OAAS5C,EAAU,EAC3NuF,EAAQq9B,KAAO,GAAGF,KAASC,KAAUxhC,QAAWyhC,KAChD,MAAM79B,EAAM,CACRxD,GAAIshC,EACJrhC,EAAGxB,EAAS,GAEhBuF,EAAQ6vB,YAAcp0B,EAClB6E,EACAN,EAAQu9B,SAAS1T,EAAMrqB,EAAIxD,EAAGwD,EAAIvD,GAGlC+D,EAAQw9B,WAAW3T,EAAMrqB,EAAIxD,EAAGwD,EAAIvD,GAExC+D,EAAQ6vB,YAAc,CAC1B,CACA,aAAAva,GACI,OAAO,EACX,CACA,UAAM5T,CAAKtF,GACP,MAAMC,EAAUD,EAAUuF,cAC1B,GAAIm7B,GAAWj8B,MAAMC,IAAM,QAAUA,EAAGzE,EAAQyH,UAAU2D,MAAM4F,QAAQ,CACpE,MAAMowB,EAAeX,GAChB/vB,KAAKjM,GAAMzE,EAAQyH,UAAU2D,MAAMpL,QAAQyE,KAC3CD,MAAMC,KAAQA,IAAI48B,EAAW,IAClC,QAA0BD,GAAeh2B,IACrCi2B,EAASz8B,MAAK,QAASwG,EAAM41B,KAAM51B,EAAM21B,QAAQ,UAE/CtP,QAAQ6P,IAAID,EACtB,CACJ,CACA,YAAAnoB,CAAanZ,EAAWO,GACpB,IAAKA,EAAS8K,QAAUq1B,GAAWlxB,SAASjP,EAAS8K,OACjD,OAEJ,MAAMu1B,EAAYrgC,EAAS6Y,UAC3B,QAAkB3a,IAAdmiC,EACA,OAEJ,MAAMC,EAAWD,EAAU9hC,WACVL,IAAboiC,IAGJtgC,EAASktB,MAAO,QAAyBoT,EAAUtgC,EAASugC,iBAChE,ECzDGt6B,eAAeg7B,GAAc96B,EAAQC,GAAU,SAC5CD,EAAOoJ,SAAS4wB,GAAY,IAAIC,GAAch6B,EACxD,CCuBOH,eAAei7B,GAAS/6B,EAAQC,GAAU,GAC7C2O,EAAQ5O,SACFgwB,GAAkBhwB,GAAQ,SAC1B2Y,GAA+B3Y,GAAQ,SACvC+Z,GAA8B/Z,GAAQ,SACtC2d,GAA8B3d,GAAQ,SACtCkgB,GAA+BlgB,GAAQ,SACvCqhB,GAA4BrhB,GAAQ,SACpCwhB,GAA6BxhB,GAAQ,SACrC+hB,GAA4B/hB,GAAQ,SACpCoiB,GAA8BpiB,GAAQ,SACtCwjB,GAA+BxjB,GAAQ,SACvCgkB,GAA4BhkB,GAAQ,SACpCwwB,GAAgCxwB,GAAQ,SACxCwxB,GAAmCxxB,GAAQ,SAC3Ci3B,GAA8Bj3B,GAAQ,SACtCkX,WACA0V,GAAe5sB,GAAQ,SACvBuvB,GAAcvvB,GAAQ,SACtBm4B,GAAiBn4B,GAAQ,SACzBk5B,GAAgBl5B,GAAQ,SACxBu5B,GAAcv5B,GAAQ,SACtB86B,GAAc96B,GAAQ,SACtBivB,GAAgBjvB,GAAQ,SACxB64B,GAAkB74B,GAAQ,SAC1B+5B,GAAuB/5B,GAAQ,SAC/BiX,GAAUjX,EAAQC,EAC5B,CCpDO,MAAM+6B,GACT,WAAAvjC,GACIC,KAAK+O,QAAS,EACd/O,KAAKkP,MAAQ,EACblP,KAAKsY,MAAQ,EACbtY,KAAKyc,MAAO,CAChB,CACA,IAAAtc,CAAKC,GACIA,SAGeC,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEJ1O,IAAfD,EAAK8O,QACLlP,KAAKkP,OAAQ,QAAc9O,EAAK8O,aAEjB7O,IAAfD,EAAKkY,QACLtY,KAAKsY,OAAQ,QAAclY,EAAKkY,aAElBjY,IAAdD,EAAKqc,OACLzc,KAAKyc,KAAOrc,EAAKqc,MAEzB,ECtBG,MAAM8mB,WAAahjC,EAAA,GACtB,WAAAR,GACIS,QACAR,KAAKqO,UAAY,IAAIi1B,GACrBtjC,KAAKmN,UAAY,YACjBnN,KAAK+O,QAAS,EACd/O,KAAKU,MAAQ,CACjB,CACA,IAAAP,CAAKC,GACDI,MAAML,KAAKC,GACNA,IAGLJ,KAAKqO,UAAUlO,KAAKC,EAAKiO,gBACFhO,IAAnBD,EAAK+M,YACLnN,KAAKmN,UAAY/M,EAAK+M,gBAEN9M,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,QAE3B,ECtBG,SAASy0B,GAAWrhC,EAAUoO,GACjC,IAAKpO,EAASshC,OAASthC,EAASN,QAAQ4hC,KACpC,OAEJ,MAAMA,EAAOthC,EAASN,QAAQ4hC,KAAMC,EAAgBD,EAAKp1B,UAAWa,GAAS/M,EAASshC,KAAK/gC,UAAY,GAAK6N,EAAMpH,OAAQH,EAAM,EAAIhG,KAAKC,GAAIqV,EAAQnW,EAASshC,KAAKnrB,OAAS,EAC5K,GAAKorB,EAAc30B,OAAnB,CAGA,OAAQ5M,EAASshC,KAAK/nB,QAClB,IAAK,aACDvZ,EAASshC,KAAK/iC,OAASwO,EACnB/M,EAASshC,KAAK/iC,MAAQsI,IACtB7G,EAASshC,KAAK/iC,OAASsI,GAE3B,MACJ,IAAK,aACL,QACI7G,EAASshC,KAAK/iC,OAASwO,EACnB/M,EAASshC,KAAK/iC,MAAQ,IACtByB,EAASshC,KAAK/iC,OAASsI,GAE3B,MAEJ7G,EAASshC,KAAK/gC,UAAsB,IAAV4V,IAC1BnW,EAASshC,KAAK/gC,UAAY4V,EAjB9B,CAmBJ,CCvBO,MAAMqrB,GACT,WAAA5jC,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,kBAAAkT,CAAmB3S,GACf,MAAMshC,EAAOthC,EAASshC,MAAM10B,QAAU5M,EAASshC,KAC/C,MAAO,CACHn/B,EAAGm/B,EAAOzgC,KAAKY,IAAI6/B,EAAK/iC,OAAS+iC,EAAKG,kBAAevjC,EACrDwjC,EAAGJ,EAAOzgC,KAAKa,IAAI4/B,EAAK/iC,OAAS+iC,EAAKK,kBAAezjC,EAE7D,CACA,IAAA6G,CAAK/E,GACD,MAAM4hC,EAAc5hC,EAASN,QAAQ4hC,KACrC,IAAKM,EACD,OAEJ5hC,EAASshC,KAAO,CACZ10B,OAAQg1B,EAAYh1B,OACpBrO,OAAQ,QAAcqjC,EAAYrjC,OAASsC,KAAKC,GAAM,IACtD6gC,cAAc,WAAe,GAAM,GAAK,EACxCF,cAAc,WAAe,GAAM,GAAK,GAE5C,IAAII,EAAgBD,EAAY52B,UAChC,GAAsB,WAAlB62B,EAA4B,CAC5B,MAAMz8B,EAAQvE,KAAKqP,MAAoB,GAAd,WACzB2xB,EAAgBz8B,EAAQ,EAAI,oBAAsB,WACtD,CACA,OAAQy8B,GACJ,IAAK,oBACL,IAAK,mBACD7hC,EAASshC,KAAK/nB,OAAS,aACvB,MACJ,IAAK,YACDvZ,EAASshC,KAAK/nB,OAAS,aACvB,MAER,MAAMgoB,EAAgBvhC,EAASN,QAAQ4hC,MAAMp1B,UACzCq1B,GAAe30B,SACf5M,EAASshC,KAAKnrB,MAAQ,GAAI,QAAcorB,EAAcprB,OACtDnW,EAASshC,KAAK/gC,UAAY,QAAcghC,EAAcx0B,OAAS,IAAOlP,KAAK4B,UAAUkC,OAAOG,aACvFy/B,EAAcjnB,OACfta,EAASshC,KAAK/gC,WAAY,WAGtC,CACA,SAAA0I,CAAUjJ,GACN,MAAMuhC,EAAgBvhC,EAASN,QAAQ4hC,MAAMp1B,UAC7C,OAAQlM,EAASE,YAAcF,EAAS+S,YAAcwuB,GAAe30B,MACzE,CACA,WAAAjH,CAAYjG,KAAYwJ,GACfxJ,EAAQ4hC,OACT5hC,EAAQ4hC,KAAO,IAAIF,IAEvB,IAAK,MAAMx7B,KAAUsD,EACjBxJ,EAAQ4hC,KAAKtjC,KAAK4H,GAAQ07B,KAElC,CACA,MAAAj4B,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,IAGpBqhC,GAAWrhC,EAAUoO,EACzB,EChEGnI,eAAe67B,GAAgB37B,EAAQC,GAAU,SAC9CD,EAAOoD,mBAAmB,QAAS9J,GAAc,IAAI+hC,GAAY/hC,IAAY2G,EACvF,CCFO,MAAM27B,GACT,WAAAnkC,GACIC,KAAK+O,QAAS,EACd/O,KAAKy6B,UAAY,IACjBz6B,KAAKiB,QAAU,CACnB,CACA,IAAAd,CAAKC,GACIA,SAGcC,IAAfD,EAAKS,QACLb,KAAKa,MAAQC,EAAAC,EAAaM,OAAOrB,KAAKa,MAAOT,EAAKS,aAElCR,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEA1O,IAAnBD,EAAKq6B,YACLz6B,KAAKy6B,UAAYr6B,EAAKq6B,gBAELp6B,IAAjBD,EAAKa,UACLjB,KAAKiB,SAAU,QAAcb,EAAKa,UAE1C,ECtBG,MAAMkjC,GACT,WAAApkC,GACIC,KAAK+9B,MAAQ,IAAImG,GACjBlkC,KAAKsJ,UAAY,IAAI46B,EACzB,CACA,IAAA/jC,CAAKC,GACIA,IAGLJ,KAAK+9B,MAAM59B,KAAKC,EAAK29B,OACrB/9B,KAAKsJ,UAAUnJ,KAAKC,EAAKkJ,WAC7B,ECVG,MAAM86B,GACT,cAAAC,CAAeliC,EAAUqD,EAASvF,EAAQgB,GACtC,MAAMqjC,EAAWniC,EAASN,QAAS0iC,EAAiBD,EAASxG,QAC7D,IAAKyG,EACD,MAAO,CAAC,EAEZ,MAAMzG,EAAUyG,EAAej7B,UAAW40B,EAAYJ,EAAQ/uB,SAAU,UAAc+uB,EAAQrD,UAAW/hB,EAAgBvW,EAASN,QAAQ8W,OAAQ6rB,GAAkB,EAAIriC,EAAS0W,eAAiBH,EAAc+rB,YAAaC,EAAmBxG,GAAY,QAAcJ,EAAQ78B,SAAWujC,EAAiBvjC,EAASg9B,GAAa,QAAgBH,EAAQj9B,OAAQ8jC,EAAe1G,GAAa,QAAgBA,EAAYyG,QAAoBrkC,EAAWqxB,EAAM,CAAC,EAAGkT,EAAe1G,GAAayG,EAGje,OAFAjT,EAAI5rB,KAAO8+B,EAAeD,OAAetkC,EACzCqxB,EAAIlK,OAASod,EAAeD,OAAetkC,EACpCqxB,CACX,CACA,IAAAxqB,GACA,CACA,SAAAkE,CAAUjJ,GACN,MAAMmiC,EAAWniC,EAASN,QAAS0iC,EAAiBD,EAASxG,QAC7D,QAAKyG,GAGEA,EAAej7B,UAAUyF,MACpC,CACA,WAAAjH,CAAYjG,KAAYwJ,GACfxJ,EAAQi8B,UACTj8B,EAAQi8B,QAAU,IAAIqG,IAE1B,IAAK,MAAMp8B,KAAUsD,EACjBxJ,EAAQi8B,QAAQ39B,KAAK4H,GAAQ+1B,QAErC,CACA,MAAAtyB,GACA,EC9BGpD,eAAey8B,GAAmBv8B,EAAQC,GAAU,SACjDD,EAAOoD,mBAAmB,WAAW,IAAM,IAAI04B,IAAkB77B,EAC3E,CCFO,MAAMu8B,GACT,WAAA/kC,GACIC,KAAK+C,MAAQ,GACb/C,KAAKsK,KAAO,EAChB,CACA,IAAAnK,CAAKC,GACIA,SAGcC,IAAfD,EAAK2C,QACL/C,KAAK+C,OAAQ,QAAc3C,EAAK2C,aAElB1C,IAAdD,EAAKkK,OACLtK,KAAKsK,MAAO,QAAclK,EAAKkK,OAEvC,ECdG,MAAMy6B,GACT,WAAAhlC,GACIC,KAAKmF,SAAW,EAChBnF,KAAK+O,QAAS,EACd/O,KAAKkP,MAAQ,IAAI41B,EACrB,CACA,IAAA3kC,CAAKC,GACD,GAAKA,SAGiBC,IAAlBD,EAAK+E,WACLnF,KAAKmF,UAAW,QAAc/E,EAAK+E,gBAEnB9E,IAAhBD,EAAK2O,SACL/O,KAAK+O,OAAS3O,EAAK2O,aAEJ1O,IAAfD,EAAK8O,OACL,IAAI,QAAS9O,EAAK8O,OACdlP,KAAKkP,MAAM/O,KAAK,CAAE4C,MAAO3C,EAAK8O,YAE7B,CACD,MAAM81B,EAAa5kC,EAAK8O,WACD7O,IAAnB2kC,EAAW7hC,IACXnD,KAAKkP,MAAM/O,KAAK,CAAE4C,MAAOiiC,IAGzBhlC,KAAKkP,MAAM/O,KAAKC,EAAK8O,MAE7B,CAER,EChCG,SAAS+1B,GAAa9iC,EAAUoO,GACnC,MAAQ20B,OAAQC,GAAkBhjC,EAASN,SAAS,OAAEqjC,GAAW/iC,EACjE,IAAKgjC,GAAep2B,SAAWm2B,EAC3B,OAEJ,MAAME,EAAaF,EAAOE,WAAa70B,EAAMpH,OAAQpF,EAAYmhC,EAAOnhC,UAAYwM,EAAMpH,OAAQhE,EAAYpB,IAAc5B,EAAS2B,OAAOuhC,gBAAkB,GAAK90B,EAAMpH,SAAY,IAAO,IAAKH,EAAM,EAAIhG,KAAKC,IAAI,SAAE1B,GAAaY,EACnO+iC,EAAOniC,OAASqiC,EACZF,EAAOniC,MAAQiG,IACfk8B,EAAOniC,OAASiG,GAEpBzH,EAASC,GAAK2D,EAAWnC,KAAKY,IAAIshC,EAAOniC,OACzCxB,EAASE,GAAK0D,EAAWnC,KAAKsU,IAAItU,KAAKa,IAAIqhC,EAAOniC,OACtD,CCTO,MAAMuiC,GACT,WAAAvlC,CAAY6B,GACR5B,KAAK4B,UAAYA,CACrB,CACA,IAAAsF,CAAK/E,GACD,MAAMojC,EAAYpjC,EAASN,QAAQqjC,OAE/B/iC,EAAS+iC,OADTK,GAAWx2B,OACO,CACdhM,OAAO,UAAcC,KAAKC,GAAK,EAC/BmiC,YAAY,QAAcG,EAAUr2B,MAAMnM,OAAS,IACnDgB,WAAW,QAAcwhC,EAAUr2B,MAAM5E,MAAQ,IAInC,CACdvH,MAAO,EACPqiC,WAAY,EACZrhC,UAAW,GAGnB5B,EAAS2B,OAAOuhC,gBAAiB,QAAcE,GAAWpgC,UAAY,GAAKnF,KAAK4B,UAAUkC,OAAOE,UACrG,CACA,SAAAoH,CAAUjJ,GACN,OAAQA,EAASE,YAAcF,EAAS+S,YAAc/S,EAASN,QAAQqjC,QAAQn2B,MACnF,CACA,WAAAjH,CAAYjG,KAAYwJ,GACfxJ,EAAQqjC,SACTrjC,EAAQqjC,OAAS,IAAIH,IAEzB,IAAK,MAAMh9B,KAAUsD,EACjBxJ,EAAQqjC,OAAO/kC,KAAK4H,GAAQm9B,OAEpC,CACA,MAAA15B,CAAOrJ,EAAUoO,GACRvQ,KAAKoL,UAAUjJ,IAGpB8iC,GAAa9iC,EAAUoO,EAC3B,ECxCGnI,eAAeo9B,GAAkBl9B,EAAQC,GAAU,SAChDD,EAAOoD,mBAAmB,UAAW9J,GAAc,IAAI0jC,GAAc1jC,IAAY2G,EAC3F,CCMOH,eAAeq9B,GAASn9B,EAAQC,GAAU,SACvCkD,EAAmBnD,GAAQ,SAC3B6M,EAAgB7M,GAAQ,SACxB27B,GAAgB37B,GAAQ,SACxBu8B,GAAmBv8B,GAAQ,SAC3Bk9B,GAAkBl9B,GAAQ,SAC1BwL,EAA6BxL,GAAQ,SACrCD,EAAoBC,GAAQ,SAC5BmK,EAAmBnK,GAAQ,SAC3B+6B,GAAS/6B,EAAQC,EAC3B,C","sources":["webpack://preview-web/./node_modules/tsparticles-plugin-absorbers/esm/Options/Classes/AbsorberSizeLimit.js","webpack://preview-web/./node_modules/tsparticles-plugin-absorbers/esm/Options/Classes/AbsorberSize.js","webpack://preview-web/./node_modules/tsparticles-plugin-absorbers/esm/Options/Classes/Absorber.js","webpack://preview-web/./node_modules/tsparticles-plugin-absorbers/esm/AbsorberInstance.js","webpack://preview-web/./node_modules/tsparticles-plugin-absorbers/esm/Absorbers.js","webpack://preview-web/./node_modules/tsparticles-plugin-absorbers/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/Options/Classes/DestroyBounds.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/Options/Classes/SplitFactor.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/Options/Classes/SplitRate.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/Options/Classes/Split.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/Options/Classes/Destroy.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/DestroyUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-destroy/esm/index.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Shapes/Circle/CircleShape.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Options/Classes/EmitterLife.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Options/Classes/EmitterRate.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Options/Classes/EmitterSize.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Options/Classes/Emitter.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Emitters.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/ShapeManager.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/Shapes/Square/SquareShape.js","webpack://preview-web/./node_modules/tsparticles-plugin-emitters/esm/index.js","webpack://preview-web/./node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-trail/esm/Options/Classes/Trail.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-trail/esm/TrailMaker.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-trail/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-roll/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-roll/esm/Options/Classes/RollLight.js","webpack://preview-web/./node_modules/tsparticles-updater-roll/esm/Options/Classes/Roll.js","webpack://preview-web/./node_modules/tsparticles-updater-roll/esm/RollUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-roll/esm/index.js","webpack://preview-web/./node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js","webpack://preview-web/./node_modules/tsparticles-particles.js/esm/VincentGarreau/particles.js","webpack://preview-web/./node_modules/tsparticles-particles.js/esm/index.js","webpack://preview-web/./node_modules/tsparticles-move-base/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-move-base/esm/BaseMover.js","webpack://preview-web/./node_modules/tsparticles-move-base/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-circle/esm/CircleDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-circle/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-color/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-color/esm/ColorUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-color/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-opacity/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-opacity/esm/OpacityUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-opacity/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/BounceOutMode.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/DestroyOutMode.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/NoneOutMode.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/OutOutMode.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-out-modes/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-size/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-size/esm/SizeUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-size/esm/index.js","webpack://preview-web/./node_modules/tsparticles-basic/esm/index.js","webpack://preview-web/./node_modules/tsparticles-plugin-easing-quad/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-attract/esm/Options/Classes/Attract.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-attract/esm/Attractor.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-attract/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bounce/esm/Options/Classes/Bounce.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bounce/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleDiv.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/Bubble.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bubble/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-bubble/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/ConnectLinks.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/Connect.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-connect/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-connect/esm/Connector.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-connect/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/GrabLinks.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/Grab.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-grab/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-grab/esm/Grabber.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-grab/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-pause/esm/Pauser.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-pause/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-push/esm/Options/Classes/Push.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-push/esm/Pusher.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-push/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-remove/esm/Options/Classes/Remove.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-remove/esm/Remover.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-remove/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseDiv.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/Repulse.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-repulse/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-slow/esm/Options/Classes/Slow.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-slow/esm/Slower.js","webpack://preview-web/./node_modules/tsparticles-interaction-external-slow/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/ImageDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/ImagePreloader.js","webpack://preview-web/./node_modules/tsparticles-shape-image/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDelay.js","webpack://preview-web/./node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDuration.js","webpack://preview-web/./node_modules/tsparticles-updater-life/esm/Options/Classes/Life.js","webpack://preview-web/./node_modules/tsparticles-updater-life/esm/LifeUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-life/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-line/esm/LineDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-line/esm/index.js","webpack://preview-web/./node_modules/tsparticles-move-parallax/esm/ParallaxMover.js","webpack://preview-web/./node_modules/tsparticles-move-parallax/esm/index.js","webpack://preview-web/./node_modules/tsparticles-engine/esm/Core/Utils/ParticlesInteractorBase.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-attract/esm/Attractor.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-attract/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-collisions/esm/Absorb.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-collisions/esm/Bounce.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-collisions/esm/Destroy.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-collisions/esm/ResolveCollision.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-collisions/esm/Collider.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-collisions/esm/index.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/CircleWarp.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksShadow.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksTriangle.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/Links.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/Linker.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/interaction.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/plugin.js","webpack://preview-web/./node_modules/tsparticles-interaction-particles-links/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js","webpack://preview-web/./node_modules/tsparticles-shape-polygon/esm/PolygonDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-polygon/esm/TriangleDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-polygon/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js","webpack://preview-web/./node_modules/tsparticles-updater-rotate/esm/Options/Classes/Rotate.js","webpack://preview-web/./node_modules/tsparticles-updater-rotate/esm/RotateUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-rotate/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-square/esm/SquareDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-square/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-star/esm/StarDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-star/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-stroke-color/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-stroke-color/esm/index.js","webpack://preview-web/./node_modules/tsparticles-shape-text/esm/TextDrawer.js","webpack://preview-web/./node_modules/tsparticles-shape-text/esm/index.js","webpack://preview-web/./node_modules/tsparticles-slim/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-tilt/esm/Options/Classes/TiltAnimation.js","webpack://preview-web/./node_modules/tsparticles-updater-tilt/esm/Options/Classes/Tilt.js","webpack://preview-web/./node_modules/tsparticles-updater-tilt/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-tilt/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-twinkle/esm/Options/Classes/TwinkleValues.js","webpack://preview-web/./node_modules/tsparticles-updater-twinkle/esm/Options/Classes/Twinkle.js","webpack://preview-web/./node_modules/tsparticles-updater-twinkle/esm/TwinkleUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-twinkle/esm/index.js","webpack://preview-web/./node_modules/tsparticles-updater-wobble/esm/Options/Classes/WobbleSpeed.js","webpack://preview-web/./node_modules/tsparticles-updater-wobble/esm/Options/Classes/Wobble.js","webpack://preview-web/./node_modules/tsparticles-updater-wobble/esm/Utils.js","webpack://preview-web/./node_modules/tsparticles-updater-wobble/esm/WobbleUpdater.js","webpack://preview-web/./node_modules/tsparticles-updater-wobble/esm/index.js","webpack://preview-web/./node_modules/tsparticles/esm/index.js"],"sourcesContent":["export class AbsorberSizeLimit {\n    constructor() {\n        this.radius = 0;\n        this.mass = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mass !== undefined) {\n            this.mass = data.mass;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { ValueWithRandom, isNumber } from \"tsparticles-engine\";\nimport { AbsorberSizeLimit } from \"./AbsorberSizeLimit\";\nexport class AbsorberSize extends ValueWithRandom {\n    constructor() {\n        super();\n        this.density = 5;\n        this.value = 50;\n        this.limit = new AbsorberSizeLimit();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.density !== undefined) {\n            this.density = data.density;\n        }\n        if (isNumber(data.limit)) {\n            this.limit.radius = data.limit;\n        }\n        else {\n            this.limit.load(data.limit);\n        }\n    }\n}\n","import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nimport { AbsorberSize } from \"./AbsorberSize\";\nexport class Absorber {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#000000\";\n        this.draggable = false;\n        this.opacity = 1;\n        this.destroy = true;\n        this.orbits = false;\n        this.size = new AbsorberSize();\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.draggable !== undefined) {\n            this.draggable = data.draggable;\n        }\n        this.name = data.name;\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.size !== undefined) {\n            this.size.load(data.size);\n        }\n        if (data.destroy !== undefined) {\n            this.destroy = data.destroy;\n        }\n        if (data.orbits !== undefined) {\n            this.orbits = data.orbits;\n        }\n    }\n}\n","import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.create(0, 0);\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height);\n                    particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? 0) * container.retina.pixelRatio) / 100) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n","import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"tsparticles-engine\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n    addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        executeOnSingleOrMultiple(this.absorbers, (absorber) => {\n            this.addAbsorber(absorber);\n        });\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n","import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nclass AbsorbersPlugin {\n    constructor() {\n        this.id = \"absorbers\";\n    }\n    getPlugin(container) {\n        return new Absorbers(container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\nexport async function loadAbsorbersPlugin(engine, refresh = true) {\n    await engine.addPlugin(new AbsorbersPlugin(), refresh);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n","import { OptionsColor, deepExtend, executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { SplitFactor } from \"./SplitFactor\";\nimport { SplitRate } from \"./SplitRate\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n","import { DestroyBounds } from \"./DestroyBounds\";\nimport { Split } from \"./Split\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = \"none\";\n        this.split = new Split();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n","import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getValue(splitOptions.factor), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? 0),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? 0),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? 0),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < 0.5) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? 0) + 1;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, 500);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n","import { getRangeValue, } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nimport { split } from \"./Utils\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.engine = engine;\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / 100;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / 100;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / 100;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / 100;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n","import { DestroyUpdater } from \"./DestroyUpdater\";\nexport async function loadDestroyUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"destroy\", (container) => new DestroyUpdater(engine, container), refresh);\n}\n","import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = getRandom() / 4.0, theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u)), v = getRandom();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2), [a, b] = [size.width / 2, size.height / 2], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n","export class EmitterSize {\n    constructor() {\n        this.mode = \"percent\";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, setRangeValue, } from \"tsparticles-engine\";\nimport { EmitterLife } from \"./EmitterLife\";\nimport { EmitterRate } from \"./EmitterRate\";\nimport { EmitterSize } from \"./EmitterSize\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = \"square\";\n        this.startCount = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        if (data.shape !== undefined) {\n            this.shape = data.shape;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n","import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n","import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n            this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n","const shapes = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShape(name, drawer) {\n        if (!this.getShape(name)) {\n            shapes.set(name, drawer);\n        }\n    }\n    getShape(name) {\n        return shapes.get(name);\n    }\n    getSupportedShapes() {\n        return shapes.keys();\n    }\n}\n","import { getRandom } from \"tsparticles-engine\";\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - 0.5);\n}\nexport class SquareShape {\n    randomPosition(position, size, fill) {\n        if (fill) {\n            return {\n                x: randomSquareCoordinate(position.x, size.width),\n                y: randomSquareCoordinate(position.y, size.height),\n            };\n        }\n        else {\n            const halfW = size.width / 2, halfH = size.height / 2, side = Math.floor(getRandom() * 4), v = (getRandom() - 0.5) * 2;\n            switch (side) {\n                case 0:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y - halfH,\n                    };\n                case 1:\n                    return {\n                        x: position.x - halfW,\n                        y: position.y + v * halfH,\n                    };\n                case 2:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y + halfH,\n                    };\n                case 3:\n                default:\n                    return {\n                        x: position.x + halfW,\n                        y: position.y + v * halfH,\n                    };\n            }\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            engine.emitterShapeManager?.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n","export class ExternalInteractorBase {\n    constructor(container) {\n        this.container = container;\n        this.type = \"external\";\n    }\n}\n","import { deepExtend } from \"tsparticles-engine\";\nexport class Trail {\n    constructor() {\n        this.delay = 1;\n        this.pauseOnStop = false;\n        this.quantity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = data.quantity;\n        }\n        if (data.particles !== undefined) {\n            this.particles = deepExtend({}, data.particles);\n        }\n        if (data.pauseOnStop !== undefined) {\n            this.pauseOnStop = data.pauseOnStop;\n        }\n    }\n}\n","import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Trail } from \"./Options/Classes/Trail\";\nexport class TrailMaker extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._delay = 0;\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(delta) {\n        const container = this.container, { interactivity } = container;\n        if (!container.retina.reduceFactor) {\n            return;\n        }\n        const options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n        if (!trailOptions) {\n            return;\n        }\n        const optDelay = (trailOptions.delay * 1000) / this.container.retina.reduceFactor;\n        if (this._delay < optDelay) {\n            this._delay += delta.value;\n        }\n        if (this._delay < optDelay) {\n            return;\n        }\n        const canEmit = !(trailOptions.pauseOnStop &&\n            (interactivity.mouse.position === this._lastPosition ||\n                (interactivity.mouse.position?.x === this._lastPosition?.x &&\n                    interactivity.mouse.position?.y === this._lastPosition?.y)));\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos) {\n            this._lastPosition = { ...mousePos };\n        }\n        else {\n            delete this._lastPosition;\n        }\n        if (canEmit) {\n            container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n        }\n        this._delay -= optDelay;\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        return ((mouse.clicking && mouse.inside && !!mouse.position && isInArray(\"trail\", events.onClick.mode)) ||\n            (mouse.inside && !!mouse.position && isInArray(\"trail\", events.onHover.mode)));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.trail) {\n            options.trail = new Trail();\n        }\n        for (const source of sources) {\n            options.trail.load(source?.trail);\n        }\n    }\n    reset() {\n    }\n}\n","import { TrailMaker } from \"./TrailMaker\";\nexport async function loadExternalTrailInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalTrail\", (container) => new TrailMaker(container), refresh);\n}\nexport * from \"./Options/Classes/Trail\";\nexport * from \"./Options/Interfaces/ITrail\";\n","import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = 2 * Math.PI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n","import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nimport { RollLight } from \"./RollLight\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = \"vertical\";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n","import { initParticle, updateRoll } from \"./Utils\";\nimport { Roll } from \"./Options/Classes/Roll\";\nexport class RollUpdater {\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n","import { RollUpdater } from \"./RollUpdater\";\nexport async function loadRollUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"roll\", () => new RollUpdater(), refresh);\n}\n","import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n    static init(options) {\n        const particles = new Particles(), selector = options.selector;\n        if (!selector) {\n            throw new Error(\"No selector provided\");\n        }\n        const el = document.querySelector(selector);\n        if (!el) {\n            throw new Error(\"No element found for selector\");\n        }\n        tsParticles\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n            fullScreen: {\n                enable: false,\n            },\n            particles: {\n                color: {\n                    value: options.color ?? \"!000000\",\n                },\n                links: {\n                    color: \"random\",\n                    distance: options.minDistance ?? 120,\n                    enable: options.connectParticles ?? false,\n                },\n                move: {\n                    enable: true,\n                    speed: options.speed ?? 0.5,\n                },\n                number: {\n                    value: options.maxParticles ?? 100,\n                },\n                size: {\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\n                },\n            },\n            responsive: options.responsive?.map((responsive) => ({\n                maxWidth: responsive.breakpoint,\n                options: {\n                    particles: {\n                        color: {\n                            value: responsive.options?.color,\n                        },\n                        links: {\n                            distance: responsive.options?.minDistance,\n                            enable: responsive.options?.connectParticles,\n                        },\n                        number: {\n                            value: options.maxParticles,\n                        },\n                        move: {\n                            enable: true,\n                            speed: responsive.options?.speed,\n                        },\n                        size: {\n                            value: responsive.options?.sizeVariations,\n                        },\n                    },\n                },\n            })),\n        })\n            .then((container) => {\n            particles._container = container;\n        });\n        return particles;\n    }\n    destroy() {\n        const container = this._container;\n        container && container.destroy();\n    }\n    pauseAnimation() {\n        const container = this._container;\n        container && container.pause();\n    }\n    resumeAnimation() {\n        const container = this._container;\n        container && container.play();\n    }\n}\n","const initParticlesJS = (engine) => {\n    const particlesJS = (tagId, options) => {\n        return engine.load(tagId, options);\n    };\n    particlesJS.load = (tagId, pathConfigJson, callback) => {\n        engine\n            .loadJSON(tagId, pathConfigJson)\n            .then((container) => {\n            if (container) {\n                callback(container);\n            }\n        })\n            .catch(() => {\n            callback(undefined);\n        });\n    };\n    particlesJS.setOnClickHandler = (callback) => {\n        engine.setOnClickHandler(callback);\n    };\n    const pJSDom = engine.dom();\n    return { particlesJS, pJSDom };\n};\nexport { initParticlesJS };\n","import { Particles } from \"./marcbruederlin/Particles\";\nimport { initParticlesJS } from \"./VincentGarreau/particles\";\nconst initPjs = (engine) => {\n    const { particlesJS, pJSDom } = initParticlesJS(engine);\n    window.particlesJS = particlesJS;\n    window.pJSDom = pJSDom;\n    window.Particles = Particles;\n    return { particlesJS, pJSDom, Particles };\n};\nexport { initPjs };\n","import { clamp, getDistances, getRandom, } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > 0 &&\n        ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n","import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n    constructor() {\n        this._initSpin = (particle) => {\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n            if (!spinOptions.enable) {\n                return;\n            }\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        };\n    }\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this._initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n","import { BaseMover } from \"./BaseMover\";\nexport async function loadBaseMover(engine, refresh = true) {\n    await engine.addMover(\"base\", () => new BaseMover(), refresh);\n}\n","import { isObject } from \"tsparticles-engine\";\nexport class CircleDrawer {\n    draw(context, particle, radius) {\n        if (!particle.circleRange) {\n            particle.circleRange = { min: 0, max: Math.PI * 2 };\n        }\n        const circleRange = particle.circleRange;\n        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\n    }\n    getSidesCount() {\n        return 12;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: 360,\n            min: 0,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: 0,\n                max: (angle * Math.PI) / 180,\n            }\n            : { min: (angle.min * Math.PI) / 180, max: (angle.max * Math.PI) / 180 };\n    }\n}\n","import { CircleDrawer } from \"./CircleDrawer\";\nexport async function loadCircleShape(engine, refresh = true) {\n    await engine.addShape(\"circle\", new CircleDrawer(), refresh);\n}\n","import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateColor(particle, delta) {\n    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n","import { getHslAnimationFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateColor } from \"./Utils\";\nexport class ColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle, delta);\n    }\n}\n","import { ColorUpdater } from \"./ColorUpdater\";\nexport async function loadColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"color\", (container) => new ColorUpdater(container), refresh);\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.opacity.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateOpacity(particle, delta) {\n    const data = particle.opacity;\n    if (particle.destroyed || !data?.enable || ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n    }\n    if (data.velocity && data.decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n","import { getRandom, getRangeValue, initParticleNumericAnimationValue, } from \"tsparticles-engine\";\nimport { updateOpacity } from \"./Utils\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, 1);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / 100) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? 0) <= 0 ||\n                ((particle.opacity.maxLoops ?? 0) > 0 &&\n                    (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateOpacity(particle, delta);\n    }\n}\n","import { OpacityUpdater } from \"./OpacityUpdater\";\nexport async function loadOpacityUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"opacity\", (container) => new OpacityUpdater(container), refresh);\n}\n","import { getValue } from \"tsparticles-engine\";\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-horizontal\" &&\n        data.outMode !== \"bounceHorizontal\" &&\n        data.outMode !== \"split\") ||\n        (data.direction !== \"left\" && data.direction !== \"right\")) {\n        return;\n    }\n    if (data.bounds.right < 0 && data.direction === \"left\") {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.horizontal);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0 && data.direction === \"left\") {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-vertical\" &&\n        data.outMode !== \"bounceVertical\" &&\n        data.outMode !== \"split\") ||\n        (data.direction !== \"bottom\" && data.direction !== \"top\")) {\n        return;\n    }\n    if (data.bounds.bottom < 0 && data.direction === \"top\") {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0) ||\n        (data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.vertical);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0 && data.direction === \"top\") {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\n","import { calculateBounds, } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            \"bounce\",\n            \"bounce-vertical\",\n            \"bounce-horizontal\",\n            \"bounceVertical\",\n            \"bounceHorizontal\",\n            \"split\",\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n","import { Vector, getDistances, isPointInside, } from \"tsparticles-engine\";\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"destroy\"];\n    }\n    update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"normal\":\n            case \"outside\":\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case \"inside\": {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                const { x: vx, y: vy } = particle.velocity;\n                if ((vx < 0 && dx > particle.moveCenter.radius) ||\n                    (vy < 0 && dy > particle.moveCenter.radius) ||\n                    (vx >= 0 && dx < -particle.moveCenter.radius) ||\n                    (vy >= 0 && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n}\n","import { Vector, isPointInside, } from \"tsparticles-engine\";\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ||\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n","import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"out\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"inside\": {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case \"outside\": {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case \"normal\": {\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === \"right\" &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === \"bottom\" &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n","import { BounceOutMode } from \"./BounceOutMode\";\nimport { DestroyOutMode } from \"./DestroyOutMode\";\nimport { NoneOutMode } from \"./NoneOutMode\";\nimport { OutOutMode } from \"./OutOutMode\";\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n        this._updateOutMode = (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters) {\n                updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.updaters = [\n            new BounceOutMode(container),\n            new DestroyOutMode(container),\n            new OutOutMode(container),\n            new NoneOutMode(container),\n        ];\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, \"bottom\");\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, \"left\");\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, \"right\");\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, \"top\");\n    }\n}\n","import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater\";\nexport async function loadOutModesUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"outModes\", (container) => new OutOfCanvasUpdater(container), refresh);\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.size.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateSize(particle, delta) {\n    const data = particle.size;\n    if (particle.destroyed ||\n        !data ||\n        !data.enable ||\n        ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const sizeVelocity = (data.velocity ?? 0) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += sizeVelocity;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= sizeVelocity;\n            }\n    }\n    if (data.velocity && decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n","import { getRandom } from \"tsparticles-engine\";\nimport { updateSize } from \"./Utils\";\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? 0) <= 0 ||\n                ((particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        particle.size.loops = 0;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateSize(particle, delta);\n    }\n}\n","import { SizeUpdater } from \"./SizeUpdater\";\nexport async function loadSizeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"size\", () => new SizeUpdater(), refresh);\n}\n","import { loadBaseMover } from \"tsparticles-move-base\";\nimport { loadCircleShape } from \"tsparticles-shape-circle\";\nimport { loadColorUpdater } from \"tsparticles-updater-color\";\nimport { loadOpacityUpdater } from \"tsparticles-updater-opacity\";\nimport { loadOutModesUpdater } from \"tsparticles-updater-out-modes\";\nimport { loadSizeUpdater } from \"tsparticles-updater-size\";\nexport async function loadBasic(engine, refresh = true) {\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n","import { addEasing } from \"tsparticles-engine\";\nexport async function loadEasingQuadPlugin() {\n    addEasing(\"ease-in-quad\", (value) => value ** 2);\n    addEasing(\"ease-out-quad\", (value) => 1 - (1 - value) ** 2);\n    addEasing(\"ease-in-out-quad\", (value) => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2));\n}\n","export class Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = \"ease-out-quad\";\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n","import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickAttract = () => {\n            const container = this.container;\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            const { attract } = container;\n            if (!attract.finish) {\n                if (!attract.count) {\n                    attract.count = 0;\n                }\n                attract.count++;\n                if (attract.count === container.particles.count) {\n                    attract.finish = true;\n                }\n            }\n            if (attract.clicking) {\n                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n                if (!attractRadius || attractRadius < 0 || !mousePos) {\n                    return;\n                }\n                this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n            }\n            else if (attract.clicking === false) {\n                attract.particles = [];\n            }\n            return;\n        };\n        this._hoverAttract = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        };\n        this._processAttract = (position, attractRadius, area) => {\n            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n            if (!attractOptions) {\n                return;\n            }\n            const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position);\n                const velocity = attractOptions.speed * attractOptions.factor;\n                const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n                const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n                particle.position.subFrom(normVec);\n            }\n        };\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this._hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this._clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n","import { Attractor } from \"./Attractor\";\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalAttract\", (container) => new Attractor(engine, container), refresh);\n}\nexport * from \"./Options/Classes/Attract\";\nexport * from \"./Options/Interfaces/IAttract\";\n","export class Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._processBounce = (position, radius, area) => {\n            const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (area instanceof Circle) {\n                    circleBounce(circleBounceDataFromParticle(particle), {\n                        position,\n                        radius,\n                        mass: (radius ** 2 * Math.PI) / 2,\n                        velocity: Vector.origin,\n                        factor: Vector.origin,\n                    });\n                }\n                else if (area instanceof Rectangle) {\n                    rectBounce(particle, calculateBounds(position, radius));\n                }\n            }\n        };\n        this._processMouseBounce = () => {\n            const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n            if (!radius || radius < 0 || !mousePos) {\n                return;\n            }\n            this._processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        };\n        this._singleSelectorBounce = (selector, div) => {\n            const container = this.container, query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, radius + tolerance)\n                    : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n                this._processBounce(pos, radius, area);\n            });\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this._processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this._singleSelectorBounce(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n","import { Bouncer } from \"./Bouncer\";\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalBounce\", (container) => new Bouncer(container), refresh);\n}\nexport * from \"./Options/Classes/Bounce\";\nexport * from \"./Options/Interfaces/IBounce\";\n","import { OptionsColor, executeOnSingleOrMultiple, isArray, } from \"tsparticles-engine\";\nexport class BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = isArray(this.color) ? undefined : this.color;\n            this.color = executeOnSingleOrMultiple(data.color, (color) => {\n                return OptionsColor.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { BubbleBase } from \"./BubbleBase\";\nexport class BubbleDiv extends BubbleBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.ids !== undefined) {\n            this.ids = data.ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { BubbleBase } from \"./BubbleBase\";\nimport { BubbleDiv } from \"./BubbleDiv\";\nexport class Bubble extends BubbleBase {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\n            const tmp = new BubbleDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n","import { clamp } from \"tsparticles-engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nimport { calculateBubbleValue } from \"./Utils\";\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * 2) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? 1,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0 || mousePos === undefined) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? 1, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, 1, divBubble);\n                    this._hoverBubbleOpacity(particle, 1, divBubble);\n                    this._hoverBubbleColor(particle, 1, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(\"bubble\", onDiv);\n        if (!(divBubble || (onHover.enable && mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(\"bubble\", onHover.mode) || isInArray(\"bubble\", onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n","import { Bubbler } from \"./Bubbler\";\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalBubble\", (container) => new Bubbler(container), refresh);\n}\nexport * from \"./Options/Classes/BubbleBase\";\nexport * from \"./Options/Classes/BubbleDiv\";\nexport * from \"./Options/Classes/Bubble\";\nexport * from \"./Options/Interfaces/IBubbleBase\";\nexport * from \"./Options/Interfaces/IBubbleDiv\";\nexport * from \"./Options/Interfaces/IBubble\";\n","export class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { ConnectLinks } from \"./ConnectLinks\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    get lineLinked() {\n        return this.links;\n    }\n    set lineLinked(value) {\n        this.links = value;\n    }\n    get line_linked() {\n        return this.links;\n    }\n    set line_linked(value) {\n        this.links = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"tsparticles-engine\";\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n","import { Connector } from \"./Connector\";\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalConnect\", (container) => new Connector(container), refresh);\n}\nexport * from \"./Options/Classes/Connect\";\nexport * from \"./Options/Classes/ConnectLinks\";\nexport * from \"./Options/Interfaces/IConnect\";\nexport * from \"./Options/Interfaces/IConnectLinks\";\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { GrabLinks } from \"./GrabLinks\";\nexport class Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new GrabLinks();\n    }\n    get lineLinked() {\n        return this.links;\n    }\n    set lineLinked(value) {\n        this.links = value;\n    }\n    get line_linked() {\n        return this.links;\n    }\n    set line_linked(value) {\n        this.links = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\n    }\n}\n","import { drawLine, getStyleFromRgb } from \"tsparticles-engine\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? 0, beginPos, mousePos, lineColor, opacity);\n    });\n}\n","import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n","import { Grabber } from \"./Grabber\";\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalGrab\", (container) => new Grabber(container), refresh);\n}\nexport * from \"./Options/Classes/Grab\";\nexport * from \"./Options/Classes/GrabLinks\";\nexport * from \"./Options/Interfaces/IGrab\";\nexport * from \"./Options/Interfaces/IGrabLinks\";\n","import { ExternalInteractorBase } from \"tsparticles-engine\";\nexport class Pauser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== \"pause\") {\n                return;\n            }\n            const container = this.container;\n            if (container.getAnimationStatus()) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n","import { Pauser } from \"./Pauser\";\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalPause\", (container) => new Pauser(container), refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    get particles_nb() {\n        return this.quantity;\n    }\n    set particles_nb(value) {\n        this.quantity = setRangeValue(value);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map((t) => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity ?? data.particles_nb;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n","import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"tsparticles-engine\";\nimport { Push } from \"./Options/Classes/Push\";\nexport class Pusher extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== \"push\") {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = getRangeValue(pushOptions.quantity);\n            if (quantity <= 0) {\n                return;\n            }\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new Push();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n","import { Pusher } from \"./Pusher\";\nexport async function loadExternalPushInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalPush\", (container) => new Pusher(container), refresh);\n}\nexport * from \"./Options/Classes/Push\";\nexport * from \"./Options/Interfaces/IPush\";\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    get particles_nb() {\n        return this.quantity;\n    }\n    set particles_nb(value) {\n        this.quantity = setRangeValue(value);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const quantity = data.quantity ?? data.particles_nb;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n","import { ExternalInteractorBase, getRangeValue, } from \"tsparticles-engine\";\nimport { Remove } from \"./Options/Classes/Remove\";\nexport class Remover extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== \"remove\") {\n                return;\n            }\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new Remove();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n","import { Remover } from \"./Remover\";\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalRemove\", (container) => new Remover(container), refresh);\n}\nexport * from \"./Options/Classes/Remove\";\nexport * from \"./Options/Interfaces/IRemove\";\n","export class RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = \"ease-out-quad\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { RepulseBase } from \"./RepulseBase\";\nexport class RepulseDiv extends RepulseBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.ids !== undefined) {\n            this.ids = data.ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { RepulseBase } from \"./RepulseBase\";\nimport { RepulseDiv } from \"./RepulseDiv\";\nexport class Repulse extends RepulseBase {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\n            const tmp = new RepulseDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Repulse } from \"./Options/Classes/Repulse\";\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse || { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < 0) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== \"repulse\") {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(\"repulse\", divs);\n        if (!(divRepulse || (hover.enable && mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n","import { Repulser } from \"./Repulser\";\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalRepulse\", (container) => new Repulser(engine, container), refresh);\n}\nexport * from \"./Options/Classes/RepulseBase\";\nexport * from \"./Options/Classes/RepulseDiv\";\nexport * from \"./Options/Classes/Repulse\";\nexport * from \"./Options/Interfaces/IRepulseBase\";\nexport * from \"./Options/Interfaces/IRepulseDiv\";\nexport * from \"./Options/Interfaces/IRepulse\";\n","export class Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { ExternalInteractorBase, getDistance, isInArray, } from \"tsparticles-engine\";\nimport { Slow } from \"./Options/Classes/Slow\";\nexport class Slower extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"slow\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < 0 || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n","import { Slower } from \"./Slower\";\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalSlow\", (container) => new Slower(container), refresh);\n}\nexport * from \"./Options/Classes/Slow\";\nexport * from \"./Options/Interfaces/ISlow\";\n","export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n","export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\n","import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n","import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n","import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n","export class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","import { Preload } from \"./Options/Classes/Preload\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n","import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.random.minimumValue = 0.0001;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { LifeDelay } from \"./LifeDelay\";\nimport { LifeDuration } from \"./LifeDuration\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n","import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n","import { LifeUpdater } from \"./LifeUpdater\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"life\", (container) => new LifeUpdater(container), refresh);\n}\n","export class LineDrawer {\n    draw(context, particle, radius) {\n        const shapeData = particle.shapeData;\n        context.moveTo(-radius / 2, 0);\n        context.lineTo(radius / 2, 0);\n        context.lineCap = shapeData?.cap ?? \"butt\";\n    }\n    getSidesCount() {\n        return 1;\n    }\n}\n","import { LineDrawer } from \"./LineDrawer\";\nexport async function loadLineShape(engine, refresh = true) {\n    await engine.addShape(\"line\", new LineDrawer(), refresh);\n}\n","import { isSsr } from \"tsparticles-engine\";\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if (isSsr() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width / 2,\n            y: canvasSize.height / 2,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n    }\n}\n","import { ParallaxMover } from \"./ParallaxMover\";\nexport async function loadParallaxMover(engine, refresh = true) {\n    await engine.addMover(\"parallax\", () => new ParallaxMover(), refresh);\n}\n","export class ParticlesInteractorBase {\n    constructor(container) {\n        this.container = container;\n        this.type = \"particles\";\n    }\n}\n","import { ParticlesInteractorBase, getDistances, } from \"tsparticles-engine\";\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1) {\n        const container = this.container, distance = p1.retina.attractDistance ?? container.retina.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * 1000), ay = dy / (rotate.y * 1000), p1Factor = p2.size.value / p1.size.value, p2Factor = 1 / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n","import { Attractor } from \"./Attractor\";\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesAttract\", (container) => new Attractor(container), refresh);\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / 10, 0, r2);\n    p1.size.value += factor / 2;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n","import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"tsparticles-engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n","import { bounce } from \"./Bounce\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n","import { absorb } from \"./Absorb\";\nimport { bounce } from \"./Bounce\";\nimport { destroy } from \"./Destroy\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n","import { Collider } from \"./Collider\";\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesCollisions\", (container) => new Collider(container), refresh);\n}\n","import { Circle, Rectangle } from \"tsparticles-engine\";\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new OptionsColor();\n        this.color.value = \"#000\";\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nimport { LinksShadow } from \"./LinksShadow\";\nimport { LinksTriangle } from \"./LinksTriangle\";\nexport class Links {\n    constructor() {\n        this.blink = false;\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new LinksShadow();\n        this.triangles = new LinksTriangle();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n","import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? 0, warp = linkOpt1.warp, range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);\n        }\n    }\n    reset() {\n    }\n}\n","import { Linker } from \"./Linker\";\nexport async function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesLinks\", (container) => new Linker(container), refresh);\n}\n","import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n","import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links || links.length <= 0) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n","import { LinkInstance } from \"./LinkInstance\";\nclass LinksPlugin {\n    constructor() {\n        this.id = \"links\";\n    }\n    getPlugin(container) {\n        return new LinkInstance(container);\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nexport async function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin();\n    await engine.addPlugin(plugin, refresh);\n}\n","import { loadLinksInteraction } from \"./interaction\";\nimport { loadLinksPlugin } from \"./plugin\";\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\nexport * from \"./Options/Classes/Links\";\nexport * from \"./Options/Classes/LinksShadow\";\nexport * from \"./Options/Classes/LinksTriangle\";\nexport * from \"./Options/Interfaces/ILinks\";\nexport * from \"./Options/Interfaces/ILinksShadow\";\nexport * from \"./Options/Interfaces/ILinksTriangle\";\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class PolygonDrawerBase {\n    draw(context, particle, radius) {\n        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;\n        if (!context) {\n            return;\n        }\n        context.beginPath();\n        context.translate(start.x, start.y);\n        context.moveTo(0, 0);\n        for (let i = 0; i < sideCount; i++) {\n            context.lineTo(side.length, 0);\n            context.translate(side.length, 0);\n            context.rotate(interiorAngle);\n        }\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? polygon?.nb_sides ?? 5));\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class PolygonDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / 3.5),\n            y: -radius / (2.66 / 3.5),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * 2.66) / (sides / 3),\n        };\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class TriangleDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / 1.66,\n        };\n    }\n    getSidesCount() {\n        return 3;\n    }\n    getSidesData(particle, radius) {\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: radius * 2,\n        };\n    }\n}\n","import { PolygonDrawer } from \"./PolygonDrawer\";\nimport { TriangleDrawer } from \"./TriangleDrawer\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    await engine.addShape(\"polygon\", new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    await engine.addShape(\"triangle\", new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom, } from \"tsparticles-engine\";\nimport { RotateAnimation } from \"./RotateAnimation\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = \"clockwise\";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n","import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateRotate(particle, delta) {\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRotate(particle, delta);\n        particle.rotation = particle.rotate?.value ?? 0;\n    }\n}\n","import { RotateUpdater } from \"./RotateUpdater\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"rotate\", (container) => new RotateUpdater(container), refresh);\n}\n","const fixFactor = Math.sqrt(2);\nexport class SquareDrawer {\n    draw(context, particle, radius) {\n        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;\n        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n    }\n    getSidesCount() {\n        return 4;\n    }\n}\n","import { SquareDrawer } from \"./SquareDrawer\";\nexport async function loadSquareShape(engine, refresh = true) {\n    await engine.addShape([\"edge\", \"square\"], new SquareDrawer(), refresh);\n}\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class StarDrawer {\n    draw(context, particle, radius) {\n        const sides = particle.sides, inset = particle.starInset ?? 2;\n        context.moveTo(0, 0 - radius);\n        for (let i = 0; i < sides; i++) {\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius * inset);\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius);\n        }\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? star?.nb_sides ?? 5));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData, inset = getRangeValue(star?.inset ?? 2);\n        particle.starInset = inset;\n    }\n}\n","import { StarDrawer } from \"./StarDrawer\";\nexport async function loadStarShape(engine, refresh = true) {\n    await engine.addShape(\"star\", new StarDrawer(), refresh);\n}\n","import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateStrokeColor(particle, delta) {\n    if (!particle.strokeColor || !particle.strokeAnimation) {\n        return;\n    }\n    const { h, s, l } = particle.strokeColor, { h: hAnimation, s: sAnimation, l: lAnimation } = particle.strokeAnimation;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n","import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateStrokeColor } from \"./Utils\";\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? 1);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateStrokeColor(particle, delta);\n    }\n}\n","import { StrokeColorUpdater } from \"./StrokeColorUpdater\";\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"strokeColor\", (container) => new StrokeColorUpdater(container), refresh);\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { TextDrawer, validTypes } from \"./TextDrawer\";\nexport async function loadTextShape(engine, refresh = true) {\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n","import { initPjs } from \"tsparticles-particles.js\";\nimport { loadBasic } from \"tsparticles-basic\";\nimport { loadEasingQuadPlugin } from \"tsparticles-plugin-easing-quad\";\nimport { loadExternalAttractInteraction } from \"tsparticles-interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"tsparticles-interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"tsparticles-interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"tsparticles-interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"tsparticles-interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"tsparticles-interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"tsparticles-interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"tsparticles-interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"tsparticles-interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"tsparticles-interaction-external-slow\";\nimport { loadImageShape } from \"tsparticles-shape-image\";\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\nimport { loadLineShape } from \"tsparticles-shape-line\";\nimport { loadParallaxMover } from \"tsparticles-move-parallax\";\nimport { loadParticlesAttractInteraction } from \"tsparticles-interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"tsparticles-interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"tsparticles-interaction-particles-links\";\nimport { loadPolygonShape } from \"tsparticles-shape-polygon\";\nimport { loadRotateUpdater } from \"tsparticles-updater-rotate\";\nimport { loadSquareShape } from \"tsparticles-shape-square\";\nimport { loadStarShape } from \"tsparticles-shape-star\";\nimport { loadStrokeColorUpdater } from \"tsparticles-updater-stroke-color\";\nimport { loadTextShape } from \"tsparticles-shape-text\";\nexport async function loadSlim(engine, refresh = true) {\n    initPjs(engine);\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin();\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadTextShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nimport { TiltAnimation } from \"./TiltAnimation\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = \"clockwise\";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n","export function updateTilt(particle, delta) {\n    if (!particle.tilt || !particle.options.tilt) {\n        return;\n    }\n    const tilt = particle.options.tilt, tiltAnimation = tilt.animation, speed = (particle.tilt.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = particle.tilt.decay ?? 1;\n    if (!tiltAnimation.enable) {\n        return;\n    }\n    switch (particle.tilt.status) {\n        case \"increasing\":\n            particle.tilt.value += speed;\n            if (particle.tilt.value > max) {\n                particle.tilt.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            particle.tilt.value -= speed;\n            if (particle.tilt.value < 0) {\n                particle.tilt.value += max;\n            }\n            break;\n    }\n    if (particle.tilt.velocity && decay !== 1) {\n        particle.tilt.velocity *= decay;\n    }\n}\n","import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n","import { TiltUpdater } from \"./TiltUpdater\";\nexport async function loadTiltUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"tilt\", (container) => new TiltUpdater(container), refresh);\n}\n","import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nexport class TwinkleValues {\n    constructor() {\n        this.enable = false;\n        this.frequency = 0.05;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = setRangeValue(data.opacity);\n        }\n    }\n}\n","import { TwinkleValues } from \"./TwinkleValues\";\nexport class Twinkle {\n    constructor() {\n        this.lines = new TwinkleValues();\n        this.particles = new TwinkleValues();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.lines.load(data.lines);\n        this.particles.load(data.particles);\n    }\n}\n","import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    update() {\n    }\n}\n","import { TwinkleUpdater } from \"./TwinkleUpdater\";\nexport async function loadTwinkleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"twinkle\", () => new TwinkleUpdater(), refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n","import { isNumber, setRangeValue, } from \"tsparticles-engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n","export function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n","import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue(wobbleOpt?.distance ?? 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n","import { WobbleUpdater } from \"./WobbleUpdater\";\nexport async function loadWobbleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"wobble\", (container) => new WobbleUpdater(container), refresh);\n}\n","import { loadAbsorbersPlugin } from \"tsparticles-plugin-absorbers\";\nimport { loadDestroyUpdater } from \"tsparticles-updater-destroy\";\nimport { loadEmittersPlugin } from \"tsparticles-plugin-emitters\";\nimport { loadExternalTrailInteraction } from \"tsparticles-interaction-external-trail\";\nimport { loadRollUpdater } from \"tsparticles-updater-roll\";\nimport { loadSlim } from \"tsparticles-slim\";\nimport { loadTiltUpdater } from \"tsparticles-updater-tilt\";\nimport { loadTwinkleUpdater } from \"tsparticles-updater-twinkle\";\nimport { loadWobbleUpdater } from \"tsparticles-updater-wobble\";\nexport async function loadFull(engine, refresh = true) {\n    await loadDestroyUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadTwinkleUpdater(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadExternalTrailInteraction(engine, false);\n    await loadAbsorbersPlugin(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadSlim(engine, refresh);\n}\n"],"names":["AbsorberSizeLimit","constructor","this","radius","mass","load","data","undefined","AbsorberSize","ValueWithRandom","super","density","value","limit","Absorber","color","OptionsColor","O","draggable","opacity","destroy","orbits","size","create","name","position","x","y","AbsorberInstance","absorbers","container","options","_calcPosition","exactPosition","canvas","Vector","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","setTo","velocity","initialVelocity","absorberOrbit","length","getPosition","angle","Math","PI","minSize","min","width","height","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","origin","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","reduceFactor","addV","addTo","initialPosition","dragging","b","g","r","copy","attract","mouse","interactivity","clicking","downPosition","mouseDist","pos","dx","dy","distance","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","fill","resize","Absorbers","array","interactivityAbsorbers","getAbsorber","idxOrName","find","t","addAbsorber","absorber","push","handleClickMode","mode","absorberOptions","modeAbsorbers","absorbersModeOptions","absorbersOptions","aPosition","clickPosition","init","actualOptions","modes","particleUpdate","removeAbsorber","index","indexOf","splice","stop","AbsorbersPlugin","id","getPlugin","loadOptions","source","needsPlugin","tmp","events","onClick","async","loadAbsorbersPlugin","engine","refresh","addPlugin","DestroyBounds","bottom","left","right","top","SplitFactor","SplitRate","max","Split","count","factor","rate","sizeOffset","particles","colorOffset","h","s","l","Destroy","bounds","split","addSplitParticle","parent","splitParticlesOptions","destroyOptions","splitOptions","parentColor","getFillColor","hsl","move","center","offset","addParticle","group","splitCount","unbreakable","setTimeout","particlesSplitOptions","i","DestroyUpdater","particlesOptions","destroyBoundsOptions","destroyBounds","isEnabled","sources","particleDestroyed","override","update","loadDestroyUpdater","addParticleUpdater","CircleShape","randomPosition","generateTheta","u","theta","atan","tan","sqrt","a","randomTheta","maxRadius","randomRadius","EmitterLife","wait","delay","duration","EmitterRate","quantity","EmitterSize","Emitter","autoPlay","life","shape","startCount","direction","domId","spawnColor","AnimatableColor","EmitterInstance","emitters","_destroy","removeEmitter","_engine","dispatchEvent","emitter","_emit","_paused","_emitParticles","getSize","singleParticlesOptions","_particlesOptions","hslAnimation","animation","_setColorAnimation","pPosition","_shape","_prepareToDie","_lifeCount","_immortal","_duration","initValue","maxValue","enable","emitFactor","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","_spawnDelay","emitterShapeManager","getShape","_firstSpawn","_startParticlesAdded","play","externalPause","pause","externalPlay","element","document","getElementById","elRect","getBoundingClientRect","_emitDelay","delta","Emitters","interactivityEmitters","random","getEmitter","addEmitter","playEmitter","pauseEmitter","emitterOptions","modeEmitters","emittersModeOptions","usedIndexes","idx","includes","emittersOptions","ePosition","shapes","Map","ShapeManager","addShape","drawer","set","get","getSupportedShapes","keys","randomSquareCoordinate","SquareShape","halfW","halfH","side","floor","EmittersPlugin","map","emitterMode","loadEmittersPlugin","addEmitterShape","plugin","ExternalInteractorBase","type","Trail","pauseOnStop","TrailMaker","_delay","clear","interact","trailOptions","trail","optDelay","canEmit","_lastPosition","mousePos","inside","onHover","loadModeOptions","reset","loadExternalTrailInteraction","addInteractor","initParticle","rollOpt","roll","horizontal","vertical","backColor","darken","enlighten","alterType","alter","updateRoll","RollLight","Roll","RollUpdater","getTransformValues","rollHorizontal","rollVertical","d","spawning","loadRollUpdater","Particles","selector","Error","el","querySelector","replace","fullScreen","links","minDistance","connectParticles","number","maxParticles","sizeVariations","responsive","maxWidth","breakpoint","then","_container","pauseAnimation","resumeAnimation","initParticlesJS","particlesJS","tagId","pathConfigJson","callback","loadJSON","catch","setOnClickHandler","pJSDom","dom","initPjs","window","applyDistance","dxFixed","abs","dyFixed","maxDistance","hDistance","vDistance","misplaced","vel","moveOptions","maxSpeed","moveDrift","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","moveDecay","multTo","mult","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","vibrate","spin","maxCanvasSize","pathOptions","path","pathEnabled","lastPathTime","pathDelay","pathGenerator","generate","clamp","getProximitySpeedFactor","slow","inRange","diffFactor","BaseMover","_initSpin","spinOptions","spinPos","spinCenter","spinAcceleration","particleOptions","pxRatio","slowFactor","baseSpeed","drift","maxSize","loadBaseMover","addMover","CircleDrawer","circleRange","getSidesCount","particleInit","shapeData","loadCircleShape","updateColorValue","colorValue","valueAnimation","decrease","maxLoops","loops","time","delayTime","status","updateColor","hAnimation","sAnimation","lAnimation","ColorUpdater","hslColor","reduceDuplicates","loadColorUpdater","checkDestroy","minValue","updateOpacity","OpacityUpdater","opacityOptions","opacityAnimation","sync","loadOpacityUpdater","bounceHorizontal","outMode","bounced","newVelocity","bounce","minPos","bounceVertical","BounceOutMode","handled","plugins","particleBounce","DestroyOutMode","_delta","outType","moveCenter","vx","vy","remove","NoneOutMode","pRadius","OutOutMode","circVec","newDx","newDy","atan2","wrap","warp","newPos","sizeValue","nextBounds","OutOfCanvasUpdater","_updateOutMode","updater","updaters","outModes","default","loadOutModesUpdater","updateSize","sizeVelocity","SizeUpdater","sizeOptions","sizeAnimation","sizeAnimationSpeed","loadSizeUpdater","loadBasic","loadEasingQuadPlugin","Attract","easing","Attractor","_clickAttract","finish","attractRadius","attractModeDistance","_processAttract","Circle","C","_hoverAttract","area","attractOptions","query","quadTree","p","attractFactor","normVec","subFrom","mouseMoveStatus","hoverEnabled","hoverMode","clickEnabled","clickMode","loadExternalAttractInteraction","Bounce","Bouncer","_processBounce","Rectangle","_processMouseBounce","tolerance","bounceModeDistance","_singleSelectorBounce","div","querySelectorAll","forEach","item","elem","offsetLeft","offsetWidth","offsetTop","offsetHeight","divs","onDiv","loadExternalBounceInteraction","BubbleBase","mix","sourceColor","BubbleDiv","selectors","ids","Bubble","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","Bubbler","_clickBubble","mouseClickPos","bubbleOptions","bubble","bubbleModeDistance","queryCircle","durationEnd","distMouse","timeSpent","Date","getTime","clickTime","sizeData","bubbleObj","optValue","bubbleModeSize","particlesObj","_process","opacityData","_hoverBubbleColor","_hoverBubble","pointDistance","_hoverBubbleSize","_hoverBubbleOpacity","divBubble","finalColor","modeColor","bubbleColor","pColor","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","_singleSelectorHover","repulseRadius","contains","force","loadExternalBubbleInteraction","ConnectLinks","Connect","lineLinked","line_linked","gradient","p1","p2","gradStop","color1","color2","sourcePos","destPos","midRgb","grad","createLinearGradient","addColorStop","drawConnectLine","lineStyle","begin","end","lineWidth","strokeStyle","stroke","ctx","connectOptions","connect","drawConnection","ls","pos1","pos2","linksWidth","Connector","connectModeDistance","connectModeRadius","slice","distMax","xDiff","yDiff","loadExternalConnectInteraction","GrabLinks","blink","consent","Grab","drawGrabLine","colorLine","drawGrab","lineColor","beginPos","Grabber","grab","grabModeDistance","grabLineOptions","lineOpacity","opacityLine","optColor","grabLineColor","linksOptions","loadExternalGrabInteraction","Pauser","getAnimationStatus","loadExternalPauseInteraction","Push","groups","particles_nb","Pusher","pushOptions","groupOptions","loadExternalPushInteraction","Remove","Remover","removeNb","removeQuantity","loadExternalRemoveInteraction","RepulseBase","RepulseDiv","Repulse","Repulser","_clickRepulse","repulseOptions","repulse","repulseDistance","repulseModeDistance","range","vect","_hoverRepulse","_processRepulse","divRepulse","repulseFactor","_singleSelectorRepulse","repulseOpts","hover","click","loadExternalRepulseInteraction","Slow","Slower","slowModeRadius","slowOptions","particlePos","dist","proximityFactor","loadExternalSlowInteraction","InterlaceOffsets","InterlaceSteps","ByteStream","bytes","Uint8ClampedArray","getString","reduce","acc","curr","String","fromCharCode","nextByte","nextTwoBytes","readSubBlocks","blockString","readSubBlocksBin","len","blockData","Uint8Array","skipSubBlocks","parseColorTable","byteStream","colors","parseExtensionBlock","gif","getFrameIndex","getTransparencyIndex","frame","frames","packedByte","GCreserved","disposalMethod","userInputDelayFlag","transparencyFlag","transparencyIndex","applicationExtension","identifier","authenticationCode","applicationExtensions","comments","globalColorTable","EvalError","plainTextData","charSize","foregroundColor","backgroundColor","text","parseImageBlock","avgAlpha","progressCallback","localColorTableFlag","interlacedFlag","sortFlag","reserved","localColorCount","localColorTable","getColor","image","ImageData","colorSpace","error","DOMException","minCodeSize","imageData","clearCode","readBits","bytePos","bitPos","code","dic","pass","pixelPos","lineIndex","last","concat","bitmap","createImageBitmap","parseBlock","getGIFLoopAmount","extension","NaN","decodeGIF","gifURL","res","fetch","ok","buffer","arrayBuffer","totalTime","colorRes","pixelAspectRatio","backgroundImage","globalColorTableFlag","globalColorCount","backgroundColorIndex","copyWithin","frameIndex","incrementFrameIndex","getframeIndex","increment","newValue","Infinity","message","currentColorRegex","replaceColorSvg","imageShape","svgData","colorStyle","preFillIndex","substring","loadImage","Promise","resolve","loading","img","Image","addEventListener","src","loadGifImage","gifData","gifLoopCount","downloadSvgImage","response","replaceImageColor","svgColoredData","imageRes","loaded","replaceColor","replace_color","svg","Blob","domUrl","URL","webkitURL","url","createObjectURL","revokeObjectURL","img2","ImageDrawer","loadImageShape","addImage","images","globalAlpha","offscreenCanvas","OffscreenCanvas","offscreenContext","getContext","imageSmoothingQuality","imageSmoothingEnabled","clearRect","gifFrame","gifTime","scale","drawImage","putImageData","previousImageData","getImageData","preload","loadShape","close","Preload","ImagePreloaderPlugin","preloadOptions","existing","addLoadImageToEngine","imageFunc","preloader","LifeDelay","LifeDuration","minimumValue","Life","LifeUpdater","lifeOptions","justSpawned","widthRange","heightRange","loadLifeUpdater","LineDrawer","moveTo","lineTo","lineCap","cap","loadLineShape","ParallaxMover","parallax","parallaxOptions","parallaxForce","canvasCenter","parallaxSmooth","smooth","centerDistance","loadParallaxMover","ParticlesInteractorBase","attractDistance","rotate","ax","ay","p1Factor","p2Factor","loadParticlesAttractInteraction","updateAbsorb","r1","r2","collisions","absorb","fixBounceSpeed","collisionMaxSpeed","deleteP","resolveCollision","Collider","radius1","radius2","round","z","distP","loadParticlesCollisionsInteraction","CircleWarp","point","intersects","rect","circle","biggerCircle","rectSW","LinksShadow","blur","LinksTriangle","frequency","Links","shadow","triangles","getLinkDistance","optDistance","absDiffs","warpDistances","Linker","_setColor","linkContainer","linkColor","linksColor","linksColors","linkOpt1","linksDistance","linkOpt2","some","destination","loadParticlesOptions","loadLinksInteraction","drawLinkLine","params","drawn","backgroundMask","pi1","pi2","endNE","d1","yi","endSW","d2","xi","endSE","d3","globalCompositeOperation","composite","shadowColor","shadowBlur","drawLinkTriangle","pos3","colorTriangle","opacityTriangle","getLinkKey","sort","join","setLinkFrequency","dictionary","key","LinkInstance","_drawLinkLine","link","p1LinksOptions","twinkle","lines","twinkleFreq","twinkleRgb","twinkling","_drawLinkTriangle","link1","link2","triangleOptions","p3","_drawTriangles","p1Links","vertices","filter","linkFreq","_getLinkFrequency","findIndex","vertex","triangleFreq","_getTriangleFrequency","_freqs","drawParticle","particleCreated","LinksPlugin","loadLinksPlugin","loadParticlesLinksInteraction","PolygonDrawerBase","start","getCenter","getSidesData","sideCount","numerator","denominator","decimalSides","interiorAngleDegrees","interiorAngle","polygon","sides","nb_sides","PolygonDrawer","TriangleDrawer","loadGenericPolygonShape","loadTriangleShape","loadPolygonShape","RotateAnimation","Rotate","updateRotate","rotateOptions","rotateAnimation","RotateUpdater","pathRotation","rotateDirection","rotation","loadRotateUpdater","fixFactor","SquareDrawer","fixedRadius","fixedDiameter","loadSquareShape","StarDrawer","inset","starInset","star","loadStarShape","updateStrokeColor","strokeColor","strokeAnimation","StrokeColorUpdater","strokeWidth","strokeOpacity","strokeHslColor","loadStrokeColorUpdater","validTypes","TextDrawer","character","textData","randomIndexData","style","weight","font","offsetX","fillText","strokeText","shapeOptions","promises","all","loadTextShape","loadSlim","TiltAnimation","Tilt","updateTilt","tilt","tiltAnimation","TiltUpdater","cosDirection","c","sinDirection","tiltOptions","tiltDirection","loadTiltUpdater","TwinkleValues","Twinkle","TwinkleUpdater","getColorStyles","pOptions","twinkleOptions","zOpacityFactor","opacityRate","twinklingOpacity","twinkleStyle","needsTwinkle","loadTwinkleUpdater","WobbleSpeed","Wobble","rangeSpeed","updateWobble","wobble","wobbleOptions","angleSpeed","wobbleDistance","WobbleUpdater","wobbleOpt","loadWobbleUpdater","loadFull"],"sourceRoot":""}